diff --git a/go-ethereum/.git/HEAD b/mxc-geth/.git/HEAD
index ca23a11..c6a1cb7 100644
--- a/go-ethereum/.git/HEAD
+++ b/mxc-geth/.git/HEAD
@@ -1 +1 @@
-a38f4108571d1a144dc3cf3faf8990430d109bc4
+ref: refs/heads/mxc-wannsee-alpha3
diff --git a/go-ethereum/.git/config b/mxc-geth/.git/config
index c473f40..dce4ac6 100644
--- a/go-ethereum/.git/config
+++ b/mxc-geth/.git/config
@@ -6,5 +6,8 @@
 	ignorecase = true
 	precomposeunicode = true
 [remote "origin"]
-	url = https://github.com/ethereum/go-ethereum
+	url = https://github.com/MXCzkEVM/mxc-geth
 	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "mxc-wannsee-alpha3"]
+	remote = origin
+	merge = refs/heads/mxc-wannsee-alpha3
diff --git a/go-ethereum/.git/index b/mxc-geth/.git/index
index 6c7821c..cf9671a 100644
Binary files a/go-ethereum/.git/index and b/mxc-geth/.git/index differ
diff --git a/go-ethereum/.git/logs/HEAD b/mxc-geth/.git/logs/HEAD
index 0c52050..4619577 100644
--- a/go-ethereum/.git/logs/HEAD
+++ b/mxc-geth/.git/logs/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 a38f4108571d1a144dc3cf3faf8990430d109bc4 Senna Zuo <sennazuo@KP-MBP-1614.local> 1688959080 +0800	clone: from https://github.com/ethereum/go-ethereum
+0000000000000000000000000000000000000000 7212990145fec5d143a40606bb80e435adee35f7 Senna Zuo <sennazuo@KP-MBP-1614.local> 1688958243 +0800	clone: from https://github.com/MXCzkEVM/mxc-geth
diff --git a/mxc-geth/.git/logs/refs/heads/mxc-wannsee-alpha3 b/mxc-geth/.git/logs/refs/heads/mxc-wannsee-alpha3
new file mode 100644
index 0000000..4619577
--- /dev/null
+++ b/mxc-geth/.git/logs/refs/heads/mxc-wannsee-alpha3
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 7212990145fec5d143a40606bb80e435adee35f7 Senna Zuo <sennazuo@KP-MBP-1614.local> 1688958243 +0800	clone: from https://github.com/MXCzkEVM/mxc-geth
diff --git a/go-ethereum/.git/logs/refs/remotes/origin/HEAD b/mxc-geth/.git/logs/refs/remotes/origin/HEAD
index 2ed5a63..4619577 100644
--- a/go-ethereum/.git/logs/refs/remotes/origin/HEAD
+++ b/mxc-geth/.git/logs/refs/remotes/origin/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 c2db667c8f824ec0d025cbde95e6aaad67fc10ba Senna Zuo <sennazuo@KP-MBP-1614.local> 1688959080 +0800	clone: from https://github.com/ethereum/go-ethereum
+0000000000000000000000000000000000000000 7212990145fec5d143a40606bb80e435adee35f7 Senna Zuo <sennazuo@KP-MBP-1614.local> 1688958243 +0800	clone: from https://github.com/MXCzkEVM/mxc-geth
diff --git a/go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.idx b/mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.idx
similarity index 52%
rename from go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.idx
rename to mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.idx
index 7544e02..8b1a0fb 100644
Binary files a/go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.idx and b/mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.idx differ
diff --git a/go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.pack b/mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.pack
similarity index 95%
rename from go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.pack
rename to mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.pack
index 6b95804..7fb00dd 100644
Binary files a/go-ethereum/.git/objects/pack/pack-393345e4d30f37b4a8f451b4d9a125e97d35ef66.pack and b/mxc-geth/.git/objects/pack/pack-582d549367fda89e45bf99f8028ba9b9aa3b7728.pack differ
diff --git a/go-ethereum/.git/packed-refs b/mxc-geth/.git/packed-refs
index cbdd00c..0d35bb8 100644
--- a/go-ethereum/.git/packed-refs
+++ b/mxc-geth/.git/packed-refs
@@ -5,7 +5,9 @@
 9ad6094a5dc280f568927768415545173636fb65 refs/remotes/origin/buildbot-testing
 405822a262556856f03b7f1b1520511f55b419c1 refs/remotes/origin/documentNavScroll
 5e3047dd7af721cc14cb5f37f29e45495eca38a6 refs/remotes/origin/gh-pages
-c2db667c8f824ec0d025cbde95e6aaad67fc10ba refs/remotes/origin/master
+2adce0b06640aa665706d014a92cd06f0720dcab refs/remotes/origin/master
+7212990145fec5d143a40606bb80e435adee35f7 refs/remotes/origin/mxc-wannsee-alpha3
+6f93f45d377861776098de414e9c69bd7578ed33 refs/remotes/origin/mxc-wannsee-alpha3-patch-luanxu
 68420e1aa58fdd68b578f9ceaaa06cd55b857fce refs/remotes/origin/pa
 218f437b0c2a80aa189e703520b5e1a5b9841b0f refs/remotes/origin/poc8
 d673c34c8d4ae83a3765ed44ae9d0fb7ce1aa3c9 refs/remotes/origin/release/0.9.36
@@ -13,8 +15,7 @@ d673c34c8d4ae83a3765ed44ae9d0fb7ce1aa3c9 refs/remotes/origin/release/0.9.36
 b9623b1d417fd1d2e66c4e8e1f5deec012d010a8 refs/remotes/origin/release/1.0.1
 adf2b8d01dbd1da39e4ef23f5a3341b07495651e refs/remotes/origin/release/1.1.0
 e5eb32acee19cc9fca6a03b10283b7484246b15a refs/remotes/origin/release/1.10
-ea9e62ca3db5c33aa7438ebf39c189afd53c6bf8 refs/remotes/origin/release/1.11
-e501b3b05db8e169f67dc78b7b59bc352b3c638d refs/remotes/origin/release/1.12
+a38f4108571d1a144dc3cf3faf8990430d109bc4 refs/remotes/origin/release/1.11
 6962eda19dc0269146c4b729275f9a2561bd11d9 refs/remotes/origin/release/1.2.1
 f75becc264f8bde0f58391fc226243d03e78aa7b refs/remotes/origin/release/1.3.0
 5490437942967638bcc6198035315f6811febaa8 refs/remotes/origin/release/1.3.2
@@ -32,273 +33,6 @@ e7872729012a4871397307b12cc3f4772ffcbec6 refs/remotes/origin/release/1.9
 eb8be4e4fe24caefe17c01ed37e9193fbed9f437 refs/remotes/origin/revert-26265-console/eth_call
 622d5f54f0bef74d96652cafd7f483ef0fd0fc14 refs/remotes/origin/revert-26290-generic-prque-extended
 66e160335142b35573f478f6def8f1c64cf9070a refs/remotes/origin/s1na-patch-1
-c8ad90a996c977535983c3068ac5321cbc214540 refs/remotes/origin/website
-5caa9557d0fa9d986d3edabd8dd4e563257bd32d refs/remotes/origin/website-matomo
-03bba35fad1328dcf0efbfdac4c0792002fd86f9 refs/tags/0.2.2
-^9e57aac5eb58a475ef85b3929527248d6e5657a8
-3d0bfe547bed1b6bdf416cb6efecf082e695b00e refs/tags/0.3.0
-^0adfa489de3fb88c995246d0b70af8bbd06f8db7
-893da20ead0f9a355e17efe2ab2909c8dcac1254 refs/tags/0.3.1
-01ffa1e6aca6bd6a5f71c6567d1bcfa81842c4ff refs/tags/0.5.13
-^98335d2040bbd2b18a238b4ffa47e50507fffb31
-7bd4e45d16df2fe96a356c2c96d42e61bff7d49a refs/tags/0.5.14
-^cba47963113d8041281278d75ee0dad046798e82
-38585d5d4a9df6d853b223c2e502f777f071ddb6 refs/tags/0.5.15
-^3777ead25e1acedc0571a48a485976eb5c36fb30
-7566816df2e1757ceca2fa5c9a7ca0b077170924 refs/tags/0.5.16
-^cb595fb63cf4f0d0d9b8b145786b9eec7aadcf22
-c9517024237de781cdc450bca89907217e5a8cef refs/tags/0.5.17
-f702e27485981562ed7b88ecd3f8485af4c61b62 refs/tags/0.5.18
-f702e27485981562ed7b88ecd3f8485af4c61b62 refs/tags/0.5.19
-97c37356fdcfac8b704c3d75b33e322a737c4e55 refs/tags/0.9.16
-13e662f6dec6342a488a9dad60f2093b72c14bb6 refs/tags/0.9.23
-9666db2a442887ccf8ec2d81f5e2fedc1a3a3d3e refs/tags/1.2.1
-9c5b25ff99749df3f8ffb0a0dca3d8a036e2c7cf refs/tags/2
-^198ef97108ec257d49a7b593a9c6fe49961319c0
-78dbc3046acda4e517fd900301820172b99baff6 refs/tags/PoC6
-^dfe66cab3fb533003ddaec7250d8fffbf3fbad65
-621fd8fe7f5697002ed58b4bbee107bcf1337147 refs/tags/buildbot-testing-tag-3
-827f341c97e9243b0c04a2fbde363b949bc3215d refs/tags/poc1
-fa3703ee8ac138165c08ee40929220c30baf794b refs/tags/poc5-rc1
-^a77dcd10414e94fbd255931b0a539bbfefd91f56
-43e87e03d47f1e5b8e4f499a0ff1bdc85b4dc10a refs/tags/poc5-rc10
-^0dda955f90b674090066d3621b40eabba14f8559
-24ff66f356f33e7ecd1ce3417b3ff23b6f16812f refs/tags/poc5-rc11
-^2114218ed8c9588d107f40ca2f3d7a836809b754
-ca840bfdff206c0e87ca06041c0e59ffbad5a605 refs/tags/poc5-rc12
-^aa8a86f0a61286b3d0709316215ce6e9d3833f25
-6aa4c296b9e2d80eb07abc5b942e210f016857be refs/tags/poc5-rc2
-^b0023f66b06fe1248168420a9526a64c3e09cd75
-65a74dc6cc3c641dd3d275baaaa452eee3623ec3 refs/tags/poc5-rc3
-^721d3a9a57fbc7478255d52271531f001375b863
-56b276b1716d13fa1239eb529ef1d11dcb443622 refs/tags/poc5-rc4
-^1adfc272a856d466e3d513522ee2fa83853b08ab
-6135d25c7187717aefcffc2d2af83ca790c74b02 refs/tags/poc5-rc6
-^942f552c620471602326c1ded54095c1cf41ed76
-eafce1e07a7761c00ce6bbe181daba2fc00fee6f refs/tags/poc5-rc7
-^c07c454935609bfb0f65dc38bb596a90d5493fbb
-595901f55aa3eea1997ff38c98f54605ef227c2a refs/tags/poc5-rc8
-^7f1a4c377c18055137909521d809251248b7b5af
-e661fe72dd0e766406a79e594a17741eb1d72627 refs/tags/poc5-rc9
-^0d89c1d212e121b4904bf24b5332de9d4344334b
-0b9a3ea4074d1de13521cc902e26ecae08a028ab refs/tags/v0.4.1
-3cdc45ee0fadc000ec3dbbe87225f18061402527 refs/tags/v0.4.2
-66e016c6dc71abadf4a18ecf8688cf66079f6212 refs/tags/v0.4.3
-735487b642d1a1ccd088dff3485be2a2677fea8a refs/tags/v0.6.0
-^b3f25a6adeec5d07a168d608798fddfae44fef9c
-bbe2e14ae96112e40bf61da5ff357dc4ba2eff80 refs/tags/v0.6.3
-^ed73fc0be3abbaad31302be67ed4137140883de4
-de5ea56f5a4ab673aad45a1d5db51f01649ecb81 refs/tags/v0.6.4
-^7855a233a7ed4968d93fc76a74501c931574f6eb
-43683b75bf02793155908acae0b2ed8b52bf09a1 refs/tags/v0.6.5
-^154ca03228a9d97a4b2319f525814a16f102430f
-db41b3e0ef9a33184f997e09378ae25090c7055c refs/tags/v0.6.5-1
-^29ca238a7ac3afd86c9484901f74358bf55e57b0
-a3afb6baec5724d61d3d8222873961e945e237dd refs/tags/v0.6.5-2
-^70db149494db983f24cb23e5eda03fef0265fc1b
-cdfa23bfc57dfcb6c9d2c8c92893531c353b6962 refs/tags/v0.6.6
-^b8b1453392aa6a4a801b935621cb8405e6581f8a
-e562669d6f4a51a7eb5b4ac47fecf57193d99d4f refs/tags/v0.6.7
-^bd95fd770be8e6a969513a8eaddd05f3ae47c9a3
-90c13014956183841b94c31c10ac71fc8735267e refs/tags/v0.6.8
-^d1a6084bf71d0cfff02e35062a0bbd7b20f304b7
-795b14330ad4399ef292835eac452d258dcd7464 refs/tags/v0.7.10
-3983dd2428137211f84f299f9ce8690c22f50afd refs/tags/v0.7.10-broken
-59c34e5df51b8100ee6907614a288249f7a3f31e refs/tags/v0.7.11
-^771bfe9e78f9952002a71cccc8d41c8c544fdfcb
-bba7ccb07f08e0c6ad404abfb363deaec1db5fab refs/tags/v0.8.4
-a60088df7dfcd5f5f0b229c848be1e400f24f3ec refs/tags/v0.8.4-1
-^5912f0a849f64f8a4d7b681df8d101f3f4080e17
-6fb79cb60e541825b4ef1ff71ce08ca42a7240b8 refs/tags/v0.8.5
-^8cc6647ebfd3e76a7d75e1d6961a8451fa5d702a
-7d80cec66dc0e146e72e522943c62e65d93db52a refs/tags/v0.8.5-2
-^0fd6a22a867ab89cd23e9692e6f3544ce3383dca
-c8fc4cebe63073fd77d5f553a4f0cec36a4ccb4b refs/tags/v0.9.17
-e289b0a1c12868267dac89287a0e36b7f89b67f6 refs/tags/v0.9.18
-c83ad3cc1c2571dc4f920e2c8c3a9a6d6ada87cd refs/tags/v0.9.20
-^8e24378cc1acb074b56de75bf0baf6feb7927677
-cbc7ba47a81c7db3bad7c573785a2caa6ab95b66 refs/tags/v0.9.21
-^1564f1a020b9edc78bc672f8f2df64b3d0dc55c3
-4d65b54aab3c0ad2d21b1bfaf903f625cebe30f3 refs/tags/v0.9.21.1
-^ad7b0efbd3fc00e089159768b7475e657adf84fe
-fab07600955c70fcee8e66377e775d30b1894a8d refs/tags/v0.9.22
-^915fc0e581c042a8d4896880d45e680003809254
-5e6836850e11527c238172c99c5de1a6c4acba52 refs/tags/v0.9.23
-^2c1c78a6d9e59de1d4cdeb32737d281814d690f7
-2f2dd80e480d90fa3bd2f5b2f2413a0eb51f3fa9 refs/tags/v0.9.24
-396a57b1b7a6e5f27ba264f32113af31baee340a refs/tags/v0.9.25
-^70867904a0255bd044851585a9ad2dc34391ced2
-d6407a27344667831859809a10a5dfa0298039bb refs/tags/v0.9.26
-^0e703d92ac9df61e2ededa8c895c70ded101a607
-5ba3101e4c04a449c302018239ae021f711d01b0 refs/tags/v0.9.28
-^bac9a94ddf20dc530966cbf6cd384aaf94aedc77
-a12e9a329265bfea64bef0503c26d7f9f5bde1ef refs/tags/v0.9.30
-^5daf8729be88eca87b302ebf7a46fc69cad0f6d0
-3a286c0203cf540d353c4abbbc128188812bc096 refs/tags/v0.9.32
-^72e2613a9fe3205fa5a67b72b832e03b2357ee88
-dd82e5c1d1e863c92577e94174de963cea607632 refs/tags/v0.9.34
-^7625b07dd9a2a7b5c5a504c1276eea04596ac871
-4eec96d5267eb05716832e90e27a7468e254a47c refs/tags/v0.9.34-1
-^a2ce7b99501b3273b4cee65cd6784c7d1c4645f7
-4613999d8a18d78f47978c1f8da75458276b857b refs/tags/v0.9.36
-^423c2f499c2350ae54d02a3151686ebd39fc8c94
-007c2df55aba4c7524e2d2253c679f6a27257e53 refs/tags/v0.9.38
-^98f4c936f25de27dbc90f36f2c1ffd1f23b114e9
-57b05579ddc9c7112a33dbb5e49f73cc5d963621 refs/tags/v0.9.39
-^5001f778aac5cf77a200da7829f8d28547208fed
-0cdc7647aaabb796d241ea257b2df2f0c26701d4 refs/tags/v1.0.0
-82ef26f6007986debd6ce082f57050f0c7e36006 refs/tags/v1.0.1
-7fbf990cc9b63f6e0021abb3c856ca76b8eecdd6 refs/tags/v1.0.1.1
-f0c7af047793a6bff4d5f22ae2c231d04d280990 refs/tags/v1.0.1.2
-a0303ff4bdc17fba10baea4ce9ff250e5923efa2 refs/tags/v1.0.2
-18a10e5d1801268838b437cfc6e60e99c7bba442 refs/tags/v1.0.3
-^5c11d1033d10cff42e2264e6a0044de1ecd0b281
-5c88c6ddf79bede6d78d0a1f9946a85c6bfe624c refs/tags/v1.0.4
-72d60dfa53b3e2b30407ecd386747986874afc10 refs/tags/v1.0.5
-^590ec4a4c754c837631f0e9b3f4d98e9c60f46b5
-76699dc0c416a7b32e883b2b86b46575119ffb96 refs/tags/v1.1.0
-^fd512fa12c59657d9e47cc3411e6e24bd1af89cb
-79282bcc6372c613e8aa2efecef67498dfdf6dc6 refs/tags/v1.1.1
-^8f09242d7f527972acb1a8b2a61c9f55000e955d
-587669215b878566c4a7b91fbf88a6fd2ec4f46a refs/tags/v1.1.2
-0e5901b185a0a9e31e4c443f0455a739277a3a7b refs/tags/v1.1.3
-^59d25c0c2c9e56cc0f51ff4949bf77a55064fb6d
-56dec25ae26bf749b93c3ea69538fabea60c5768 refs/tags/v1.10.0
-c2d2f4ed8f232bb11663a1b01a2e578aa22f24bd refs/tags/v1.10.1
-bb74230f2a93057b92bf58aab09c9438ce435f95 refs/tags/v1.10.10
-7231b3efb8095d3dd18d7164c3fa84d7705759d3 refs/tags/v1.10.11
-6c4dc6c38827296dec5a49a6ea25fd7f0eb4ac77 refs/tags/v1.10.12
-7a0c19f813e285516f4b525305fd73b625d2dec8 refs/tags/v1.10.13
-11a3a35097ec493d71137c9bfa433bceeedff6c0 refs/tags/v1.10.14
-8be800ffa9c4992666e2620e0ab4725a1a83352b refs/tags/v1.10.15
-20356e57b119b4e70ce47665a71964434e15200d refs/tags/v1.10.16
-25c9b49fdb74931137431c24cf28d3c65f9420d2 refs/tags/v1.10.17
-de23cf910b814867d5c5d1ad6164835d79069638 refs/tags/v1.10.18
-23bee16208718975f9b9e012949b8d4ee1223108 refs/tags/v1.10.19
-97d11b0187b4695ccf44e3b71b54155fe405a36f refs/tags/v1.10.2
-8f2416a89a3def6ec2c749d5afafbf2c9a18e3c8 refs/tags/v1.10.20
-671094279e8d27f4b4c3c94bf8b636c26b473976 refs/tags/v1.10.21
-2de49b04e56cf07f011d6d91f9d5c08847aabe8e refs/tags/v1.10.22
-d901d85377c2c2f05f09f423c7d739c0feecd90a refs/tags/v1.10.23
-972007a517c49ee9e2a359950d81c74467492ed2 refs/tags/v1.10.24
-69568c554880b3567bace64f8848ff1be27d084d refs/tags/v1.10.25
-e5eb32acee19cc9fca6a03b10283b7484246b15a refs/tags/v1.10.26
-991384a7f6719e1125ca0be7fb27d0c4d1c5d2d3 refs/tags/v1.10.3
-aa637fd38a379db6da98df0d520fb1c5139a18ce refs/tags/v1.10.4
-33ca98ece985f5085ac8ec19a49239d726850004 refs/tags/v1.10.5
-576681f29b895dd39e559b7ba17fcd89b42e4833 refs/tags/v1.10.6
-12f0ff40b1bfb484cafc3be6e0040262e96743bd refs/tags/v1.10.7
-26675454bf93bf904be7a43cce6b3f550115ff90 refs/tags/v1.10.8
-eae3b1946a276ac099e0018fc792d9e8c3bfda6d refs/tags/v1.10.9
-18b641b0643fc56d1fe5b90d3c7a5ecbf981add4 refs/tags/v1.11.0
-769610667db1e2540c548344fc5fd090416445a4 refs/tags/v1.11.1
-73b01f40ceb6bcb6f9f44c2a3d6f963b40452b47 refs/tags/v1.11.2
-5ed08c4735c9d034fface08e4c400f1bd1ba8318 refs/tags/v1.11.3
-7e3b149be054053fd1177deaba3caf60d5f5d30b refs/tags/v1.11.4
-a38f4108571d1a144dc3cf3faf8990430d109bc4 refs/tags/v1.11.5
-ea9e62ca3db5c33aa7438ebf39c189afd53c6bf8 refs/tags/v1.11.6
-e501b3b05db8e169f67dc78b7b59bc352b3c638d refs/tags/v1.12.0
-465e810c66ccee49410ea34d08102a82ce7b48a5 refs/tags/v1.2.2
-6962eda19dc0269146c4b729275f9a2561bd11d9 refs/tags/v1.2.3
-f75becc264f8bde0f58391fc226243d03e78aa7b refs/tags/v1.3.1
-5490437942967638bcc6198035315f6811febaa8 refs/tags/v1.3.2
-c541b38fb36587d23c60f5e2f2b9b3c8700ec489 refs/tags/v1.3.3
-4044a8cea44cd4cee3a8ddaf51a76b71c9d22042 refs/tags/v1.3.4
-34b622a24853e1cf550238e8c8be6dfa4178cd35 refs/tags/v1.3.5
-bf324bd24be9036046e36c6248b2d7c31cce9eca refs/tags/v1.3.6
-8241fa522772837f0d05511f20caa6da1d5a3209 refs/tags/v1.4.0
-4b9de756236b58fab1df2e467fd4f6d85ea9aebb refs/tags/v1.4.1
-5f55d95aea433ef97c48ae927835d833772350de refs/tags/v1.4.10
-fed692f67e81bd3937a5efab38f56a9b99d04d41 refs/tags/v1.4.11
-421df866cd4468d62b09295199b7228d0ae2b714 refs/tags/v1.4.12
-8f0db697623bf0b77a5e6e6977d96d493bf70168 refs/tags/v1.4.13
-f88bca7ba96a16e10b9feee453dbdb4f81962f34 refs/tags/v1.4.14
-cb7d7d3d5df28d39e7ce49b1a7577c8bba4ea5fc refs/tags/v1.4.15
-4fced0972d9bf2802cb9c3eb16cedc79c9dd60a1 refs/tags/v1.4.16
-5a6008e004a6611d7a478495d083eaf26e52c5f1 refs/tags/v1.4.17
-c72f5459ac110de47fa068bfa560164078508b1e refs/tags/v1.4.18
-81d9d7d38555a63602b9da3d07955ad4e5a62f02 refs/tags/v1.4.19
-290e851f57f5d27a1d5f0f7ad784c836e017c337 refs/tags/v1.4.2
-f213a9d8e864b288e5974e947ed138b828ad0dfa refs/tags/v1.4.3
-94ad694a26ca3f7776ec8240802596755e5d5c0a refs/tags/v1.4.4
-a269a713d6486627bfe2a9f130502554879a4308 refs/tags/v1.4.5
-0f036f62092e306f5971478780b7bcf88ea5a887 refs/tags/v1.4.6
-667a386d87de64587061c2462773977e8a9dc98a refs/tags/v1.4.7
-98be7cd8337fb9633af29510fc4e1e494bb839f2 refs/tags/v1.4.8
-b7e3dfc5a2bc7e2f4d653fbe0ec9774277a10643 refs/tags/v1.4.9
-c3c58eb601d92d7ca581c597dd2b4960a1e59d96 refs/tags/v1.5.0
-810389c07a4ae5f468f33a7bf488a2681e994c90 refs/tags/v1.5.1
-c8695209f609375ceb06e8f4151dc9093f38cac5 refs/tags/v1.5.2
-978737f5d51ee4e60c00afb0c4ac8784b2faa059 refs/tags/v1.5.3
-b70acf3c5bd335d8dedc2a5aa6eff05c4c32105e refs/tags/v1.5.4
-ff07d54843ea7ed9997c420d216b4c007f9c80c3 refs/tags/v1.5.5
-2a609af51873204c940a9b2a7215e6b5a97b0656 refs/tags/v1.5.6
-da2a22c384a9b621ec853fe4b1aa651d606cf42b refs/tags/v1.5.7
-f58fb32283fe04cd1d416040c6692b4a7352d556 refs/tags/v1.5.8
-a07539fb88db7231d18db918ed7a6a4e32f97450 refs/tags/v1.5.9
-facc47cb5cec97b22c815a0a6118816a98f39876 refs/tags/v1.6.0
-021c3c281629baf2eae967dc2f0a7532ddfdc1fb refs/tags/v1.6.1
-65979770e6265659d1e3e4bdd329bf0dce627d15 refs/tags/v1.6.2
-99cba96f26bd725f80bf7a3ecde5a64727991dfa refs/tags/v1.6.3
-9c2882b2e5769de583e80062c6160872708218f3 refs/tags/v1.6.4
-cf87713dd42162861b7ed227f79f0638a33571df refs/tags/v1.6.5
-10a45cb59bd9bc9f717817afc029a57b222e558d refs/tags/v1.6.6
-ab5646c532292b51e319f290afccf6a44f874372 refs/tags/v1.6.7
-6c6c7b2af3efdad4d2f64f70f3a724af434bbcd2 refs/tags/v1.7.0
-05101641455a754936acc5ddff92f35f5e33181c refs/tags/v1.7.1
-1db4ecdc0b9e828ff65777fb466fc7c1d04e0de9 refs/tags/v1.7.2
-4bb3c89d44e372e6a9ab85a8be0c9345265c763a refs/tags/v1.7.3
-5f54075760748ae7f249bf735565924ea885c477 refs/tags/v1.8.0
-1e67410e88d2685bc54611a7c9f75c327b553ccc refs/tags/v1.8.1
-eae63c511ceafab14b92e274c1b18bf1700e2d3d refs/tags/v1.8.10
-dea1ce052a10cd7d401a5c04f83f371a06fe293c refs/tags/v1.8.11
-37685930d953bcbe023f9bc65b135a8d8b8f1488 refs/tags/v1.8.12
-225171a4bfcc16bd12a1906b1e0d43d0b18c353b refs/tags/v1.8.13
-316fc7ecfc10d06603f1358c1f4c1020ec36dd2a refs/tags/v1.8.14
-89451f7c382ad2185987ee369f16416f89c28a7d refs/tags/v1.8.15
-477eb0933b9529f7deeccc233cc815fe34a8ea56 refs/tags/v1.8.16
-8bbe72075e4e16442c4e28d999edee12e294329e refs/tags/v1.8.17
-58632d44021bf095b43a1bb2443e6e3690a94739 refs/tags/v1.8.18
-dae82f098570e15d44584f0d7f350713f4774727 refs/tags/v1.8.19
-b8b9f7f4476a30a0aaf6077daade6ae77f969960 refs/tags/v1.8.2
-24d727b6d6e2c0cde222fa12155c4a6db5caaf2e refs/tags/v1.8.20
-9dc5d1a915ac0e0bd8429d6ac41df50eec91de5f refs/tags/v1.8.21
-7fa3509e2eaf1a4ebc12344590e5699406690f15 refs/tags/v1.8.22
-c942700427557e3ff6de3aaf6b916e2f056c1ec2 refs/tags/v1.8.23
-4e13a09c5033b4cf073db6aeaaa7d159dcf07f30 refs/tags/v1.8.24
-14ae1246b789dd2a0a2bd22f0c7d3256daa26759 refs/tags/v1.8.25
-cdae1c59abc32f85debfa29577fbf1ed036ebf73 refs/tags/v1.8.26
-4bcc0a37ab70cb79b16893556cffdaad6974e7d8 refs/tags/v1.8.27
-329ac18ef617d0238f71637bffe78f028b0f13f7 refs/tags/v1.8.3
-2423ae01e0d2f853512eb2b46954b5ad0754a897 refs/tags/v1.8.4
-cbdaa0ca2a955012274bd2c47bd52b24b2beb66c refs/tags/v1.8.5
-12683feca7483f0b0bf425c3c520e2724f69f2aa refs/tags/v1.8.6
-66432f3821badf24d526f2d9205f36c0543219de refs/tags/v1.8.7
-2688dab48c9b8ae71b8d95c7678817eaa17f2b53 refs/tags/v1.8.8
-ff9b14617e73c07dfa028bc477fe86c1e04d80c5 refs/tags/v1.8.9
-52f2461774bcb8cdd310f86b4bc501df5b783852 refs/tags/v1.9.0
-b7b2f60f866d92e75db5bfe5be51b48eadeb3150 refs/tags/v1.9.1
-58cf5686eab9019cc01e202e846a6bbc70a3301d refs/tags/v1.9.10
-6a62fe399b68ab9e3625ef5e7900394f389adc3a refs/tags/v1.9.11
-b6f1c8dcc058a936955eb8e5766e2962218924bc refs/tags/v1.9.12
-cbc4ac264e9671898bff6ec7e434da3eca4bd273 refs/tags/v1.9.13
-6d74d1e5f762e06a6a739a42261886510f842778 refs/tags/v1.9.14
-0f77f34bb67b640bd8af22b215f3d279a1e21170 refs/tags/v1.9.15
-ea3b00ad75aebaf1790fe0f8afc9fb7852c87716 refs/tags/v1.9.16
-748f22c192d24082723f935afd0b0b63e7fd50f4 refs/tags/v1.9.17
-f5382591874220287de253bfc08b10afd5244927 refs/tags/v1.9.18
-3e0641923d78bf1905e596a3a41a54277540bec7 refs/tags/v1.9.19
-e76047e9f5499b58064bddde514dd3119a090adf refs/tags/v1.9.2
-979fc96899c77876e15807005eadd936da17b6c2 refs/tags/v1.9.20
-0287d54847d3297f3ced62cd83a4c95ccbe0045b refs/tags/v1.9.21
-c71a7e26a8b1e332bbf3262d88ba3ff32071456c refs/tags/v1.9.22
-8c2f271528f9cccf541c6ea1c022e98407f26872 refs/tags/v1.9.23
-cc05b050df5f88e80bb26aaf6d2f339c49c2d702 refs/tags/v1.9.24
-e7872729012a4871397307b12cc3f4772ffcbec6 refs/tags/v1.9.25
-cfbb969da803d4cc92e1a64fc1b3c06db299b564 refs/tags/v1.9.3
-46891c12ab54c9e179f26378ce618fd48460190c refs/tags/v1.9.4
-a1c09b93871dd3770adffb177086abda1b2ff3af refs/tags/v1.9.5
-bd05968077f27f7eb083404dd8448157996a8788 refs/tags/v1.9.6
-a718daa674a2e23cb0c8a6789f7e5467e705bbbd refs/tags/v1.9.7
-d62e9b285777c036c108b89fac0c78f7855ba314 refs/tags/v1.9.8
-017449971e1e9e220efcd97d3313a0e27f47003b refs/tags/v1.9.9
+af263bfb8801d7b9553fb27c1386b7a026b41d24 refs/remotes/origin/sheenhx-GPT4
+9d5d194579254eec0e58b277ce19a4a27c74e408 refs/remotes/origin/sheenhx-patch-3.5
+6714fcb0f7e1de28ea6f323bd106850f101d4cbb refs/remotes/origin/website
diff --git a/mxc-geth/.git/refs/heads/mxc-wannsee-alpha3 b/mxc-geth/.git/refs/heads/mxc-wannsee-alpha3
new file mode 100644
index 0000000..f6772ef
--- /dev/null
+++ b/mxc-geth/.git/refs/heads/mxc-wannsee-alpha3
@@ -0,0 +1 @@
+7212990145fec5d143a40606bb80e435adee35f7
diff --git a/go-ethereum/.git/refs/remotes/origin/HEAD b/mxc-geth/.git/refs/remotes/origin/HEAD
index 6efe28f..6d42f32 100644
--- a/go-ethereum/.git/refs/remotes/origin/HEAD
+++ b/mxc-geth/.git/refs/remotes/origin/HEAD
@@ -1 +1 @@
-ref: refs/remotes/origin/master
+ref: refs/remotes/origin/mxc-wannsee-alpha3
diff --git a/mxc-geth/.github/workflows/ci.yml b/mxc-geth/.github/workflows/ci.yml
new file mode 100644
index 0000000..f9476b1
--- /dev/null
+++ b/mxc-geth/.github/workflows/ci.yml
@@ -0,0 +1,34 @@
+name: "Unit tests"
+
+on:
+  pull_request:
+    branches: [mxc]
+  push:
+    branches: [mxc]
+
+jobs:
+  test:
+    runs-on: ubuntu-latest
+    steps:
+      - name: Cancel Previous Runs
+        uses: styfle/cancel-workflow-action@0.11.0
+        with:
+          access_token: ${{ github.token }}
+
+      - uses: actions/checkout@v3
+        with:
+          repository: MXCzkEVM/mxc-geth
+
+      - name: Set up Go
+        uses: actions/setup-go@v3
+        with:
+          go-version: 1.19
+
+      - name: Lint
+        run: make lint
+
+      - name: Test
+        env:
+          ANDROID_HOME: ""
+          MXC_TEST: true
+        run: make test
diff --git a/mxc-geth/.github/workflows/docker.yml b/mxc-geth/.github/workflows/docker.yml
new file mode 100644
index 0000000..f30dbd2
--- /dev/null
+++ b/mxc-geth/.github/workflows/docker.yml
@@ -0,0 +1,47 @@
+name: "Push docker image to GCR"
+
+on:
+  push:
+    branches: [mxc-wannsee-alpha3]
+    tags:
+      - "v*"
+
+jobs:
+  push-docker-image:
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v2
+
+      - name: Login to GCR
+        uses: docker/login-action@v2
+        with:
+          registry: gcr.io
+          username: _json_key
+          password: ${{ secrets.GCR_JSON_KEY }}
+
+      - name: Set up QEMU
+        uses: docker/setup-qemu-action@v1
+
+      - name: Set up Docker Buildx
+        uses: docker/setup-buildx-action@v1
+
+      - name: Docker meta
+        id: meta
+        uses: docker/metadata-action@v4
+        with:
+          images: |
+            gcr.io/mxczkevm/mxc-geth
+          tags: |
+            type=ref,event=branch
+            type=ref,event=pr
+            type=ref,event=tag
+            type=sha
+      - name: Build and push
+        uses: docker/build-push-action@v2
+        with:
+          platforms: linux/amd64,linux/arm64
+          push: true
+          tags: ${{ steps.meta.outputs.tags }}
+          labels: ${{ steps.meta.outputs.labels }}
diff --git a/mxc-geth/.github/workflows/lint-pr.yml b/mxc-geth/.github/workflows/lint-pr.yml
new file mode 100644
index 0000000..ce00cc6
--- /dev/null
+++ b/mxc-geth/.github/workflows/lint-pr.yml
@@ -0,0 +1,14 @@
+name: "Lint PR"
+
+on:
+  pull_request:
+    types: [opened, edited, synchronize, reopened]
+
+jobs:
+  main:
+    name: Validate PR title
+    runs-on: ubuntu-latest
+    steps:
+      - uses: amannn/action-semantic-pull-request@v5
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/mxc-geth/.github/workflows/test-action.yml b/mxc-geth/.github/workflows/test-action.yml
new file mode 100644
index 0000000..7756405
--- /dev/null
+++ b/mxc-geth/.github/workflows/test-action.yml
@@ -0,0 +1,24 @@
+name: GPTReviewWorkflow
+
+on:
+  pull_request:
+    types:
+      - opened
+      - synchronize
+
+jobs:
+  review_with_gpt:
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: GPTReviewWorkflow
+        uses: sheenhx/GPT4ReviewWorkflow@chunk
+        with:
+          GIT_COMMIT_HASH: ${{ github.event.pull_request.head.sha }}
+          GIT_PATCH_OUTPUT: ${{ github.event.pull_request.patch_url }}
+          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
+          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
+          OPENAI_ORG_KEY: ${{ secrets.OPENAI_ORG_KEY }}
+          PR_NUMBER: ${{ github.event.pull_request.number }}
+          PR_TITLE: ${{ github.event.pull_request.title }}
+          REPOSITORY_NAME: ${{ github.repository }}
\ No newline at end of file
diff --git a/go-ethereum/Dockerfile b/mxc-geth/Dockerfile
index 1951fed..2b09002 100644
--- a/go-ethereum/Dockerfile
+++ b/mxc-geth/Dockerfile
@@ -22,6 +22,9 @@ FROM alpine:latest
 RUN apk add --no-cache ca-certificates
 COPY --from=builder /go-ethereum/build/bin/geth /usr/local/bin/
 
+# CHANGE(MXC): copy L2 genesis JSONs into the final image.
+COPY --from=builder /go-ethereum/core/mxc_genesis/*.json /deployments/
+
 EXPOSE 8545 8546 30303 30303/udp
 ENTRYPOINT ["geth"]
 
diff --git a/go-ethereum/README.md b/mxc-geth/README.md
index 34bd8b9..1ce5468 100644
--- a/go-ethereum/README.md
+++ b/mxc-geth/README.md
@@ -1,3 +1,13 @@
+# mxc-geth
+
+[![CI](https://github.com/MXCzkEVM/mxc-geth/actions/workflows/ci.yml/badge.svg)](https://github.com/MXCzkEVM/mxc-geth/actions/workflows/ci.yml)
+
+The codebase is based on [go-ethereum v1.11.5](https://github.com/ethereum/go-ethereum/releases/tag/v1.11.5).
+
+## Tracing changes
+
+All source code changes by [mxc](https://mxc.com) team are commented with `"CHANGE(MXC): ...."`, and the filenames of all additional files have the prefix `"mxc_"` (`mxc_*.go`).
+
 ## Go Ethereum
 
 Official Golang execution layer implementation of the Ethereum protocol.
@@ -83,7 +93,7 @@ This command will:
    causing it to download more data in exchange for avoiding processing the entire history
    of the Ethereum network, which is very CPU intensive.
  * Start the built-in interactive [JavaScript console](https://geth.ethereum.org/docs/interacting-with-geth/javascript-console),
-   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md) 
+   (via the trailing `console` subcommand) through which you can interact using [`web3` methods](https://github.com/ChainSafe/web3.js/blob/0.20.7/DOCUMENTATION.md)
    (note: the `web3` version bundled within `geth` is very old, and not up to date with official docs),
    as well as `geth`'s own [management APIs](https://geth.ethereum.org/docs/interacting-with-geth/rpc).
    This tool is optional and if you leave it out you can always attach it to an already running
@@ -353,7 +363,7 @@ testing procedures.
 ### Contributing to geth.ethereum.org
 
 For contributions to the [go-ethereum website](https://geth.ethereum.org), please checkout and raise pull requests against the `website` branch.
-For more detailed instructions please see the `website` branch [README](https://github.com/ethereum/go-ethereum/tree/website#readme) or the 
+For more detailed instructions please see the `website` branch [README](https://github.com/ethereum/go-ethereum/tree/website#readme) or the
 [contributing](https://geth.ethereum.org/docs/developers/geth-developer/contributing) page of the website.
 
 ## License
diff --git a/mxc-geth/beacon/engine/gen_blockmetadata.go b/mxc-geth/beacon/engine/gen_blockmetadata.go
new file mode 100644
index 0000000..e63d43c
--- /dev/null
+++ b/mxc-geth/beacon/engine/gen_blockmetadata.go
@@ -0,0 +1,82 @@
+// Code generated by github.com/fjl/gencodec. DO NOT EDIT.
+
+package engine
+
+import (
+	"encoding/json"
+	"errors"
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/common/hexutil"
+)
+
+var _ = (*blockMetadataMarshaling)(nil)
+
+// MarshalJSON marshals as JSON.
+func (b BlockMetadata) MarshalJSON() ([]byte, error) {
+	type BlockMetadata struct {
+		Beneficiary    common.Address `json:"beneficiary"     gencodec:"required"`
+		GasLimit       uint64         `json:"gasLimit"     gencodec:"required"`
+		Timestamp      hexutil.Uint64 `json:"timestamp"     gencodec:"required"`
+		MixHash        common.Hash    `json:"mixHash"     gencodec:"required"`
+		ExtraData      hexutil.Bytes  `json:"extraData"     gencodec:"required"`
+		TxList         hexutil.Bytes  `json:"txList"     gencodec:"required"`
+		HighestBlockID *big.Int       `json:"highestBlockID"     gencodec:"required"`
+	}
+	var enc BlockMetadata
+	enc.Beneficiary = b.Beneficiary
+	enc.GasLimit = b.GasLimit
+	enc.Timestamp = hexutil.Uint64(b.Timestamp)
+	enc.MixHash = b.MixHash
+	enc.ExtraData = b.ExtraData
+	enc.TxList = b.TxList
+	enc.HighestBlockID = b.HighestBlockID
+	return json.Marshal(&enc)
+}
+
+// UnmarshalJSON unmarshals from JSON.
+func (b *BlockMetadata) UnmarshalJSON(input []byte) error {
+	type BlockMetadata struct {
+		Beneficiary    *common.Address `json:"beneficiary"     gencodec:"required"`
+		GasLimit       *uint64         `json:"gasLimit"     gencodec:"required"`
+		Timestamp      *hexutil.Uint64 `json:"timestamp"     gencodec:"required"`
+		MixHash        *common.Hash    `json:"mixHash"     gencodec:"required"`
+		ExtraData      *hexutil.Bytes  `json:"extraData"     gencodec:"required"`
+		TxList         *hexutil.Bytes  `json:"txList"     gencodec:"required"`
+		HighestBlockID *big.Int        `json:"highestBlockID"     gencodec:"required"`
+	}
+	var dec BlockMetadata
+	if err := json.Unmarshal(input, &dec); err != nil {
+		return err
+	}
+	if dec.Beneficiary == nil {
+		return errors.New("missing required field 'beneficiary' for BlockMetadata")
+	}
+	b.Beneficiary = *dec.Beneficiary
+	if dec.GasLimit == nil {
+		return errors.New("missing required field 'gasLimit' for BlockMetadata")
+	}
+	b.GasLimit = *dec.GasLimit
+	if dec.Timestamp == nil {
+		return errors.New("missing required field 'timestamp' for BlockMetadata")
+	}
+	b.Timestamp = uint64(*dec.Timestamp)
+	if dec.MixHash == nil {
+		return errors.New("missing required field 'mixHash' for BlockMetadata")
+	}
+	b.MixHash = *dec.MixHash
+	if dec.ExtraData == nil {
+		return errors.New("missing required field 'extraData' for BlockMetadata")
+	}
+	b.ExtraData = *dec.ExtraData
+	if dec.TxList == nil {
+		return errors.New("missing required field 'txList' for BlockMetadata")
+	}
+	b.TxList = *dec.TxList
+	if dec.HighestBlockID == nil {
+		return errors.New("missing required field 'highestBlockID' for BlockMetadata")
+	}
+	b.HighestBlockID = dec.HighestBlockID
+	return nil
+}
diff --git a/go-ethereum/beacon/engine/gen_blockparams.go b/mxc-geth/beacon/engine/gen_blockparams.go
index 0dd2b52..1e339ba 100644
--- a/go-ethereum/beacon/engine/gen_blockparams.go
+++ b/mxc-geth/beacon/engine/gen_blockparams.go
@@ -5,9 +5,11 @@ package engine
 import (
 	"encoding/json"
 	"errors"
+	"math/big"
 
 	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/common/hexutil"
+	"github.com/ethereum/go-ethereum/core/rawdb"
 	"github.com/ethereum/go-ethereum/core/types"
 )
 
@@ -20,12 +22,18 @@ func (p PayloadAttributes) MarshalJSON() ([]byte, error) {
 		Random                common.Hash         `json:"prevRandao"            gencodec:"required"`
 		SuggestedFeeRecipient common.Address      `json:"suggestedFeeRecipient" gencodec:"required"`
 		Withdrawals           []*types.Withdrawal `json:"withdrawals"`
+		BaseFeePerGas         *big.Int            `json:"baseFeePerGas" gencodec:"required"`
+		BlockMetadata         *BlockMetadata      `json:"blockMetadata" gencodec:"required"`
+		L1Origin              *rawdb.L1Origin     `json:"l1Origin" gencodec:"required"`
 	}
 	var enc PayloadAttributes
 	enc.Timestamp = hexutil.Uint64(p.Timestamp)
 	enc.Random = p.Random
 	enc.SuggestedFeeRecipient = p.SuggestedFeeRecipient
 	enc.Withdrawals = p.Withdrawals
+	enc.BaseFeePerGas = p.BaseFeePerGas
+	enc.BlockMetadata = p.BlockMetadata
+	enc.L1Origin = p.L1Origin
 	return json.Marshal(&enc)
 }
 
@@ -36,6 +44,9 @@ func (p *PayloadAttributes) UnmarshalJSON(input []byte) error {
 		Random                *common.Hash        `json:"prevRandao"            gencodec:"required"`
 		SuggestedFeeRecipient *common.Address     `json:"suggestedFeeRecipient" gencodec:"required"`
 		Withdrawals           []*types.Withdrawal `json:"withdrawals"`
+		BaseFeePerGas         *big.Int            `json:"baseFeePerGas" gencodec:"required"`
+		BlockMetadata         *BlockMetadata      `json:"blockMetadata" gencodec:"required"`
+		L1Origin              *rawdb.L1Origin     `json:"l1Origin" gencodec:"required"`
 	}
 	var dec PayloadAttributes
 	if err := json.Unmarshal(input, &dec); err != nil {
@@ -56,5 +67,17 @@ func (p *PayloadAttributes) UnmarshalJSON(input []byte) error {
 	if dec.Withdrawals != nil {
 		p.Withdrawals = dec.Withdrawals
 	}
+	if dec.BaseFeePerGas == nil {
+		return errors.New("missing required field 'baseFeePerGas' for PayloadAttributes")
+	}
+	p.BaseFeePerGas = dec.BaseFeePerGas
+	if dec.BlockMetadata == nil {
+		return errors.New("missing required field 'blockMetadata' for PayloadAttributes")
+	}
+	p.BlockMetadata = dec.BlockMetadata
+	if dec.L1Origin == nil {
+		return errors.New("missing required field 'l1Origin' for PayloadAttributes")
+	}
+	p.L1Origin = dec.L1Origin
 	return nil
 }
diff --git a/go-ethereum/beacon/engine/gen_ed.go b/mxc-geth/beacon/engine/gen_ed.go
index 336dfc6..a754336 100644
--- a/go-ethereum/beacon/engine/gen_ed.go
+++ b/mxc-geth/beacon/engine/gen_ed.go
@@ -17,21 +17,24 @@ var _ = (*executableDataMarshaling)(nil)
 // MarshalJSON marshals as JSON.
 func (e ExecutableData) MarshalJSON() ([]byte, error) {
 	type ExecutableData struct {
-		ParentHash    common.Hash         `json:"parentHash"    gencodec:"required"`
-		FeeRecipient  common.Address      `json:"feeRecipient"  gencodec:"required"`
-		StateRoot     common.Hash         `json:"stateRoot"     gencodec:"required"`
-		ReceiptsRoot  common.Hash         `json:"receiptsRoot"  gencodec:"required"`
-		LogsBloom     hexutil.Bytes       `json:"logsBloom"     gencodec:"required"`
-		Random        common.Hash         `json:"prevRandao"    gencodec:"required"`
-		Number        hexutil.Uint64      `json:"blockNumber"   gencodec:"required"`
-		GasLimit      hexutil.Uint64      `json:"gasLimit"      gencodec:"required"`
-		GasUsed       hexutil.Uint64      `json:"gasUsed"       gencodec:"required"`
-		Timestamp     hexutil.Uint64      `json:"timestamp"     gencodec:"required"`
-		ExtraData     hexutil.Bytes       `json:"extraData"     gencodec:"required"`
-		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
-		BlockHash     common.Hash         `json:"blockHash"     gencodec:"required"`
-		Transactions  []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
-		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
+		ParentHash      common.Hash         `json:"parentHash"    gencodec:"required"`
+		FeeRecipient    common.Address      `json:"feeRecipient"  gencodec:"required"`
+		StateRoot       common.Hash         `json:"stateRoot"     gencodec:"required"`
+		ReceiptsRoot    common.Hash         `json:"receiptsRoot"  gencodec:"required"`
+		LogsBloom       hexutil.Bytes       `json:"logsBloom"     gencodec:"required"`
+		Random          common.Hash         `json:"prevRandao"    gencodec:"required"`
+		Number          hexutil.Uint64      `json:"blockNumber"   gencodec:"required"`
+		GasLimit        hexutil.Uint64      `json:"gasLimit"      gencodec:"required"`
+		GasUsed         hexutil.Uint64      `json:"gasUsed"       gencodec:"required"`
+		Timestamp       hexutil.Uint64      `json:"timestamp"     gencodec:"required"`
+		ExtraData       hexutil.Bytes       `json:"extraData"     gencodec:"required"`
+		BaseFeePerGas   *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
+		BlockHash       common.Hash         `json:"blockHash"     gencodec:"required"`
+		Transactions    []hexutil.Bytes     `json:"transactions"`
+		Withdrawals     []*types.Withdrawal `json:"withdrawals"`
+		TxHash          common.Hash         `json:"txHash"`
+		WithdrawalsHash common.Hash         `json:"withdrawalsHash"`
+		MxcBlock        bool
 	}
 	var enc ExecutableData
 	enc.ParentHash = e.ParentHash
@@ -54,27 +57,33 @@ func (e ExecutableData) MarshalJSON() ([]byte, error) {
 		}
 	}
 	enc.Withdrawals = e.Withdrawals
+	enc.TxHash = e.TxHash
+	enc.WithdrawalsHash = e.WithdrawalsHash
+	enc.MxcBlock = e.MxcBlock
 	return json.Marshal(&enc)
 }
 
 // UnmarshalJSON unmarshals from JSON.
 func (e *ExecutableData) UnmarshalJSON(input []byte) error {
 	type ExecutableData struct {
-		ParentHash    *common.Hash        `json:"parentHash"    gencodec:"required"`
-		FeeRecipient  *common.Address     `json:"feeRecipient"  gencodec:"required"`
-		StateRoot     *common.Hash        `json:"stateRoot"     gencodec:"required"`
-		ReceiptsRoot  *common.Hash        `json:"receiptsRoot"  gencodec:"required"`
-		LogsBloom     *hexutil.Bytes      `json:"logsBloom"     gencodec:"required"`
-		Random        *common.Hash        `json:"prevRandao"    gencodec:"required"`
-		Number        *hexutil.Uint64     `json:"blockNumber"   gencodec:"required"`
-		GasLimit      *hexutil.Uint64     `json:"gasLimit"      gencodec:"required"`
-		GasUsed       *hexutil.Uint64     `json:"gasUsed"       gencodec:"required"`
-		Timestamp     *hexutil.Uint64     `json:"timestamp"     gencodec:"required"`
-		ExtraData     *hexutil.Bytes      `json:"extraData"     gencodec:"required"`
-		BaseFeePerGas *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
-		BlockHash     *common.Hash        `json:"blockHash"     gencodec:"required"`
-		Transactions  []hexutil.Bytes     `json:"transactions"  gencodec:"required"`
-		Withdrawals   []*types.Withdrawal `json:"withdrawals"`
+		ParentHash      *common.Hash        `json:"parentHash"    gencodec:"required"`
+		FeeRecipient    *common.Address     `json:"feeRecipient"  gencodec:"required"`
+		StateRoot       *common.Hash        `json:"stateRoot"     gencodec:"required"`
+		ReceiptsRoot    *common.Hash        `json:"receiptsRoot"  gencodec:"required"`
+		LogsBloom       *hexutil.Bytes      `json:"logsBloom"     gencodec:"required"`
+		Random          *common.Hash        `json:"prevRandao"    gencodec:"required"`
+		Number          *hexutil.Uint64     `json:"blockNumber"   gencodec:"required"`
+		GasLimit        *hexutil.Uint64     `json:"gasLimit"      gencodec:"required"`
+		GasUsed         *hexutil.Uint64     `json:"gasUsed"       gencodec:"required"`
+		Timestamp       *hexutil.Uint64     `json:"timestamp"     gencodec:"required"`
+		ExtraData       *hexutil.Bytes      `json:"extraData"     gencodec:"required"`
+		BaseFeePerGas   *hexutil.Big        `json:"baseFeePerGas" gencodec:"required"`
+		BlockHash       *common.Hash        `json:"blockHash"     gencodec:"required"`
+		Transactions    []hexutil.Bytes     `json:"transactions"`
+		Withdrawals     []*types.Withdrawal `json:"withdrawals"`
+		TxHash          *common.Hash        `json:"txHash"`
+		WithdrawalsHash *common.Hash        `json:"withdrawalsHash"`
+		MxcBlock        *bool
 	}
 	var dec ExecutableData
 	if err := json.Unmarshal(input, &dec); err != nil {
@@ -132,15 +141,23 @@ func (e *ExecutableData) UnmarshalJSON(input []byte) error {
 		return errors.New("missing required field 'blockHash' for ExecutableData")
 	}
 	e.BlockHash = *dec.BlockHash
-	if dec.Transactions == nil {
-		return errors.New("missing required field 'transactions' for ExecutableData")
-	}
-	e.Transactions = make([][]byte, len(dec.Transactions))
-	for k, v := range dec.Transactions {
-		e.Transactions[k] = v
+	if dec.Transactions != nil {
+		e.Transactions = make([][]byte, len(dec.Transactions))
+		for k, v := range dec.Transactions {
+			e.Transactions[k] = v
+		}
 	}
 	if dec.Withdrawals != nil {
 		e.Withdrawals = dec.Withdrawals
 	}
+	if dec.TxHash != nil {
+		e.TxHash = *dec.TxHash
+	}
+	if dec.WithdrawalsHash != nil {
+		e.WithdrawalsHash = *dec.WithdrawalsHash
+	}
+	if dec.MxcBlock != nil {
+		e.MxcBlock = *dec.MxcBlock
+	}
 	return nil
 }
diff --git a/go-ethereum/beacon/engine/types.go b/mxc-geth/beacon/engine/types.go
index 07ebe54..adb8d8e 100644
--- a/go-ethereum/beacon/engine/types.go
+++ b/mxc-geth/beacon/engine/types.go
@@ -22,6 +22,7 @@ import (
 
 	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/common/hexutil"
+	"github.com/ethereum/go-ethereum/core/rawdb"
 	"github.com/ethereum/go-ethereum/core/types"
 	"github.com/ethereum/go-ethereum/trie"
 )
@@ -35,6 +36,10 @@ type PayloadAttributes struct {
 	Random                common.Hash         `json:"prevRandao"            gencodec:"required"`
 	SuggestedFeeRecipient common.Address      `json:"suggestedFeeRecipient" gencodec:"required"`
 	Withdrawals           []*types.Withdrawal `json:"withdrawals"`
+	// CHANGE(mxc): extra fields.
+	BaseFeePerGas *big.Int        `json:"baseFeePerGas" gencodec:"required"`
+	BlockMetadata *BlockMetadata  `json:"blockMetadata" gencodec:"required"`
+	L1Origin      *rawdb.L1Origin `json:"l1Origin" gencodec:"required"`
 }
 
 // JSON type overrides for PayloadAttributes.
@@ -42,25 +47,52 @@ type payloadAttributesMarshaling struct {
 	Timestamp hexutil.Uint64
 }
 
-//go:generate go run github.com/fjl/gencodec -type ExecutableData -field-override executableDataMarshaling -out gen_ed.go
+//go:generate go run github.com/fjl/gencodec -type BlockMetadata -field-override blockMetadataMarshaling -out gen_blockmetadata.go
+
+// CHANGE(mxc): BlockMetadata represents a `BlockMetadata` struct defined in
+// protocol's `LibData`.
+type BlockMetadata struct {
+	// Fields defined in `LibData.blockMetadata`.
+	Beneficiary common.Address `json:"beneficiary"     gencodec:"required"`
+	GasLimit    uint64         `json:"gasLimit"     gencodec:"required"`
+	Timestamp   uint64         `json:"timestamp"     gencodec:"required"`
+	MixHash     common.Hash    `json:"mixHash"     gencodec:"required"`
+	ExtraData   []byte         `json:"extraData"     gencodec:"required"`
+
+	// Extra fields required in go-mxc.
+	TxList         []byte   `json:"txList"     gencodec:"required"`
+	HighestBlockID *big.Int `json:"highestBlockID"     gencodec:"required"`
+}
+
+// CHANGE(mxc): JSON type overrides for BlockMetadata.
+type blockMetadataMarshaling struct {
+	Timestamp hexutil.Uint64
+	TxList    hexutil.Bytes
+	ExtraData hexutil.Bytes
+}
 
 // ExecutableData is the data necessary to execute an EL payload.
+//
+//go:generate go run github.com/fjl/gencodec -type ExecutableData -field-override executableDataMarshaling -out gen_ed.go
 type ExecutableData struct {
-	ParentHash    common.Hash         `json:"parentHash"    gencodec:"required"`
-	FeeRecipient  common.Address      `json:"feeRecipient"  gencodec:"required"`
-	StateRoot     common.Hash         `json:"stateRoot"     gencodec:"required"`
-	ReceiptsRoot  common.Hash         `json:"receiptsRoot"  gencodec:"required"`
-	LogsBloom     []byte              `json:"logsBloom"     gencodec:"required"`
-	Random        common.Hash         `json:"prevRandao"    gencodec:"required"`
-	Number        uint64              `json:"blockNumber"   gencodec:"required"`
-	GasLimit      uint64              `json:"gasLimit"      gencodec:"required"`
-	GasUsed       uint64              `json:"gasUsed"       gencodec:"required"`
-	Timestamp     uint64              `json:"timestamp"     gencodec:"required"`
-	ExtraData     []byte              `json:"extraData"     gencodec:"required"`
-	BaseFeePerGas *big.Int            `json:"baseFeePerGas" gencodec:"required"`
-	BlockHash     common.Hash         `json:"blockHash"     gencodec:"required"`
-	Transactions  [][]byte            `json:"transactions"  gencodec:"required"`
-	Withdrawals   []*types.Withdrawal `json:"withdrawals"`
+	ParentHash      common.Hash         `json:"parentHash"    gencodec:"required"`
+	FeeRecipient    common.Address      `json:"feeRecipient"  gencodec:"required"`
+	StateRoot       common.Hash         `json:"stateRoot"     gencodec:"required"`
+	ReceiptsRoot    common.Hash         `json:"receiptsRoot"  gencodec:"required"`
+	LogsBloom       []byte              `json:"logsBloom"     gencodec:"required"`
+	Random          common.Hash         `json:"prevRandao"    gencodec:"required"`
+	Number          uint64              `json:"blockNumber"   gencodec:"required"`
+	GasLimit        uint64              `json:"gasLimit"      gencodec:"required"`
+	GasUsed         uint64              `json:"gasUsed"       gencodec:"required"`
+	Timestamp       uint64              `json:"timestamp"     gencodec:"required"`
+	ExtraData       []byte              `json:"extraData"     gencodec:"required"`
+	BaseFeePerGas   *big.Int            `json:"baseFeePerGas" gencodec:"required"`
+	BlockHash       common.Hash         `json:"blockHash"     gencodec:"required"`
+	Transactions    [][]byte            `json:"transactions"`
+	Withdrawals     []*types.Withdrawal `json:"withdrawals"`
+	TxHash          common.Hash         `json:"txHash"`          // CHANGE(mxc): allow passing txHash directly instead of transactions list
+	WithdrawalsHash common.Hash         `json:"withdrawalsHash"` // CHANGE(mxc): allow passing WithdrawalsHash directly instead of withdrawals
+	MxcBlock        bool                // CHANGE(mxc): whether this is a Mxc L2 block, only used by ExecutableDataToBlock
 }
 
 // JSON type overrides for executableData.
@@ -179,9 +211,15 @@ func ExecutableDataToBlock(params ExecutableData) (*types.Block, error) {
 	// Withdrawals as the json null value.
 	var withdrawalsRoot *common.Hash
 	if params.Withdrawals != nil {
-		h := types.DeriveSha(types.Withdrawals(params.Withdrawals), trie.NewStackTrie(nil))
+		var h common.Hash
+		if params.MxcBlock {
+			h = types.CalcWithdrawalsRootMxc(params.Withdrawals)
+		} else {
+			h = types.DeriveSha(types.Withdrawals(params.Withdrawals), trie.NewStackTrie(nil))
+		}
 		withdrawalsRoot = &h
 	}
+
 	header := &types.Header{
 		ParentHash:      params.ParentHash,
 		UncleHash:       types.EmptyUncleHash,
diff --git a/go-ethereum/cmd/evm/internal/t8ntool/execution.go b/mxc-geth/cmd/evm/internal/t8ntool/execution.go
index 5f796c1..837437e 100644
--- a/go-ethereum/cmd/evm/internal/t8ntool/execution.go
+++ b/mxc-geth/cmd/evm/internal/t8ntool/execution.go
@@ -163,7 +163,7 @@ func (pre *Prestate) Apply(vmConfig vm.Config, chainConfig *params.ChainConfig,
 	}
 
 	for i, tx := range txs {
-		msg, err := core.TransactionToMessage(tx, signer, pre.Env.BaseFee)
+		msg, err := core.TransactionToMessage(tx, signer, pre.Env.BaseFee, i == 0)
 		if err != nil {
 			log.Warn("rejected tx", "index", i, "hash", tx.Hash(), "error", err)
 			rejectedTxs = append(rejectedTxs, &rejectedTx{i, err.Error()})
diff --git a/go-ethereum/cmd/geth/config.go b/mxc-geth/cmd/geth/config.go
index 0b856d1..281f905 100644
--- a/go-ethereum/cmd/geth/config.go
+++ b/mxc-geth/cmd/geth/config.go
@@ -164,6 +164,9 @@ func makeFullNode(ctx *cli.Context) (*node.Node, ethapi.Backend) {
 	}
 	backend, eth := utils.RegisterEthService(stack, &cfg.Eth)
 
+	// CHANGE(Mxc): register Mxc RPC APIs.
+	utils.RegisterMxcAPIs(stack, &cfg.Eth, eth)
+
 	// Configure log filter RPC API.
 	filterSystem := utils.RegisterFilterAPI(stack, backend, &cfg.Eth)
 
diff --git a/go-ethereum/cmd/geth/main.go b/mxc-geth/cmd/geth/main.go
index a970e76..682746b 100644
--- a/go-ethereum/cmd/geth/main.go
+++ b/mxc-geth/cmd/geth/main.go
@@ -250,6 +250,9 @@ func init() {
 		metricsFlags,
 	)
 
+	// CHANGE(MXC): append mxc flags into the original GETH flags
+	app.Flags = append(app.Flags, &utils.MxcFlag)
+
 	app.Before = func(ctx *cli.Context) error {
 		flags.MigrateGlobalFlags(ctx)
 		return debug.Setup(ctx)
diff --git a/go-ethereum/cmd/utils/flags.go b/mxc-geth/cmd/utils/flags.go
index 08de71e..e7b27db 100644
--- a/go-ethereum/cmd/utils/flags.go
+++ b/mxc-geth/cmd/utils/flags.go
@@ -1860,6 +1860,9 @@ func SetEthConfig(ctx *cli.Context, stack *node.Node, cfg *ethconfig.Config) {
 
 	// Override any default configs for hard coded networks.
 	switch {
+	// CHANGE(MXC): when --mxc flag is set, use the mxc genesis.
+	case ctx.IsSet(MxcFlag.Name):
+		cfg.Genesis = core.MxcGenesisBlock(cfg.NetworkId)
 	case ctx.Bool(MainnetFlag.Name):
 		if !ctx.IsSet(NetworkIdFlag.Name) {
 			cfg.NetworkId = 1
@@ -2234,7 +2237,7 @@ func MakeChain(ctx *cli.Context, stack *node.Node, readonly bool) (*core.BlockCh
 	if ctx.Bool(FakePoWFlag.Name) {
 		ethashConfig.PowMode = ethash.ModeFake
 	}
-	engine := ethconfig.CreateConsensusEngine(stack, &ethashConfig, cliqueConfig, nil, false, chainDb)
+	engine := ethconfig.CreateConsensusEngine(stack, &ethashConfig, cliqueConfig, nil, false, chainDb, ctx.Bool(MxcFlag.Name))
 	if gcmode := ctx.String(GCModeFlag.Name); gcmode != "full" && gcmode != "archive" {
 		Fatalf("--%s must be either 'full' or 'archive'", GCModeFlag.Name)
 	}
diff --git a/mxc-geth/cmd/utils/taiko_flags.go b/mxc-geth/cmd/utils/taiko_flags.go
new file mode 100644
index 0000000..74df269
--- /dev/null
+++ b/mxc-geth/cmd/utils/taiko_flags.go
@@ -0,0 +1,35 @@
+package utils
+
+import (
+	"os"
+
+	"github.com/ethereum/go-ethereum/eth"
+	"github.com/ethereum/go-ethereum/eth/ethconfig"
+	"github.com/ethereum/go-ethereum/node"
+	"github.com/ethereum/go-ethereum/params"
+	"github.com/ethereum/go-ethereum/rpc"
+	"github.com/urfave/cli/v2"
+)
+
+var (
+	MxcFlag = cli.BoolFlag{
+		Name:  "mxc",
+		Usage: "mxc network",
+	}
+)
+
+// RegisterMxcAPIs initializes and registers the mxc RPC APIs.
+func RegisterMxcAPIs(stack *node.Node, cfg *ethconfig.Config, backend *eth.Ethereum) {
+	if os.Getenv("MXC_TEST") != "" {
+		return
+	}
+	// Add methods under "mxc_" RPC namespace to the available APIs list
+	stack.RegisterAPIs([]rpc.API{
+		{
+			Namespace: "mxc",
+			Version:   params.VersionWithMeta,
+			Service:   eth.NewMxcAPIBackend(backend),
+			Public:    true,
+		},
+	})
+}
diff --git a/mxc-geth/consensus/mxc/consensus.go b/mxc-geth/consensus/mxc/consensus.go
new file mode 100644
index 0000000..793b727
--- /dev/null
+++ b/mxc-geth/consensus/mxc/consensus.go
@@ -0,0 +1,290 @@
+package mxc
+
+import (
+	"errors"
+	"fmt"
+	"math/big"
+	"runtime"
+	"time"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/consensus"
+	"github.com/ethereum/go-ethereum/core/state"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/params"
+	"github.com/ethereum/go-ethereum/rpc"
+	"github.com/ethereum/go-ethereum/trie"
+)
+
+var (
+	ErrOlderBlockTime       = errors.New("timestamp older than parent")
+	ErrUnclesNotEmpty       = errors.New("uncles not empty")
+	ErrEmptyBasefee         = errors.New("empty base fee")
+	ErrEmptyWithdrawalsHash = errors.New("withdrawals hash missing")
+)
+
+// Mxc is a consensus engine used by L2 rollup.
+type Mxc struct{}
+
+var defaultMxc = new(Mxc)
+
+func New() *Mxc {
+	return defaultMxc
+}
+
+// check all method stubs for interface `Engine` without affect performance.
+var _ consensus.Engine = (*Mxc)(nil)
+
+// Author retrieves the Ethereum address of the account that minted the given
+// block, who proposes the block (not the prover).
+func (t *Mxc) Author(header *types.Header) (common.Address, error) {
+	return header.Coinbase, nil
+}
+
+// VerifyHeader checks whether a header conforms to the consensus rules of a
+// given engine. Verifying the seal may be done optionally here, or explicitly
+// via the VerifySeal method.
+func (t *Mxc) VerifyHeader(chain consensus.ChainHeaderReader, header *types.Header, seal bool) error {
+	// Short circuit if the header is known, or its parent not
+	number := header.Number.Uint64()
+	if chain.GetHeader(header.Hash(), number) != nil {
+		return nil
+	}
+	parent := chain.GetHeader(header.ParentHash, number-1)
+	if parent == nil {
+		return consensus.ErrUnknownAncestor
+	}
+	// Sanity checks passed, do a proper verification
+	return t.verifyHeader(chain, header, parent, seal, time.Now().Unix())
+}
+
+// VerifyHeaders is similar to VerifyHeader, but verifies a batch of headers
+// concurrently. The method returns a quit channel to abort the operations and
+// a results channel to retrieve the async verifications (the order is that of
+// the input slice).
+func (t *Mxc) VerifyHeaders(chain consensus.ChainHeaderReader, headers []*types.Header, seals []bool) (chan<- struct{}, <-chan error) {
+	// Spawn as many workers as allowed threads
+	workers := runtime.GOMAXPROCS(0)
+	if len(headers) < workers {
+		workers = len(headers)
+	}
+
+	// Create a task channel and spawn the verifiers
+	var (
+		inputs  = make(chan int)
+		done    = make(chan int, workers)
+		errors  = make([]error, len(headers))
+		abort   = make(chan struct{})
+		unixNow = time.Now().Unix()
+	)
+	for i := 0; i < workers; i++ {
+		go func() {
+			for index := range inputs {
+				errors[index] = t.verifyHeaderWorker(chain, headers, seals, index, unixNow)
+				done <- index
+			}
+		}()
+	}
+
+	errorsOut := make(chan error, len(headers))
+	go func() {
+		defer close(inputs)
+		var (
+			in, out = 0, 0
+			checked = make([]bool, len(headers))
+			inputs  = inputs
+		)
+		for {
+			select {
+			case inputs <- in:
+				if in++; in == len(headers) {
+					// Reached end of headers. Stop sending to workers.
+					inputs = nil
+				}
+			case index := <-done:
+				for checked[index] = true; checked[out]; out++ {
+					errorsOut <- errors[out]
+					if out == len(headers)-1 {
+						return
+					}
+				}
+			case <-abort:
+				return
+			}
+		}
+	}()
+	return abort, errorsOut
+}
+
+func (t *Mxc) verifyHeader(chain consensus.ChainHeaderReader, header, parent *types.Header, seal bool, unixNow int64) error {
+	if header.Time > uint64(unixNow) {
+		return consensus.ErrFutureBlock
+	}
+
+	// Ensure that the header's extra-data section is of a reasonable size (<= 32 bytes)
+	if uint64(len(header.Extra)) > params.MaximumExtraDataSize {
+		return fmt.Errorf("extra-data too long: %d > %d", len(header.Extra), params.MaximumExtraDataSize)
+	}
+
+	// Timestamp should later than or equal to parent (when many L2 blocks included in one L1 block)
+	if header.Time < parent.Time {
+		return ErrOlderBlockTime
+	}
+
+	// Verify that the block number is parent's +1
+	if diff := new(big.Int).Sub(header.Number, parent.Number); diff.Cmp(big.NewInt(1)) != 0 {
+		return consensus.ErrInvalidNumber
+	}
+
+	// Difficulty should always be zero
+	if header.Difficulty != nil && header.Difficulty.Cmp(common.Big0) != 0 {
+		return fmt.Errorf("invalid difficulty: have %v, want %v", header.Difficulty, common.Big0)
+	}
+
+	// Verify that the gas limit is <= 2^63-1
+	if header.GasLimit > params.MaxGasLimit {
+		return fmt.Errorf("invalid gasLimit: have %v, max %v", header.GasLimit, params.MaxGasLimit)
+	}
+
+	// Verify that the gasUsed is <= gasLimit
+	if header.GasUsed > header.GasLimit {
+		return fmt.Errorf("invalid gasUsed: have %d, gasLimit %d", header.GasUsed, header.GasLimit)
+	}
+
+	// Uncles should be empty
+	if header.UncleHash != types.CalcUncleHash(nil) {
+		return ErrUnclesNotEmpty
+	}
+
+	// BaseFee should not be empty
+	if header.BaseFee == nil {
+		return ErrEmptyBasefee
+	}
+
+	// WithdrawalsHash should not be empty
+	if header.WithdrawalsHash == nil {
+		return ErrEmptyWithdrawalsHash
+	}
+
+	return nil
+}
+
+func (t *Mxc) verifyHeaderWorker(chain consensus.ChainHeaderReader, headers []*types.Header, seals []bool, index int, unixNow int64) error {
+	var parent *types.Header
+	if index == 0 {
+		parent = chain.GetHeader(headers[0].ParentHash, headers[0].Number.Uint64()-1)
+	} else if headers[index-1].Hash() == headers[index].ParentHash {
+		parent = headers[index-1]
+	}
+	if parent == nil {
+		return consensus.ErrUnknownAncestor
+	}
+
+	return t.verifyHeader(chain, headers[index], parent, seals[index], unixNow)
+}
+
+// VerifyUncles verifies that the given block's uncles conform to the consensus
+// rules of a given engine.
+//
+// always returning an error for any uncles as this consensus mechanism doesn't permit uncles.
+func (t *Mxc) VerifyUncles(chain consensus.ChainReader, block *types.Block) error {
+	if len(block.Uncles()) > 0 {
+		return ErrUnclesNotEmpty
+	}
+
+	return nil
+}
+
+// Prepare initializes the consensus fields of a block header according to the
+// rules of a particular engine. The changes are executed inline.
+func (t *Mxc) Prepare(chain consensus.ChainHeaderReader, header *types.Header) error {
+	parent := chain.GetHeader(header.ParentHash, header.Number.Uint64()-1)
+	if parent == nil {
+		return consensus.ErrUnknownAncestor
+	}
+	header.Difficulty = common.Big0
+	return nil
+}
+
+// Finalize runs any post-transaction state modifications (e.g. block rewards)
+// but does not assemble the block.
+//
+// Note: The block header and state database might be updated to reflect any
+// consensus rules that happen at finalization (e.g. block rewards).
+func (t *Mxc) Finalize(chain consensus.ChainHeaderReader, header *types.Header, state *state.StateDB, txs []*types.Transaction, uncles []*types.Header, withdrawals []*types.Withdrawal) {
+	// no block rewards in l2
+	header.UncleHash = types.CalcUncleHash(nil)
+	header.Difficulty = common.Big0
+	// Withdrawals processing.
+	// CHANGE(MXC): disabled eth deposit
+	//for _, w := range withdrawals {
+	//	state.AddBalance(w.Address, new(big.Int).SetUint64(w.Amount))
+	//}
+	state.AddBalance(params.MxcChainConfig.Treasury, big.NewInt(0).SetBytes(header.Extra))
+	header.Root = state.IntermediateRoot(true)
+}
+
+// FinalizeAndAssemble runs any post-transaction state modifications (e.g. block
+// rewards) and assembles the final block.
+//
+// Note: The block header and state database might be updated to reflect any
+// consensus rules that happen at finalization (e.g. block rewards).
+func (t *Mxc) FinalizeAndAssemble(chain consensus.ChainHeaderReader, header *types.Header, state *state.StateDB, txs []*types.Transaction, uncles []*types.Header, receipts []*types.Receipt, withdrawals []*types.Withdrawal) (*types.Block, error) {
+	if withdrawals == nil {
+		withdrawals = make([]*types.Withdrawal, 0)
+	}
+
+	// Finalize block
+	t.Finalize(chain, header, state, txs, uncles, withdrawals)
+	return types.NewMxcBlockWithWithdrawals(
+		header, txs, nil /* ignore uncles */, receipts, withdrawals, trie.NewStackTrie(nil),
+	), nil
+}
+
+// Seal generates a new sealing request for the given input block and pushes
+// the result into the given channel.
+//
+// Note, the method returns immediately and will send the result async. More
+// than one result may also be returned depending on the consensus algorithm.
+func (t *Mxc) Seal(chain consensus.ChainHeaderReader, block *types.Block, results chan<- *types.Block, stop <-chan struct{}) error {
+	header := block.Header()
+
+	// Sealing the genesis block is not supported
+	number := header.Number.Uint64()
+	if number == 0 {
+		return consensus.ErrInvalidNumber
+	}
+
+	select {
+	case results <- block.WithSeal(header):
+	case <-stop:
+		return nil
+	default:
+		log.Warn("Sealing result is not read by miner", "sealHash", t.SealHash(header))
+	}
+
+	return nil
+}
+
+// SealHash returns the hash of a block prior to it being sealed.
+func (t *Mxc) SealHash(header *types.Header) common.Hash {
+	// Keccak(rlp(header))
+	return header.Hash()
+}
+
+// CalcDifficulty is the difficulty adjustment algorithm. It returns the difficulty
+// that a new block should have.
+func (t *Mxc) CalcDifficulty(chain consensus.ChainHeaderReader, time uint64, parent *types.Header) *big.Int {
+	return common.Big0
+}
+
+// APIs returns the RPC APIs this consensus engine provides.
+func (t *Mxc) APIs(chain consensus.ChainHeaderReader) []rpc.API {
+	return nil
+}
+
+// Close terminates any background threads maintained by the consensus engine.
+func (t *Mxc) Close() error {
+	return nil
+}
diff --git a/mxc-geth/consensus/mxc/consensus_test.go b/mxc-geth/consensus/mxc/consensus_test.go
new file mode 100644
index 0000000..2d594ec
--- /dev/null
+++ b/mxc-geth/consensus/mxc/consensus_test.go
@@ -0,0 +1,212 @@
+package mxc_test
+
+import (
+	"bytes"
+	"math/big"
+	"testing"
+	"time"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/consensus"
+	"github.com/ethereum/go-ethereum/consensus/mxc"
+	"github.com/ethereum/go-ethereum/core"
+	"github.com/ethereum/go-ethereum/core/rawdb"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/crypto"
+	"github.com/ethereum/go-ethereum/eth"
+	"github.com/ethereum/go-ethereum/eth/ethconfig"
+	"github.com/ethereum/go-ethereum/node"
+	"github.com/ethereum/go-ethereum/params"
+	"github.com/stretchr/testify/assert"
+)
+
+var (
+	testL2RollupAddress = common.HexToAddress("0x79fcdef22feed20eddacbb2587640e45491b757f")
+	testKey, _          = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
+	testAddr            = crypto.PubkeyToAddress(testKey.PublicKey)
+
+	genesis    *core.Genesis
+	txs        []*types.Transaction
+	testEngine *mxc.Mxc
+)
+
+func init() {
+	config := params.TestChainConfig
+	config.GrayGlacierBlock = nil
+	config.ArrowGlacierBlock = nil
+	config.Ethash = nil
+	config.Mxc = true
+	testEngine = mxc.New()
+
+	genesis = &core.Genesis{
+		Config:     config,
+		Alloc:      core.GenesisAlloc{testAddr: {Balance: big.NewInt(2e15)}},
+		ExtraData:  []byte("test genesis"),
+		Timestamp:  9000,
+		Difficulty: common.Big0,
+		BaseFee:    big.NewInt(params.InitialBaseFee),
+	}
+
+	txs = []*types.Transaction{
+		types.MustSignNewTx(testKey, types.LatestSigner(genesis.Config), &types.LegacyTx{
+			Nonce:    0,
+			Value:    big.NewInt(12),
+			GasPrice: big.NewInt(params.InitialBaseFee),
+			Gas:      params.TxGas,
+			To:       &common.Address{2},
+		}),
+		types.MustSignNewTx(testKey, types.LatestSigner(genesis.Config), &types.LegacyTx{
+			Nonce:    1,
+			Value:    big.NewInt(8),
+			GasPrice: big.NewInt(params.InitialBaseFee),
+			Gas:      params.TxGas,
+			To:       &common.Address{2},
+		}),
+		// prepareBlockTx
+		types.MustSignNewTx(testKey, types.LatestSigner(genesis.Config), &types.LegacyTx{
+			Nonce:    2,
+			Value:    big.NewInt(8),
+			GasPrice: big.NewInt(params.InitialBaseFee),
+			Gas:      params.TxGas,
+			To:       &testL2RollupAddress,
+		}),
+	}
+}
+
+func newTestBackend(t *testing.T) (*eth.Ethereum, []*types.Block) {
+	// Generate test chain.
+	blocks := generateTestChain()
+
+	// Create node
+	n, err := node.New(&node.Config{})
+	if err != nil {
+		t.Fatalf("can't create new node: %v", err)
+	}
+
+	// Create Ethereum Service
+	config := &ethconfig.Config{
+		Genesis: genesis,
+	}
+
+	ethservice, err := eth.New(n, config)
+	if err != nil {
+		t.Fatalf("can't create new ethereum service: %v", err)
+	}
+
+	// Import the test chain.
+	if err := n.Start(); err != nil {
+		t.Fatalf("can't start test node: %v", err)
+	}
+
+	if _, err := ethservice.BlockChain().InsertChain(blocks[1:]); err != nil {
+		t.Fatalf("can't import test blocks: %v", err)
+	}
+
+	if _, ok := ethservice.Engine().(*mxc.Mxc); !ok {
+		t.Fatalf("not use mxc engine")
+	}
+
+	return ethservice, blocks
+}
+
+func generateTestChain() []*types.Block {
+	db := rawdb.NewMemoryDatabase()
+	generate := func(i int, g *core.BlockGen) {
+		g.OffsetTime(5)
+
+		g.SetExtra([]byte("test_mxc"))
+		g.SetDifficulty(common.Big0)
+
+		for _, tx := range txs {
+			g.AddTx(tx)
+		}
+	}
+
+	gblock := genesis.MustCommit(db)
+
+	blocks, _ := core.GenerateChain(genesis.Config, gblock, testEngine, db, 1, generate)
+
+	blocks = append([]*types.Block{gblock}, blocks...)
+	return blocks
+}
+
+func TestVerifyHeader(t *testing.T) {
+	ethService, blocks := newTestBackend(t)
+
+	for _, b := range blocks {
+		err := testEngine.VerifyHeader(ethService.BlockChain(), b.Header(), true)
+		assert.NoErrorf(t, err, "VerifyHeader error: %s", err)
+	}
+
+	err := testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		Number:          common.Big1,
+		Time:            uint64(time.Now().Unix()),
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+		UncleHash:       types.EmptyUncleHash,
+	}, true)
+	assert.ErrorIs(t, err, consensus.ErrUnknownAncestor, "VerifyHeader should throw ErrUnknownAncestor when parentHash is unknown")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash:      blocks[len(blocks)-1].Hash(),
+		Number:          common.Big0,
+		Time:            uint64(time.Now().Unix()),
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+		UncleHash:       types.EmptyUncleHash,
+	}, true)
+	assert.ErrorIs(t, err, consensus.ErrInvalidNumber, "VerifyHeader should throw ErrInvalidNumber when the block number is wrong")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash:      blocks[len(blocks)-1].Hash(),
+		Number:          new(big.Int).SetInt64(int64(len(blocks))),
+		Time:            uint64(time.Now().Unix()),
+		Extra:           bytes.Repeat([]byte{1}, int(params.MaximumExtraDataSize+1)),
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+		UncleHash:       types.EmptyUncleHash,
+	}, true)
+	assert.ErrorContains(t, err, "extra-data too long", "VerifyHeader should throw ErrExtraDataTooLong when the block has too much extra data")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash:      blocks[len(blocks)-1].Hash(),
+		Number:          new(big.Int).SetInt64(int64(len(blocks))),
+		Time:            uint64(time.Now().Unix()),
+		Difficulty:      common.Big1,
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+		UncleHash:       types.EmptyUncleHash,
+	}, true)
+	assert.ErrorContains(t, err, "invalid difficulty", "VerifyHeader should throw ErrInvalidDifficulty when difficulty is not 0")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash:      blocks[len(blocks)-1].Hash(),
+		Number:          new(big.Int).SetInt64(int64(len(blocks))),
+		Time:            uint64(time.Now().Unix()),
+		GasLimit:        params.MaxGasLimit + 1,
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+		UncleHash:       types.EmptyUncleHash,
+	}, true)
+	assert.ErrorContains(t, err, "invalid gasLimit", "VerifyHeader should throw ErrInvalidGasLimit when gasLimit is higher than the limit")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash: blocks[len(blocks)-1].Hash(),
+		Number:     new(big.Int).SetInt64(int64(len(blocks))),
+		Time:       uint64(time.Now().Unix()),
+		GasLimit:   params.MaxGasLimit,
+		BaseFee:    big.NewInt(params.InitialBaseFee),
+		UncleHash:  types.EmptyUncleHash,
+	}, true)
+	assert.ErrorContains(t, err, "withdrawals hash missing", "VerifyHeader should throw ErrWithdrawalsHashMissing withdrawalshash is nil")
+
+	err = testEngine.VerifyHeader(ethService.BlockChain(), &types.Header{
+		ParentHash:      blocks[len(blocks)-1].Hash(),
+		Number:          new(big.Int).SetInt64(int64(len(blocks))),
+		Time:            uint64(time.Now().Unix()),
+		GasLimit:        params.MaxGasLimit,
+		BaseFee:         big.NewInt(params.InitialBaseFee),
+		WithdrawalsHash: &types.EmptyWithdrawalsHash,
+	}, true)
+	assert.ErrorContains(t, err, "uncles not empty", "VerifyHeader should throw ErrUnclesNotEmpty if uncles is not the empty hash")
+}
diff --git a/go-ethereum/core/block_validator.go b/mxc-geth/core/block_validator.go
index bcb2288..65db4a1 100644
--- a/go-ethereum/core/block_validator.go
+++ b/mxc-geth/core/block_validator.go
@@ -19,6 +19,7 @@ package core
 import (
 	"fmt"
 
+	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/consensus"
 	"github.com/ethereum/go-ethereum/core/state"
 	"github.com/ethereum/go-ethereum/core/types"
@@ -73,7 +74,14 @@ func (v *BlockValidator) ValidateBody(block *types.Block) error {
 		if block.Withdrawals() == nil {
 			return fmt.Errorf("missing withdrawals in block body")
 		}
-		if hash := types.DeriveSha(block.Withdrawals(), trie.NewStackTrie(nil)); hash != *header.WithdrawalsHash {
+
+		var hash common.Hash
+		if v.config.Mxc {
+			hash = types.CalcWithdrawalsRootMxc(block.Withdrawals())
+		} else {
+			hash = types.DeriveSha(block.Withdrawals(), trie.NewStackTrie(nil))
+		}
+		if hash != *header.WithdrawalsHash {
 			return fmt.Errorf("withdrawals root hash mismatch (header value %x, calculated %x)", *header.WithdrawalsHash, hash)
 		}
 	} else if block.Withdrawals() != nil {
diff --git a/go-ethereum/core/chain_makers.go b/mxc-geth/core/chain_makers.go
index 61d0098..94e8551 100644
--- a/go-ethereum/core/chain_makers.go
+++ b/mxc-geth/core/chain_makers.go
@@ -98,7 +98,7 @@ func (b *BlockGen) addTx(bc *BlockChain, vmConfig vm.Config, tx *types.Transacti
 		b.SetCoinbase(common.Address{})
 	}
 	b.statedb.SetTxContext(tx.Hash(), len(b.txs))
-	receipt, err := ApplyTransaction(b.config, bc, &b.header.Coinbase, b.gasPool, b.statedb, b.header, tx, &b.header.GasUsed, vmConfig)
+	receipt, err := ApplyTransaction(b.config, bc, &b.header.Coinbase, b.gasPool, b.statedb, b.header, tx, &b.header.GasUsed, vmConfig, false)
 	if err != nil {
 		panic(err)
 	}
diff --git a/mxc-geth/core/mxc_genesis/genesis_alloc.go b/mxc-geth/core/mxc_genesis/genesis_alloc.go
new file mode 100644
index 0000000..a827953
--- /dev/null
+++ b/mxc-geth/core/mxc_genesis/genesis_alloc.go
@@ -0,0 +1,11 @@
+package mxc_genesis
+
+import (
+	_ "embed"
+)
+
+//go:embed mainnet.json
+var MainnetGenesisAllocJSON []byte
+
+//go:embed wannsee.json
+var MxcWannseeGenesisAllocJSON []byte
diff --git a/mxc-geth/core/mxc_genesis/mainnet.json b/mxc-geth/core/mxc_genesis/mainnet.json
new file mode 100644
index 0000000..3839241
--- /dev/null
+++ b/mxc-geth/core/mxc_genesis/mainnet.json
@@ -0,0 +1,253 @@
+{
+  "0x0000777735367b36bC9B61C50022d9D0700dB4Ec": {
+    "balance": "0x3782dace9d90000000"
+  },
+  "0x5D9f59F49B5E5C83c1776c5ADD039a3C955d3B02": {
+    "balance": "0x3782dace9d90000000"
+  },
+  "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73": {
+    "balance": "0x034f086f3b33b68400000000"
+  },
+  "0x90829E54b05DA2A66B63Bed13B8C65c77A89F699": {
+    "contractName": "LibTrieProof",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063a54274621461003a575b600080fd5b61004d61004836600461173e565b610061565b604051901515815260200160405180910390f35b600080806100718486018661188e565b6040516bffffffffffffffffffffffff1960608c901b166020820152919350915060009081906100b490603401604051602081830303815290604052858d610184565b915091508161010a5760405162461bcd60e51b815260206004820152601960248201527f4c54503a696e76616c6964206163636f756e742070726f6f660000000000000060448201526064015b60405180910390fd5b6000610115826101ad565b9050600061013c8260028151811061012f5761012f6118f2565b60200260200101516101e6565b90506101738b60405160200161015491815260200190565b60405160208183030381529060405261016c8c6102e9565b87846102fc565b9d9c50505050505050505050505050565b60006060600061019386610316565b90506101a0818686610348565b9250925050935093915050565b6040805180820182526000808252602091820152815180830190925282518252808301908201526060906101e090610423565b92915050565b600060218260000151111561023d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e0000000000006044820152606401610101565b600080600061024b8561060f565b91945092509050600081600181111561026657610266611908565b146102b35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e0000000000006044820152606401610101565b60008386602001516102c59190611934565b805190915060208410156102df5760208490036101000a90045b9695505050505050565b60606101e06102f783610959565b610a8d565b60008061030886610316565b90506102df81868686610afc565b6060818051906020012060405160200161033291815260200190565b6040516020818303038152906040529050919050565b60006060600061035785610b39565b90506000806000610369848a89610c32565b8151929550909350915015808061037d5750815b6103c95760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e0000000000006044820152606401610101565b6000816103e55760405180602001604052806000815250610411565b610411866103f4600188611947565b81518110610404576104046118f2565b6020026020010151611052565b919b919a509098505050505050505050565b60606000806104318461060f565b9193509091506001905081600181111561044d5761044d611908565b1461049a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e0000000000000000006044820152606401610101565b6040805160208082526104208201909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816104b35790505090506000835b8651811015610604576020821061054c5760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b6064820152608401610101565b6000806105896040518060400160405280858c6000015161056d9190611947565b8152602001858c602001516105829190611934565b905261060f565b5091509150604051806040016040528083836105a59190611934565b8152602001848b602001516105ba9190611934565b8152508585815181106105cf576105cf6118f2565b60209081029190910101526105e5600185611934565b93506105f18183611934565b6105fb9084611934565b925050506104e0565b508152949350505050565b6000806000808460000151116106675760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e00000000000000006044820152606401610101565b6020840151805160001a607f811161068c576000600160009450945094505050610952565b60b781116107085760006106a1608083611947565b9050808760000151116106f65760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e000000000000006044820152606401610101565b60019550935060009250610952915050565b60bf81116107f757600061071d60b783611947565b9050808760000151116107725760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e006044820152606401610101565b600183015160208290036101000a900461078c8183611934565b8851116107db5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e00000000000000006044820152606401610101565b6107e6826001611934565b965094506000935061095292505050565b60f7811161087257600061080c60c083611947565b9050808760000151116108615760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e0000000000000000006044820152606401610101565b600195509350849250610952915050565b600061087f60f783611947565b9050808760000151116108d45760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e0000006044820152606401610101565b600183015160208290036101000a90046108ee8183611934565b8851116109365760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b6044820152606401610101565b610941826001611934565b965094506001935061095292505050565b9193909250565b606060008260405160200161097091815260200190565b604051602081830303815290604052905060005b60208110156109c55781818151811061099f5761099f6118f2565b01602001516001600160f81b0319166000036109c5576109be8161195a565b9050610984565b60006109d2826020611947565b67ffffffffffffffff8111156109ea576109ea6117eb565b6040519080825280601f01601f191660200182016040528015610a14576020820181803683370190505b50905060005b8151811015610a84578383610a2e8161195a565b945081518110610a4057610a406118f2565b602001015160f81c60f81b828281518110610a5d57610a5d6118f2565b60200101906001600160f81b031916908160001a905350610a7d8161195a565b9050610a1a565b50949350505050565b60608082516001148015610abb5750608083600081518110610ab157610ab16118f2565b016020015160f81c105b15610ac75750816101e0565b610ad383516080611079565b83604051602001610ae59291906119a3565b604051602081830303815290604052905092915050565b6000806000610b0c878686610348565b91509150818015610b2e57508051602080830191909120875191880191909120145b979650505050505050565b60606000610b46836101ad565b90506000815167ffffffffffffffff811115610b6457610b646117eb565b604051908082528060200260200182016040528015610ba957816020015b6040805180820190915260608082526020820152815260200190600190039081610b825790505b50905060005b8251811015610c2a576000610bdc848381518110610bcf57610bcf6118f2565b6020026020010151611223565b90506040518060400160405280610bf2836101ad565b815260200182815250838381518110610c0d57610c0d6118f2565b60200260200101819052505080610c239061195a565b9050610baf565b509392505050565b600060606000806000610c44876112b3565b90506000869050600080610c6b604051806040016040528060608152602001606081525090565b60005b8c5181101561102a578c8181518110610c8957610c896118f2565b602002602001015191508284610c9f9190611934565b9350610cac600188611934565b965083600003610d09578482602001518051906020012014610d045760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b6044820152606401610101565b610dcb565b602082602001515110610d70578482602001518051906020012014610d045760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c206861736800000000006044820152606401610101565b84610d7e83602001516113ec565b14610dcb5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f646520686173680000000000006044820152606401610101565b610dd7601060016119c0565b60ff1682600001515103610e45578551841461102a576000868581518110610e0157610e016118f2565b01602001518351805160f89290921c925060009183908110610e2557610e256118f2565b60200260200101519050610e3881611414565b965060019450505061101a565b81515160011901610fd2576000610e5b8361144a565b9050600081600081518110610e7257610e726118f2565b016020015160f81c90506000610e896002836119ef565b610e94906002611a11565b90506000610ea5848360ff1661146e565b90506000610eb38b8a61146e565b90506000610ec183836114a4565b905060ff851660021480610ed8575060ff85166003145b15610f1257808351148015610eed5750808251145b15610eff57610efc818b611934565b99505b50600160ff1b995061102a945050505050565b60ff85161580610f25575060ff85166001145b15610f7b5782518114610f455750600160ff1b995061102a945050505050565b610f6c8860000151600181518110610f5f57610f5f6118f2565b6020026020010151611414565b9a50975061101a945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b6064820152608401610101565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e0000006044820152606401610101565b6110238161195a565b9050610c6e565b50600160ff1b84148661103d878661146e565b909e909d50909b509950505050505050505050565b805180516060916101e09161106990600190611947565b81518110610bcf57610bcf6118f2565b60608060388410156110e057604080516001808252818301909252906020820181803683370190505090506110ae83856119c0565b60f81b816000815181106110c4576110c46118f2565b60200101906001600160f81b031916908160001a90535061121c565b600060015b6110ef8187611a2a565b15611112576110fd8261195a565b915061110b61010082611a3e565b90506110e5565b61111d826001611934565b67ffffffffffffffff811115611135576111356117eb565b6040519080825280601f01601f19166020018201604052801561115f576020820181803683370190505b50925061116c85836119c0565b6111779060376119c0565b60f81b8360008151811061118d5761118d6118f2565b60200101906001600160f81b031916908160001a905350600190505b818111611219576101006111bd8284611947565b6111c990610100611b39565b6111d39088611a2a565b6111dd9190611b45565b60f81b8382815181106111f2576111f26118f2565b60200101906001600160f81b031916908160001a9053506112128161195a565b90506111a9565b50505b9392505050565b606060008060006112338561060f565b91945092509050600081600181111561124e5761124e611908565b1461129b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e00000000000000006044820152606401610101565b6112aa8560200151848461151e565b95945050505050565b60606000825160026112c59190611a3e565b67ffffffffffffffff8111156112dd576112dd6117eb565b6040519080825280601f01601f191660200182016040528015611307576020820181803683370190505b50905060005b83518110156113e557600484828151811061132a5761132a6118f2565b01602001516001600160f81b031916901c82611347836002611a3e565b81518110611357576113576118f2565b60200101906001600160f81b031916908160001a9053506010848281518110611382576113826118f2565b0160200151611394919060f81c6119ef565b60f81b826113a3836002611a3e565b6113ae906001611934565b815181106113be576113be6118f2565b60200101906001600160f81b031916908160001a9053506113de8161195a565b905061130d565b5092915050565b600060208251101561140057506020015190565b818060200190518101906101e09190611b59565b600060606020836000015110156114355761142e836115c7565b9050611441565b61143e83611223565b90505b61121c816113ec565b60606101e06114698360000151600081518110610bcf57610bcf6118f2565b6112b3565b60608251821061148d57506040805160208101909152600081526101e0565b61121c838384865161149f9190611947565b6115d2565b6000805b8084511180156114b85750808351115b801561150957508281815181106114d1576114d16118f2565b602001015160f81c60f81b6001600160f81b0319168482815181106114f8576114f86118f2565b01602001516001600160f81b031916145b1561121c576115178161195a565b90506114a8565b606060008267ffffffffffffffff81111561153b5761153b6117eb565b6040519080825280601f01601f191660200182016040528015611565576020820181803683370190505b509050805160000361157857905061121c565b8484016020820160005b8581101561159a578281015182820152602001611582565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b60606101e082611728565b6060816115e081601f611934565b101561161f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610101565b8261162a8382611934565b10156116695760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610101565b6116738284611934565b845110156116b75760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610101565b6060821580156116d65760405191506000825260208201604052610a84565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561170f5780518352602092830192016116f7565b5050858452601f01601f19166040525050949350505050565b60606101e082602001516000846000015161151e565b60008060008060008060a0878903121561175757600080fd5b8635955060208701356001600160a01b038116811461177557600080fd5b94506040870135935060608701359250608087013567ffffffffffffffff808211156117a057600080fd5b818901915089601f8301126117b457600080fd5b8135818111156117c357600080fd5b8a60208285010111156117d557600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261181257600080fd5b813567ffffffffffffffff8082111561182d5761182d6117eb565b604051601f8301601f19908116603f01168101908282118183101715611855576118556117eb565b8160405283815286602085880101111561186e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156118a157600080fd5b823567ffffffffffffffff808211156118b957600080fd5b6118c586838701611801565b935060208501359150808211156118db57600080fd5b506118e885828601611801565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156101e0576101e061191e565b818103818111156101e0576101e061191e565b60006001820161196c5761196c61191e565b5060010190565b6000815160005b81811015611994576020818501810151868301520161197a565b50600093019283525090919050565b60006119b86119b28386611973565b84611973565b949350505050565b60ff81811683821601908111156101e0576101e061191e565b634e487b7160e01b600052601260045260246000fd5b600060ff831680611a0257611a026119d9565b8060ff84160691505092915050565b60ff82811682821603908111156101e0576101e061191e565b600082611a3957611a396119d9565b500490565b80820281158282048414176101e0576101e061191e565b600181815b80851115611a90578160001904821115611a7657611a7661191e565b80851615611a8357918102915b93841c9390800290611a5a565b509250929050565b600082611aa7575060016101e0565b81611ab4575060006101e0565b8160018114611aca5760028114611ad457611af0565b60019150506101e0565b60ff841115611ae557611ae561191e565b50506001821b6101e0565b5060208310610133831016604e8410600b8410161715611b13575081810a6101e0565b611b1d8383611a55565b8060001904821115611b3157611b3161191e565b029392505050565b600061121c8383611a98565b600082611b5457611b546119d9565b500690565b600060208284031215611b6b57600080fd5b505191905056fea2646970667358221220e88f838c18fa0822c41979ec7b8bb8dbfb8821150341cba428e6658896dc0a4064736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x839062626B7F5ca761626A7F4fF99ADEec50Ff08": {
+    "contractName": "LibBridgeRetry",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208131916ec27759025168eec30f2fc386bc13a39f95f8719ab505f2302ad1fbd964736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x53579AB128C256FE2ccBDC79b24EdB0Aa38e4c4B": {
+    "contractName": "LibBridgeProcess",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220166b7a66124b29913cf06f25006a3888e2a0ed97d7ad4677d066a8c0218c442c64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000006": {
+    "contractName": "ProxiedAddressManager",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063656b06a414610067578063715018a6146100b75780638da5cb5b146100c1578063decd8e39146100d2578063e1c7392a146100e5578063f2fde38b146100ed575b600080fd5b61009b610075366004610466565b60009182526065602090815260408084209284529190529020546001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b6100bf610100565b005b6033546001600160a01b031661009b565b6100bf6100e03660046104a4565b610114565b6100bf6101d4565b6100bf6100fb3660046104d9565b6102ea565b610108610360565b61011260006103ba565b565b61011c610360565b6001600160a01b0381163b15801561013c57506001600160a01b03811633145b1561015a57604051633baa901360e21b815260040160405180910390fd5b600083815260656020908152604080832085845282529182902080546001600160a01b038581166001600160a01b0319831681179093558451928352169181018290529091849186917fe41a6e8584d6e19a0dfc5f9331be4ebe61b5f025d45da164c9ca6ee9b837cea9910160405180910390a350505050565b600054610100900460ff16158080156101f45750600054600160ff909116105b8061020e5750303b15801561020e575060005460ff166001145b6102765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610299576000805461ff0019166101001790555b6102a161040c565b80156102e7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6102f2610360565b6001600160a01b0381166103575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026d565b6102e7816103ba565b6033546001600160a01b031633146101125760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166104335760405162461bcd60e51b815260040161026d906104fb565b610112600054610100900460ff1661045d5760405162461bcd60e51b815260040161026d906104fb565b610112336103ba565b6000806040838503121561047957600080fd5b50508035926020909101359150565b80356001600160a01b038116811461049f57600080fd5b919050565b6000806000606084860312156104b957600080fd5b83359250602084013591506104d060408501610488565b90509250925092565b6000602082840312156104eb57600080fd5b6104f482610488565b9392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b29df3798c9e726c3c164b2b040762f31a38f87a602f1c19eb500d71a492ecc464736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000006": {
+    "contractName": "AddressManagerProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000033": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x430232c3118067c274e24bf0573d897d906c9567cb501adbb56de1dcba7fdea8": "0x0000000000000000000000001000777700000000000000000000000000000001",
+      "0x4f9f91213db4a9bdee72c5fbac069b47e9e9e804867e985f4e507e85074563b6": "0x0000000000000000000000001000777700000000000000000000000000000004",
+      "0x7acc4b79cc431c9a6d89691bd6043a8a9cffe1818ef2367f268355af79c65831": "0x0000000000000000000000001000777700000000000000000000000000000002",
+      "0x6be4118ce07b8239a46dcc445a4d19590361b7140deee96bab8333576e373c7d": "0x0000000000000000000000001000777700000000000000000000000000000003",
+      "0x9a77c63b9d666cbd64a700e27f875c1d5a209455abd8190054fc4fc317677c09": "0x0000000000000000000000001000777700000000000000000000000000000007",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000006"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000001": {
+    "contractName": "ProxiedMxcL2",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638f3ca30d116100b8578063c7b969081161007c578063c7b96908146102f5578063dac5df781461030f578063e1848cb014610318578063ee82ac5e1461032b578063f2fde38b1461033e578063f535bd561461035157600080fd5b80638f3ca30d146102905780639ee512f2146102a3578063a86f9d9e146102bc578063b8914ce4146102cf578063bacb386d146102e257600080fd5b8063539b8ade116100ff578063539b8ade14610207578063591aad8a146102325780636c6563f614610264578063715018a6146102775780638da5cb5b1461027f57600080fd5b80630652b57a1461013c57806310da3738146101515780633ab76e9f1461018b5780633d384a4b146101b05780634e755573146101c3575b600080fd5b61014f61014a36600461162a565b61036b565b005b6101787f92954368afd3caa1f3ce3ead0069c1af414054aefe1ef9aeacc1bf426222ce3881565b6040519081526020015b60405180910390f35b6097546001600160a01b03165b6040516001600160a01b039091168152602001610182565b61014f6101be36600461165e565b6103ee565b6101cb6105b6565b6040805182516001600160801b031681526020808401516001600160401b03908116918301919091529282015190921690820152606001610182565b60cd5461021a906001600160401b031681565b6040516001600160401b039091168152602001610182565b6102456102403660046116a4565b610616565b6040805160ff9094168452602084019290925290820152606001610182565b6101986102723660046116ea565b610851565b61014f610868565b6065546001600160a01b0316610198565b61014f61029e36600461171f565b61087c565b61019871777735367b36bc9b61c50022d9d0700db4ec81565b6101986102ca366004611760565b610c38565b6101786102dd36600461178c565b610c4e565b6101786102f036600461178c565b610c8a565b60cd5461021a90600160401b90046001600160401b031681565b61017860cb5481565b6101786103263660046117a5565b610cc3565b61017861033936600461178c565b610ce7565b61014f61034c36600461162a565b610d34565b60cd5461021a90600160801b90046001600160401b031681565b610373610dad565b6001600160a01b03811661039a57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b3371777735367b36bc9b61c50022d9d0700db4ec1461042057604051636494e9f760e01b815260040160405180910390fd5b600061042d600143611800565b9050804060008061043d84610e07565b915091508160cb54146104765760cb54604051636340d9fb60e11b81526004810191909152602481018390526044015b60405180910390fd5b60cb819055600084815260c96020908152604080832086905560cd80546fffffffffffffffff00000000000000001916600160401b6001600160401b038c1690810291909117909155815180830183528c81528084018c815282865260ca8552948390209051815593516001949094019390935580518b81529182018a90527f7528bbd1cef0e5d13408706892a51ee8ef82bbf33d4ec0c37216f8beba71205b910160405180910390a260cd805467ffffffffffffffff1916426001600160401b03908116918217909255604080514384168152488416602082015245909316908301526060820152608081018490524460a08201524160c082015263ffffffff461660e08201527f4dcb01f99c4a2c27a16ab38d00ec92434f8231be81fa62e058f260d3c7156029906101000160405180910390a15050505050505050565b6040805160608101825260008082526020820181905291810191909152506040805160608101825260cc546001600160801b03811682526001600160401b03600160801b820481166020840152600160c01b909104169181019190915290565b60008060008360ff1660011415801561063357508360ff16600214155b156106515760405163bcd2d90d60e01b815260040160405180910390fd5b8360ff16600114610682577fc6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee56106a4565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817985b915060008460ff166001146106d9577fad77eceea844778cb4376153fc8f06f12f1695df4585bf75bfb17ec19ce908186106fb565b7fb4a95509ce05fe8d45987859a067780d16a367c0e2cacf79cd301b93fb7179405b905060008560ff16600114610730577f71620584f61c57e688bbd3fd7a39a036e588d962c4c830f3dacbc15c917e02f2610752565b7f45b59254b0320fd853f3f38ac574999e91bd75fd5e6cab9c22c5e71fc6d276e45b82880192831001905060ff861660010361078c576107858282600170014551231950b75fc4402da1732fc9bebe19610e9a565b92506107fb565b6107d47f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a16107cf8484600170014551231950b75fc4402da1732fc9bebe19610e9a565b610ee9565b90925090506107f88282600170014551231950b75fc4402da1732fc9bebe19610e9a565b92505b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156108485761083f8370014551231950b75fc4402da1732fc9bebe19611800565b92506001851894505b50509250925092565b600061085e848484610f08565b90505b9392505050565b610870610dad565b61087a6000610fbc565b565b600054610100900460ff161580801561089c5750600054600160ff909116105b806108b65750303b1580156108b6575060005460ff166001145b6109195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046d565b6000805460ff19166001179055801561093c576000805461ff0019166101001790555b600146111580610950575063ffffffff4610155b1561096e576040516306cffa2760e01b815260040160405180910390fd5b600143111561099057604051635a0f9e4160e11b815260040160405180910390fd5b6109a06040830160208401611813565b6001600160401b031615610b94576109bb6020830183611813565b6001600160401b031615806109e657506109db6060830160408401611813565b6001600160401b0316155b80610a0757506109fc6080830160608401611813565b6001600160401b0316155b80610a285750610a1d60a0830160808401611813565b6001600160401b0316155b15610a4657604051639cc448b560e01b815260040160405180910390fd5b600080610a8e610a5c6060860160408701611813565b610a696020870187611813565b610a796080880160608901611813565b610a8960a0890160808a01611813565b61100e565b91509150816001600160801b031660001480610aba57506001600160401b036001600160801b03831610155b80610acc57506001600160801b038116155b15610aea57604051639cc448b560e01b815260040160405180910390fd5b60cc80546001600160401b038416600160801b026001600160c01b03199091166001600160801b03841617179055610b286040850160208601611813565b60cc80546001600160401b0392909216600160c01b026001600160c01b039092169190911790556002610b616060860160408701611813565b610b6b9190611844565b60cd60106101000a8154816001600160401b0302191690836001600160401b0316021790555050505b60cd805467ffffffffffffffff1916426001600160401b0316179055610bb98361110d565b610bc243610e07565b5060cb554315610bed576000610bd9600143611800565b600081815260c96020526040902090409055505b8015610c33576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000610c45468484610f08565b90505b92915050565b6000808215610c5d5782610c71565b60cd54600160401b90046001600160401b03165b600090815260ca60205260409020600101549392505050565b6000808215610c995782610cad565b60cd54600160401b90046001600160401b03165b600090815260ca60205260409020549392505050565b6000610cde610cd06105b6565b8563ffffffff168585611126565b50949350505050565b6000438210610cf857506000919050565b4382108015610d125750610d0e61010043611800565b8210155b15610d1c57504090565b50600090815260c9602052604090205490565b919050565b610d3c610dad565b6001600160a01b038116610da15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046d565b610daa81610fbc565b50565b6065546001600160a01b0316331461087a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b600080610e126115f5565b60005b60ff81108015610e285750806001018510155b15610e5a576000198186030180408360ff83066101008110610e4c57610e4c61186a565b602002015250600101610e15565b5046611fe082015261200081209250834081610e7760ff87611880565b6101008110610e8857610e8861186a565b60200201526120009020919391925050565b600060405160408152602080820152602060408201528460608201528560808201528360a08201528260c082015260208160e08360056107d05a03fa610edf57600080fd5b5195945050505050565b6000806000198385098385029250828110838203039150509250929050565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190611894565b905081158015610f9457506001600160a01b038116155b1561086157604051631467050360e21b8152600481018590526024810184905260440161046d565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080856001600160401b031660000361102a5761102a6118b1565b6000611037600288611844565b90506110556001600160401b038816680755bf798b4a1bf1e46118c7565b925061107461106f84886001600160401b031684896111c2565b611281565b91506000611084848484896111c2565b9050600061109e8585856110998b60026118e1565b6111c2565b90506000826110af8361271061190c565b6110b99190611923565b9050806001600160401b0316876001600160401b031614611100576040516331c2ec2360e21b81526001600160401b0380891660048301528216602482015260440161046d565b5050505094509492505050565b6111156112ee565b61111d61131d565b610daa8161134c565b600080806202bf206001600160401b0385161161114457600061114b565b6202bf2084035b60cd546040890151919250600160801b90046001600160401b039081168184160191811688029061118890826111818582611395565b03906113ab565b93505050506111aa86602001516001600160401b0316876000015183876111c2565b9150816000036111b957600191505b94509492505050565b60006001600160801b038516158015906111e457506001600160801b03841615155b6111f0576111f06118b1565b60006001600160401b03831615611207578261120a565b60015b90506000611221856001600160401b0316886113c0565b905060006112416112328488611937565b6001600160401b0316896113c0565b90506001600160801b0387166001600160401b0384166112618484611800565b61126b9190611923565b6112759190611923565b98975050505050505050565b60006001600160801b038211156112ea5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161046d565b5090565b600054610100900460ff166113155760405162461bcd60e51b815260040161046d9061195e565b61087a611412565b600054610100900460ff166113445760405162461bcd60e51b815260040161046d9061195e565b61087a61143f565b6001600160a01b03811661137357604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b60008183116113a45781610c45565b5090919050565b60008183116113ba5782610c45565b50919050565b6000806113d66001600160801b0384168561190c565b9050680755bf798b4a1bf1e48110611401576040516372de381d60e01b815260040160405180910390fd5b61140a8161146f565b949350505050565b600054610100900460ff166114395760405162461bcd60e51b815260040161046d9061195e565b60018055565b600054610100900460ff166114665760405162461bcd60e51b815260040161046d9061195e565b61087a33610fbc565b6000680248ce36a70cb26b3e19821361148a57506000919050565b680755bf798b4a1bf1e582126114b357604051631a93c68960e11b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b6d2c06887d92262d378b9593af35346c09791803c2923d5d9721c3da80929091056001605f1b0190921d6bb17217f7d1cf79abc9e3b39881029095039081018102606090811d6d019dd9374d4315c8464a395fc09881016c1bff318b126baa436ea9aeaffd19840102821d93840193016d29c9ad45cc0beb0a2ff097a7bab40192909202821d6dcf3c27b2e487711b467e90f19320016c22fcd1cffa6fa000f6e27eeca082018202831d6d022f98fbc368092c79210d196fa0018202831d6d13aaae3ba38de06adc25ebfacc0901820290921d6d624dcbeb5e25df590e409325888a01026d360d7aeea093263ec6495851bd9760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b604051806120000160405280610100906020820280368337509192915050565b6001600160a01b0381168114610daa57600080fd5b60006020828403121561163c57600080fd5b813561086181611615565b80356001600160401b0381168114610d2f57600080fd5b6000806000806080858703121561167457600080fd5b843593506020850135925061168b60408601611647565b915061169960608601611647565b905092959194509250565b600080604083850312156116b757600080fd5b82359150602083013560ff811681146116cf57600080fd5b809150509250929050565b80358015158114610d2f57600080fd5b6000806000606084860312156116ff57600080fd5b8335925060208401359150611716604085016116da565b90509250925092565b60008082840360c081121561173357600080fd5b833561173e81611615565b925060a0601f198201121561175257600080fd5b506020830190509250929050565b6000806040838503121561177357600080fd5b82359150611783602084016116da565b90509250929050565b60006020828403121561179e57600080fd5b5035919050565b6000806000606084860312156117ba57600080fd5b833563ffffffff811681146117ce57600080fd5b92506117dc60208501611647565b915061171660408501611647565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c4857610c486117ea565b60006020828403121561182557600080fd5b610c4582611647565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038084168061185e5761185e61182e565b92169190910492915050565b634e487b7160e01b600052603260045260246000fd5b60008261188f5761188f61182e565b500690565b6000602082840312156118a657600080fd5b815161086181611615565b634e487b7160e01b600052600160045260246000fd5b60006001600160801b038084168061185e5761185e61182e565b6001600160401b03818116838216028082169190828114611904576119046117ea565b505092915050565b8082028115828204841417610c4857610c486117ea565b6000826119325761193261182e565b500490565b6001600160401b03818116838216019080821115611957576119576117ea565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e499ccf1fe7c01088ff959220618f9deabfd7304d327ad653dc80b362ef5ce9d64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000000": {
+    "contractName": "ProxiedPlaceholder",
+    "storage": {},
+    "code": "0x6080604052600080fdfea2646970667358221220d294f9377c9cc3d7bc3fadb64c83c387d89c74a2684b9e2ad91f99052aa5416b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000001": {
+    "contractName": "MxcL2Proxy",
+    "storage": {
+      "0x00000000000000000000000000000000000000000000000000000000000000cb": "0x304a8da60727d9a6b247d0c2a1dfa8fd6fb81e6ef3bb9afa9900307458e1bde4",
+      "0x00000000000000000000000000000000000000000000000000000000000000cc": "0x0000000000bebc200000000058b8ef1c0000000485b9d2e799564d28c46075dd",
+      "0x00000000000000000000000000000000000000000000000000000000000000cd": "0x00000000000000000000000a9507f68000000000000000000000000064852f6c",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000001"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000004": {
+    "contractName": "ProxiedBridge",
+    "storage": {},
+    "code": "",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000004": {
+    "contractName": "BridgeProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000004"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000002": {
+    "contractName": "ProxiedTokenVault",
+    "storage": {},
+    "code": "0x6080604052600436106100f35760003560e01c80638c7a39401161008a578063a86f9d9e11610059578063a86f9d9e146102f5578063c287e57814610315578063ee1490b214610355578063f2fde38b1461036857600080fd5b80638c7a3940146102665780638da5cb5b146102865780639754149b146102a45780639aa8605c146102c457600080fd5b806367090ccf116100c657806367090ccf146101915780636c6563f6146101d2578063715018a6146101f2578063780b64f01461020757600080fd5b80630652b57a146100f85780630c6fab821461011a57806319ab453c1461013a5780633ab76e9f1461015a575b600080fd5b34801561010457600080fd5b5061011861011336600461209c565b610388565b005b34801561012657600080fd5b506101186101353660046120b9565b61040b565b34801561014657600080fd5b5061011861015536600461209c565b610622565b34801561016657600080fd5b506097546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019d57600080fd5b506101746101ac366004612128565b60cb6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156101de57600080fd5b506101746101ed366004612166565b61073a565b3480156101fe57600080fd5b50610118610751565b34801561021357600080fd5b5061024761022236600461219f565b60cc60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610188565b34801561027257600080fd5b506101186102813660046121b8565b610765565b34801561029257600080fd5b506065546001600160a01b0316610174565b3480156102b057600080fd5b506101186102bf3660046121e4565b6107e9565b3480156102d057600080fd5b506102e46102df36600461209c565b610b37565b6040516101889594939291906122d4565b34801561030157600080fd5b50610174610310366004612325565b610c88565b34801561032157600080fd5b5061034561033036600461209c565b60c96020526000908152604090205460ff1681565b6040519015158152602001610188565b6101186103633660046123b9565b610c9e565b34801561037457600080fd5b5061011861038336600461209c565b6114d7565b610390611550565b6001600160a01b0381166103b757604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b6104136115aa565b6562726964676560d01b610428816000610c88565b6001600160a01b0316336001600160a01b03161461045957604051630d85cccf60e11b815260040160405180910390fd5b6000336001600160a01b031663d0496d6a6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190612498565b90506104dd81604001516a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b031681602001516001600160a01b031614610512576040516320258b8760e21b815260040160405180910390fd5b6000468735036105475761052c604088016020890161209c565b90506105426001600160a01b0382168686611603565b6105b7565b61055087611666565b6040516342e91bb360e01b81526001600160a01b03878116600483015260248201879052919250908216906342e91bb390604401600060405180830381600087803b15801561059e57600080fd5b505af11580156105b2573d6000803e3d6000fd5b505050505b815160408084015181519081526001600160a01b0384811660208301529181018790528188169291891691907fe5da926519fc972010fe65b35c1e3339e6dc72b35ffaec203999c2a2a2593eac9060600160405180910390a450505061061c60018055565b50505050565b600054610100900460ff16158080156106425750600054600160ff909116105b8061065c5750303b15801561065c575060005460ff166001145b6106c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156106e7576000805461ff0019166101001790555b6106f0826116c5565b8015610736576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006107478484846116de565b90505b9392505050565b610759611550565b6107636000611792565b565b61076d6115aa565b6562726964676560d01b610782816000610c88565b6001600160a01b0316336001600160a01b0316146107b357604051630d85cccf60e11b815260040160405180910390fd5b6107df83836107cf6836bc31afba37b5b2b760b91b6000610c88565b6001600160a01b03169190611603565b5061073660018055565b6107f16115aa565b600061080360a085016080860161209c565b6001600160a01b03160361082a576040516372b41cdf60e01b815260040160405180910390fd5b4683604001351461084e576040516348bc100560e01b815260040160405180910390fd5b60006108646562726964676560d01b6000610c88565b90506000816001600160a01b0316635817b0c3866040518263ffffffff1660e01b81526004016108949190612570565b602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d5919061268e565b600081815260cc6020526040902080546001909101549192506001600160a01b0316908161091657604051637c6addb760e01b815260040160405180910390fd5b60405163ce70f39b60e01b81526001600160a01b0385169063ce70f39b9061094c90869060608c0135908b908b906004016126a7565b602060405180830381865afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d91906126d1565b6109aa576040516308ba49e560e31b815260040160405180910390fd5b6040805180820182526000808252602080830182815287835260cc909152929020905181546001600160a01b0319166001600160a01b0390911617815590516001909101558015610abe576001600160a01b038216600090815260c9602052604090205460ff1615610a9a576001600160a01b0382166342e91bb3610a3560a08a0160808b0161209c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610a7d57600080fd5b505af1158015610a91573d6000803e3d6000fd5b50505050610abe565b610abe610aad60a0890160808a0161209c565b6001600160a01b0384169083611603565b610ace60a088016080890161209c565b6001600160a01b0316837fc5d9f7cd7998e24ecf12ad69eca9339764e2cb13788d5d9616f502601b219af68484604051610b1d9291906001600160a01b03929092168252602082015260400190565b60405180910390a350505050610b3260018055565b505050565b60ca6020526000908152604090208054600182015460028301805492936001600160a01b03831693600160a01b90930460ff1692909190610b77906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba3906126ee565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505090806003018054610c05906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610c31906126ee565b8015610c7e5780601f10610c5357610100808354040283529160200191610c7e565b820191906000526020600020905b815481529060010190602001808311610c6157829003601f168201915b5050505050905085565b6000610c954684846116de565b90505b92915050565b610ca66115aa565b6001600160a01b0387161580610ce65750610cd1886a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b0316876001600160a01b0316145b15610d0457604051634694641b60e01b815260040160405180910390fd5b6001600160a01b038616610d2b57604051637c6addb760e01b815260040160405180910390fd5b84600003610d4b5760405162af849960e11b815260040160405180910390fd5b6040805160a08101825260008082526020820181905291810191909152606080820181905260808201526001600160a01b038716600090815260c9602052604081205460ff1615610fa257604051630ef7c31560e31b8152336004820152602481018890526001600160a01b038916906377be18a890604401600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505050506001600160a01b03888116600090815260ca6020908152604091829020825160a08101845281548152600182015494851692810192909252600160a01b90930460ff1691810191909152600282018054919291606084019190610e58906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610e84906126ee565b8015610ed15780601f10610ea657610100808354040283529160200191610ed1565b820191906000526020600020905b815481529060010190602001808311610eb457829003601f168201915b50505050508152602001600382018054610eea906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610f16906126ee565b8015610f635780601f10610f3857610100808354040283529160200191610f63565b820191906000526020600020905b815481529060010190602001808311610f4657829003601f168201915b5050509190925250505060208101519092506001600160a01b0316610f9b57604051633e45a03560e21b815260040160405180910390fd5b5085611202565b60008890506040518060a001604052804681526020018a6001600160a01b03168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190612737565b60ff168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110979190810190612754565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111029190810190612754565b90526040516370a0823160e01b81523060048201529093506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611172919061268e565b90506111896001600160a01b03831633308c6117e4565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f3919061268e565b6111fd91906127cb565b925050505b611291604051806101a001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b606081018b90523360808201526112b88b6a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b031660a08201526080810151604051630637d5c160e11b916112ea918691908e9087906024016127ec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610160820152610140810187905261012081018690523486101561134a5761134486346127cb565b60e08201525b6001600160a01b03851660c0820152610180810184905260006113766562726964676560d01b82610c88565b6001600160a01b03166396e1785234846040518363ffffffff1660e01b81526004016113a29190612884565b60206040518083038185885af11580156113c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113e5919061268e565b905060405180604001604052808b6001600160a01b031681526020018481525060cc600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101559050508a6001600160a01b031682608001516001600160a01b0316827f325cab7553038374e17f39bb45e2a2c90f66c6a52798cb5f95c20d94c11c95e28f8e886040516114b8939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a4505050506114cd60018055565b5050505050505050565b6114df611550565b6001600160a01b0381166115445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bb565b61154d81611792565b50565b6065546001600160a01b031633146107635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106bb565b6002600154036115fc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106bb565b6002600155565b6040516001600160a01b038316602482015260448101829052610b3290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261181c565b8035600090815260cb6020908152604080832083929091839161168d91870190870161209c565b6001600160a01b03908116825260208201929092526040016000205416905080610c98576116ba836118ee565b61074a565b60018055565b6116cd611b73565b6116d5611ba2565b61154d81611bd1565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190612974565b90508115801561176a57506001600160a01b038116155b1561074a57604051631467050360e21b815260048101859052602481018490526044016106bb565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261061c9085906323b872dd60e01b9060840161162f565b6000611871826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c1a9092919063ffffffff16565b805190915015610b32578080602001905181019061188f91906126d1565b610b325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bb565b6000611967818335611906604086016020870161209c565b60405161192992916001600160a01b031690602001918252602082015260400190565b604051602081830303815290604052805190602001206040518060200161194f9061206a565b601f1982820381018352601f90910116604052611c29565b6097549091506001600160a01b0380831691636c0db62b9116611990604086016020870161209c565b85356119a26060880160408901612991565b6119af60608901896129ae565b6119bc60808b018b6129ae565b6119c68c35611d2d565b6040516020016119d8939291906129f5565b6040516020818303038152906040526040518863ffffffff1660e01b8152600401611a099796959493929190612a3e565b600060405180830381600087803b158015611a2357600080fd5b505af1158015611a37573d6000803e3d6000fd5b5050506001600160a01b038216600090815260c960209081526040808320805460ff1916600117905560ca9091529020839150611a748282612baa565b50508135600090815260cb60209081526040808320849390929091611a9e9190870190870161209c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316826020016020810190611aff919061209c565b6001600160a01b031683357f9e465b29e576a3e01584e31d607353f21b80c055e813af907c0a495f6cf4f7bc611b3860608701876129ae565b611b4560808901896129ae565b611b5560608b0160408c01612991565b604051611b66959493929190612c31565b60405180910390a4919050565b600054610100900460ff16611b9a5760405162461bcd60e51b81526004016106bb90612c6e565b610763611dc0565b600054610100900460ff16611bc95760405162461bcd60e51b81526004016106bb90612c6e565b610763611de7565b6001600160a01b038116611bf857604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b60606107478484600085611e17565b600083471015611c7b5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016106bb565b8151600003611ccc5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016106bb565b8282516020840186f590506001600160a01b03811661074a5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016106bb565b60606000611d3a83611ef4565b600101905060008167ffffffffffffffff811115611d5a57611d5a61234a565b6040519080825280601f01601f191660200182016040528015611d84576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611d8e57509392505050565b600054610100900460ff166116bf5760405162461bcd60e51b81526004016106bb90612c6e565b600054610100900460ff16611e0e5760405162461bcd60e51b81526004016106bb90612c6e565b61076333611792565b606082471015611e785760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bb565b600080866001600160a01b03168587604051611e949190612cb9565b60006040518083038185875af1925050503d8060008114611ed1576040519150601f19603f3d011682016040523d82523d6000602084013e611ed6565b606091505b5091509150611ee787838387611fcc565b925050505b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f335772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611f5f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611f7d57662386f26fc10000830492506010015b6305f5e1008310611f95576305f5e100830492506008015b6127108310611fa957612710830492506004015b60648310611fbb576064830492506002015b600a8310610c985760010192915050565b6060831561203b578251600003612034576001600160a01b0385163b6120345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bb565b5081611eec565b611eec83838151156120505781518083602001fd5b8060405162461bcd60e51b81526004016106bb9190612cd5565b6116ce80612ce983390190565b6001600160a01b038116811461154d57600080fd5b803561209781612077565b919050565b6000602082840312156120ae57600080fd5b813561074a81612077565b600080600080608085870312156120cf57600080fd5b843567ffffffffffffffff8111156120e657600080fd5b850160a081880312156120f857600080fd5b9350602085013561210881612077565b9250604085013561211881612077565b9396929550929360600135925050565b6000806040838503121561213b57600080fd5b82359150602083013561214d81612077565b809150509250929050565b801515811461154d57600080fd5b60008060006060848603121561217b57600080fd5b8335925060208401359150604084013561219481612158565b809150509250925092565b6000602082840312156121b157600080fd5b5035919050565b600080604083850312156121cb57600080fd5b82356121d681612077565b946020939093013593505050565b6000806000604084860312156121f957600080fd5b833567ffffffffffffffff8082111561221157600080fd5b908501906101a0828803121561222657600080fd5b9093506020850135908082111561223c57600080fd5b818601915086601f83011261225057600080fd5b81358181111561225f57600080fd5b87602082850101111561227157600080fd5b6020830194508093505050509250925092565b60005b8381101561229f578181015183820152602001612287565b50506000910152565b600081518084526122c0816020860160208601612284565b601f01601f19169290920160200192915050565b8581526001600160a01b038516602082015260ff8416604082015260a060608201819052600090612307908301856122a8565b828103608084015261231981856122a8565b98975050505050505050565b6000806040838503121561233857600080fd5b82359150602083013561214d81612158565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156123895761238961234a565b604052919050565b600067ffffffffffffffff8211156123ab576123ab61234a565b50601f01601f191660200190565b600080600080600080600080610100898b0312156123d657600080fd5b8835975060208901356123e881612077565b965060408901356123f881612077565b9550606089013594506080890135935060a0890135925060c089013561241d81612077565b915060e089013567ffffffffffffffff81111561243957600080fd5b8901601f81018b1361244a57600080fd5b803561245d61245882612391565b612360565b8181528c602083850101111561247257600080fd5b816020840160208301376000602083830101528093505050509295985092959890939650565b6000606082840312156124aa57600080fd5b6040516060810181811067ffffffffffffffff821117156124cd576124cd61234a565b6040528251815260208301516124e281612077565b60208201526040928301519281019290925250919050565b6000808335601e1984360301811261251157600080fd5b830160208101925035905067ffffffffffffffff81111561253157600080fd5b80360382131561254057600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081528135602082015260006125896020840161208c565b6001600160a01b03811660408401525060408301356060830152606083013560808301526125b96080840161208c565b6001600160a01b03811660a0840152506125d560a0840161208c565b6001600160a01b03811660c0840152506125f160c0840161208c565b6001600160a01b03811660e08401525061010060e08401358184015261012081850135818501526101409150808501358285015250610160818501358185015261263d818601866124fa565b925090506101a0610180818187015261265b6101c087018585612547565b9350612669818801886124fa565b878603601f19018489015293509050612683848483612547565b979650505050505050565b6000602082840312156126a057600080fd5b5051919050565b8481528360208201526060604082015260006126c7606083018486612547565b9695505050505050565b6000602082840312156126e357600080fd5b815161074a81612158565b600181811c9082168061270257607f821691505b60208210810361272257634e487b7160e01b600052602260045260246000fd5b50919050565b60ff8116811461154d57600080fd5b60006020828403121561274957600080fd5b815161074a81612728565b60006020828403121561276657600080fd5b815167ffffffffffffffff81111561277d57600080fd5b8201601f8101841361278e57600080fd5b805161279c61245882612391565b8181528560208385010111156127b157600080fd5b6127c2826020830160208601612284565b95945050505050565b81810381811115610c9857634e487b7160e01b600052601160045260246000fd5b60808152845160808201526000602086015160018060a01b0380821660a085015260ff60408901511660c08501526060880151915060a060e08501526128366101208501836122a8565b91506080880151607f198584030161010086015261285483826122a8565b9188166020860152506001600160a01b038616604085015291506128759050565b82606083015295945050505050565b6020815281516020820152600060208301516128ab60408401826001600160a01b03169052565b50604083015160608301526060830151608083015260808301516128da60a08401826001600160a01b03169052565b5060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610100838101919091528301516101208084019190915283015161014080840191909152830151610160808401919091528301516101a06101808085018290526129586101c08601846122a8565b90860151858203601f1901838701529092506126c783826122a8565b60006020828403121561298657600080fd5b815161074a81612077565b6000602082840312156129a357600080fd5b813561074a81612728565b6000808335601e198436030181126129c557600080fd5b83018035915067ffffffffffffffff8211156129e057600080fd5b60200191503681900382131561254057600080fd5b8284823760008382016b050c4e4d2c8cecac9e13f19160a31b81528351612a2381600c840160208801612284565b602960f81b600c9290910191820152600d0195945050505050565b6001600160a01b038881168252871660208201526040810186905260ff8516606082015260c060808201819052600090612a7b9083018587612547565b82810360a0840152612a8d81856122a8565b9a9950505050505050505050565b601f821115610b3257600081815260208120601f850160051c81016020861015612ac25750805b601f850160051c820191505b81811015612ae157828155600101612ace565b505050505050565b67ffffffffffffffff831115612b0157612b0161234a565b612b1583612b0f83546126ee565b83612a9b565b6000601f841160018114612b495760008515612b315750838201355b600019600387901b1c1916600186901b178355612ba3565b600083815260209020601f19861690835b82811015612b7a5786850135825560209485019460019092019101612b5a565b5086821015612b975760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81358155600181016020830135612bc081612077565b81546040850135612bd081612728565b60ff60a01b60a09190911b166001600160a01b03929092166001600160a81b03199190911617179055612c0660608301836129ae565b612c14818360028601612ae9565b5050612c2360808301836129ae565b61061c818360038601612ae9565b606081526000612c45606083018789612547565b8281036020840152612c58818688612547565b91505060ff831660408301529695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251612ccb818460208701612284565b9190910192915050565b602081526000610c9560208301846122a856fe608060405234801561001057600080fd5b506116ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636c6563f6116100c357806395d89b411161007c57806395d89b4114610305578063a457c2d71461030d578063a86f9d9e14610320578063a9059cbb14610333578063dd62ed3e14610346578063f2fde38b1461035957600080fd5b80636c6563f61461028a57806370a082311461029d578063715018a6146102c657806377be18a8146102ce5780637cf8ed0d146102e15780638da5cb5b146102f457600080fd5b8063395093511161011557806339509351146101ed5780633ab76e9f1461020057806342e91bb31461022557806349d126051461023857806367e828bf146102415780636c0db62b1461027757600080fd5b80630652b57a1461015d57806306fdde0314610172578063095ea7b31461019057806318160ddd146101b357806323b872dd146101c5578063313ce567146101d8575b600080fd5b61017061016b3660046111d3565b61036c565b005b61017a6103ef565b60405161018791906111f0565b60405180910390f35b6101a361019e36600461123e565b610481565b6040519015158152602001610187565b60cb545b604051908152602001610187565b6101a36101d336600461126a565b61049b565b60fd5460405160ff9091168152602001610187565b6101a36101fb36600461123e565b6104db565b6097546001600160a01b03165b6040516001600160a01b039091168152602001610187565b61017061023336600461123e565b6104fd565b6101b760fc5481565b61025860fb5460fc546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610187565b61017061028536600461134e565b61059a565b61020d61029836600461140d565b610740565b6101b76102ab3660046111d3565b6001600160a01b0316600090815260c9602052604090205490565b61017061074d565b6101706102dc36600461123e565b610761565b60fb5461020d906001600160a01b031681565b6065546001600160a01b031661020d565b61017a6107f1565b6101a361031b36600461123e565b610800565b61020d61032e366004611442565b610886565b6101a361034136600461123e565b610893565b6101b761035436600461146e565b6108c8565b6101706103673660046111d3565b6108f3565b61037461096c565b6001600160a01b03811661039b57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b606060cc80546103fe906114a7565b80601f016020809104026020016040519081016040528092919081815260200182805461042a906114a7565b80156104775780601f1061044c57610100808354040283529160200191610477565b820191906000526020600020905b81548152906001019060200180831161045a57829003601f168201915b5050505050905090565b60003361048f8185856109c6565b60019150505b92915050565b6000306001600160a01b038416036104c6576040516319a6f37760e21b815260040160405180910390fd5b6104d1848484610aeb565b90505b9392505050565b60003361048f8185856104ee83836108c8565b6104f891906114e1565b6109c6565b6a1d1bdad95b97dd985d5b1d60aa1b610517816000610886565b6001600160a01b0316336001600160a01b03161461054857604051630d85cccf60e11b815260040160405180910390fd5b6105528383610b04565b826001600160a01b03167f397b33b307fc137878ebfc75b295289ec0ee25a31bb5bf034f33256fe8ea2aa68360405161058d91815260200190565b60405180910390a2505050565b600054610100900460ff16158080156105ba5750600054600160ff909116105b806105d45750303b1580156105d4575060005460ff166001145b61063c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561065f576000805461ff0019166101001790555b6001600160a01b0386161580610673575084155b8061067d57504685145b8061068757508251155b8061069157508151155b156106af576040516301e25ab360e71b815260040160405180910390fd5b6106b887610bc6565b6106c28284610bdf565b60fb80546001600160a01b0319166001600160a01b03881617905560fc85905560fd805460ff191660ff86161790558015610737576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60006104d1848484610c10565b61075561096c565b61075f6000610cc4565b565b6a1d1bdad95b97dd985d5b1d60aa1b61077b816000610886565b6001600160a01b0316336001600160a01b0316146107ac57604051630d85cccf60e11b815260040160405180910390fd5b6107b68383610d16565b826001600160a01b03167f9b5b9a05e4726d8bb959f1440e05c6b8109443f2083bc4e386237d76545265538360405161058d91815260200190565b606060cd80546103fe906114a7565b6000338161080e82866108c8565b90508381101561086e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610633565b61087b82868684036109c6565b506001949350505050565b60006104d4468484610c10565b6000306001600160a01b038416036108be576040516319a6f37760e21b815260040160405180910390fd5b6104d48383610e47565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b6108fb61096c565b6001600160a01b0381166109605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610633565b61096981610cc4565b50565b6065546001600160a01b0316331461075f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610633565b6001600160a01b038316610a285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610633565b6001600160a01b038216610a895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610633565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600033610af9858285610e55565b61087b858585610ecf565b6001600160a01b038216610b5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610633565b8060cb6000828254610b6c91906114e1565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b610bce61107a565b610bd66110a9565b610969816110d8565b600054610100900460ff16610c065760405162461bcd60e51b815260040161063390611502565b610bc28282611121565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c85919061154d565b905081158015610c9c57506001600160a01b038116155b156104d457604051631467050360e21b81526004810185905260248101849052604401610633565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610d765760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610633565b6001600160a01b038216600090815260c9602052604090205481811015610dea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610633565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610ade565b505050565b60003361048f818585610ecf565b6000610e6184846108c8565b90506000198114610ec95781811015610ebc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610633565b610ec984848484036109c6565b50505050565b6001600160a01b038316610f335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610633565b6001600160a01b038216610f955760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610633565b6001600160a01b038316600090815260c960205260409020548181101561100d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610633565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061106d9086815260200190565b60405180910390a3610ec9565b600054610100900460ff166110a15760405162461bcd60e51b815260040161063390611502565b61075f611161565b600054610100900460ff166110d05760405162461bcd60e51b815260040161063390611502565b61075f61118e565b6001600160a01b0381166110ff57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166111485760405162461bcd60e51b815260040161063390611502565b60cc61115483826115b8565b5060cd610e4282826115b8565b600054610100900460ff166111885760405162461bcd60e51b815260040161063390611502565b60018055565b600054610100900460ff166111b55760405162461bcd60e51b815260040161063390611502565b61075f33610cc4565b6001600160a01b038116811461096957600080fd5b6000602082840312156111e557600080fd5b81356104d4816111be565b600060208083528351808285015260005b8181101561121d57858101830151858201604001528201611201565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561125157600080fd5b823561125c816111be565b946020939093013593505050565b60008060006060848603121561127f57600080fd5b833561128a816111be565b9250602084013561129a816111be565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126112d257600080fd5b813567ffffffffffffffff808211156112ed576112ed6112ab565b604051601f8301601f19908116603f01168101908282118183101715611315576113156112ab565b8160405283815286602085880101111561132e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561136757600080fd5b8635611372816111be565b95506020870135611382816111be565b945060408701359350606087013560ff8116811461139f57600080fd5b9250608087013567ffffffffffffffff808211156113bc57600080fd5b6113c88a838b016112c1565b935060a08901359150808211156113de57600080fd5b506113eb89828a016112c1565b9150509295509295509295565b8035801515811461140857600080fd5b919050565b60008060006060848603121561142257600080fd5b8335925060208401359150611439604085016113f8565b90509250925092565b6000806040838503121561145557600080fd5b82359150611465602084016113f8565b90509250929050565b6000806040838503121561148157600080fd5b823561148c816111be565b9150602083013561149c816111be565b809150509250929050565b600181811c908216806114bb57607f821691505b6020821081036114db57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561049557634e487b7160e01b600052601160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561155f57600080fd5b81516104d4816111be565b601f821115610e4257600081815260208120601f850160051c810160208610156115915750805b601f850160051c820191505b818110156115b05782815560010161159d565b505050505050565b815167ffffffffffffffff8111156115d2576115d26112ab565b6115e6816115e084546114a7565b8461156a565b602080601f83116001811461161b57600084156116035750858301515b600019600386901b1c1916600185901b1785556115b0565b600085815260208120601f198616915b8281101561164a5788860151825594840194600190910190840161162b565b50858210156116685787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122085a2aff2862debaa7c862110ce3109a1e3c4cb4105c4103709cdda64664d10b964736f6c63430008120033a264697066735822122036ae8b9ef1628787bd6bb607096988472ce916653d4ed187813f809cf046e70e64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000002": {
+    "contractName": "TokenVaultProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000002"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000003": {
+    "contractName": "ProxiedEtherVault",
+    "storage": {},
+    "code": "0x6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101c0578063a86f9d9e146101de578063ba0bbd95146101fe578063d73bb3d01461021e578063f2fde38b1461023e578063fe9fbb801461025e57600080fd5b80630652b57a146100f457806319ab453c146101145780632d1fb389146101345780633ab76e9f146101545780636c6563f61461018b578063715018a6146101ab57600080fd5b366100ef5747158015906100cf575033600090815260c9602052604090205460ff16155b156100ed57604051634fa3f24560e01b815260040160405180910390fd5b005b600080fd5b34801561010057600080fd5b506100ed61010f366004610a90565b6102a7565b34801561012057600080fd5b506100ed61012f366004610a90565b61032a565b34801561014057600080fd5b506100ed61014f366004610ac2565b610442565b34801561016057600080fd5b506097546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019757600080fd5b5061016e6101a6366004610af7565b6104fb565b3480156101b757600080fd5b506100ed610512565b3480156101cc57600080fd5b506065546001600160a01b031661016e565b3480156101ea57600080fd5b5061016e6101f9366004610b2c565b610526565b34801561020a57600080fd5b506100ed610219366004610b4f565b610533565b34801561022a57600080fd5b506100ed610239366004610b7b565b6105f1565b34801561024a57600080fd5b506100ed610259366004610a90565b610674565b34801561026a57600080fd5b50610297610279366004610a90565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6040519015158152602001610182565b6102af6106ea565b6001600160a01b0381166102d657604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b600054610100900460ff161580801561034a5750600054600160ff909116105b806103645750303b158015610364575060005460ff166001145b6103cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103ef576000805461ff0019166101001790555b6103f882610744565b801561043e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61044a6106ea565b6001600160a01b038216158061047e57506001600160a01b038216600090815260c9602052604090205460ff161515811515145b1561049c57604051631bebdfa760e21b815260040160405180910390fd5b6001600160a01b038216600081815260c96020908152604091829020805460ff191685151590811790915591519182527f4c0079b9bcd37cd5d29a13938effd97c881798cbc6bd52a3026a29d94b27d1bf910160405180910390a25050565b600061050884848461075d565b90505b9392505050565b61051a6106ea565b6105246000610811565b565b600061050b46848461075d565b33600090815260c9602052604090205460ff1661056357604051634fa3f24560e01b815260040160405180910390fd5b61056b610863565b6001600160a01b0382166105925760405163687563df60e01b815260040160405180910390fd5b6105a56001600160a01b038316826108bc565b816001600160a01b03167f7b9f77d35803cd201eac9c4ed739bc1fcd3f1be6ab8877d925d1e55517b6fd6e826040516105e091815260200190565b60405180910390a261043e60018055565b33600090815260c9602052604090205460ff1661062157604051634fa3f24560e01b815260040160405180910390fd5b610629610863565b61063333826108bc565b60405181815233907f7b9f77d35803cd201eac9c4ed739bc1fcd3f1be6ab8877d925d1e55517b6fd6e9060200160405180910390a261067160018055565b50565b61067c6106ea565b6001600160a01b0381166106e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c3565b61067181610811565b6065546001600160a01b031633146105245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b61074c61097d565b6107546109ac565b610671816109db565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190610b94565b9050811580156107e957506001600160a01b038116155b1561050b57604051631467050360e21b815260048101859052602481018490526044016103c3565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600154036108b55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103c3565b6002600155565b8015806108d057506001600160a01b038216155b156108d9575050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50509050806109725760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016103c3565b505050565b60018055565b600054610100900460ff166109a45760405162461bcd60e51b81526004016103c390610bb1565b610524610a24565b600054610100900460ff166109d35760405162461bcd60e51b81526004016103c390610bb1565b610524610a4b565b6001600160a01b038116610a0257604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166109775760405162461bcd60e51b81526004016103c390610bb1565b600054610100900460ff16610a725760405162461bcd60e51b81526004016103c390610bb1565b61052433610811565b6001600160a01b038116811461067157600080fd5b600060208284031215610aa257600080fd5b813561050b81610a7b565b80358015158114610abd57600080fd5b919050565b60008060408385031215610ad557600080fd5b8235610ae081610a7b565b9150610aee60208401610aad565b90509250929050565b600080600060608486031215610b0c57600080fd5b8335925060208401359150610b2360408501610aad565b90509250925092565b60008060408385031215610b3f57600080fd5b82359150610aee60208401610aad565b60008060408385031215610b6257600080fd5b8235610b6d81610a7b565b946020939093013593505050565b600060208284031215610b8d57600080fd5b5035919050565b600060208284031215610ba657600080fd5b815161050b81610a7b565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122049cb2e6dad63489f4d9d67f77ba46c7e92a53b49db8efd320c9e1f6c0a76803464736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000003": {
+    "contractName": "EtherVaultProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xa738d3397c1eb96f671d7e4bd29cabbfa1a9c9ebc0db4142aee17809c43ab720": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000003"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0xfffffffffcb0f721bf16ac40dfffffff"
+  },
+  "0x0000777700000000000000000000000000000007": {
+    "contractName": "ProxiedSignalService",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80636c6563f6116100715780636c6563f614610162578063715018a6146101755780638da5cb5b1461017d578063a86f9d9e1461018e578063f2fde38b146101a1578063f8f3f844146101b457600080fd5b80630652b57a146100b957806319ab453c146100ce57806332676bc6146100e15780633ab76e9f146101095780635221f6131461012e57806366ca2bc014610141575b600080fd5b6100cc6100c7366004611a1b565b6101e0565b005b6100cc6100dc366004611a1b565b610263565b6100f46100ef366004611a38565b61037b565b60405190151581526020015b60405180910390f35b6097546001600160a01b03165b6040516001600160a01b039091168152602001610100565b6100f461013c366004611a64565b6103ed565b61015461014f366004611afa565b610560565b604051908152602001610100565b610116610170366004611b28565b6105a5565b6100cc6105bc565b6065546001600160a01b0316610116565b61011661019c366004611b5d565b6105d0565b6100cc6101af366004611a1b565b6105dd565b6101546101c2366004611a38565b6040805192835260208301919091526034600c830120918101905290565b6101e8610656565b6001600160a01b03811661020f57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b600054610100900460ff16158080156102835750600054600160ff909116105b8061029d5750303b15801561029d575060005460ff166001145b6103055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610328576000805461ff0019166101001790555b610331826106b0565b8015610377576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006001600160a01b0383166103a4576040516354cdfc8d60e11b815260040160405180910390fd5b60008290036103c65760405163014f1da760e21b815260040160405180910390fd5b5060408051838152602081018390526034600c820120908201909152546001145b92915050565b600046860361040f5760405163e822b48d60e01b815260040160405180910390fd5b6001600160a01b038516610436576040516354cdfc8d60e11b815260040160405180910390fd5b60008490036104585760405163014f1da760e21b815260040160405180910390fd5b600061046683850185611bf9565b90506000610480676d78637a6b65766d60c01b60006105d0565b8251604051632e24533960e21b81526001600160a01b03929092169163b8914ce4916104b29160040190815260200190565b602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611cc0565b60408051898152602081018990526034600c820120818301909252606081019190915290915061055490608001604051602081830303815290604052604051806040016040528060018152602001600160f81b8152508460200151846106c9565b98975050505050505050565b60008181036105825760405163014f1da760e21b815260040160405180910390fd5b506040805133815260208101929092526034600c83012091810190526001815590565b60006105b28484846106ed565b90505b9392505050565b6105c4610656565b6105ce60006107a1565b565b60006105b54684846106ed565b6105e5610656565b6001600160a01b03811661064a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fc565b610653816107a1565b50565b6065546001600160a01b031633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fc565b6106b86107f3565b6106c0610822565b61065381610851565b6000806106d58661089a565b90506106e3818686866108cc565b9695505050505050565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190611cd9565b90508115801561077957506001600160a01b038116155b156105b557604051631467050360e21b815260048101859052602481018490526044016102fc565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661081a5760405162461bcd60e51b81526004016102fc90611cf6565b6105ce610909565b600054610100900460ff166108495760405162461bcd60e51b81526004016102fc90611cf6565b6105ce610936565b6001600160a01b03811661087857604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b606081805190602001206040516020016108b691815260200190565b6040516020818303038152906040529050919050565b60008060006108dc878686610966565b915091508180156108fe57508051602080830191909120875191880191909120145b979650505050505050565b600054610100900460ff166109305760405162461bcd60e51b81526004016102fc90611cf6565b60018055565b600054610100900460ff1661095d5760405162461bcd60e51b81526004016102fc90611cf6565b6105ce336107a1565b60006060600061097585610a41565b90506000806000610987848a89610b3a565b8151929550909350915015808061099b5750815b6109e75760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e00000000000060448201526064016102fc565b600081610a035760405180602001604052806000815250610a2f565b610a2f86610a12600188611d57565b81518110610a2257610a22611d6a565b6020026020010151610f5a565b919b919a509098505050505050505050565b60606000610a4e83610f81565b90506000815167ffffffffffffffff811115610a6c57610a6c611b89565b604051908082528060200260200182016040528015610ab157816020015b6040805180820190915260608082526020820152815260200190600190039081610a8a5790505b50905060005b8251811015610b32576000610ae4848381518110610ad757610ad7611d6a565b6020026020010151610fb4565b90506040518060400160405280610afa83610f81565b815260200182815250838381518110610b1557610b15611d6a565b60200260200101819052505080610b2b90611d80565b9050610ab7565b509392505050565b600060606000806000610b4c87611044565b90506000869050600080610b73604051806040016040528060608152602001606081525090565b60005b8c51811015610f32578c8181518110610b9157610b91611d6a565b602002602001015191508284610ba79190611d99565b9350610bb4600188611d99565b965083600003610c11578482602001518051906020012014610c0c5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b60448201526064016102fc565b610cd3565b602082602001515110610c78578482602001518051906020012014610c0c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c2068617368000000000060448201526064016102fc565b84610c86836020015161117d565b14610cd35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f6465206861736800000000000060448201526064016102fc565b610cdf60106001611dac565b60ff1682600001515103610d4d5785518414610f32576000868581518110610d0957610d09611d6a565b01602001518351805160f89290921c925060009183908110610d2d57610d2d611d6a565b60200260200101519050610d40816111a5565b9650600194505050610f22565b81515160011901610eda576000610d63836111db565b9050600081600081518110610d7a57610d7a611d6a565b016020015160f81c90506000610d91600283611dc5565b610d9c906002611df5565b90506000610dad848360ff166111ff565b90506000610dbb8b8a6111ff565b90506000610dc98383611235565b905060ff851660021480610de0575060ff85166003145b15610e1a57808351148015610df55750808251145b15610e0757610e04818b611d99565b99505b50600160ff1b9950610f32945050505050565b60ff85161580610e2d575060ff85166001145b15610e835782518114610e4d5750600160ff1b9950610f32945050505050565b610e748860000151600181518110610e6757610e67611d6a565b60200260200101516111a5565b9a509750610f22945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b60648201526084016102fc565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e00000060448201526064016102fc565b610f2b81611d80565b9050610b76565b50600160ff1b841486610f4587866111ff565b909e909d50909b509950505050505050505050565b805180516060916103e791610f7190600190611d57565b81518110610ad757610ad7611d6a565b6040805180820182526000808252602091820152815180830190925282518252808301908201526060906103e7906112af565b60606000806000610fc48561149b565b919450925090506000816001811115610fdf57610fdf611e0e565b1461102c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e000000000000000060448201526064016102fc565b61103b856020015184846117e5565b95945050505050565b60606000825160026110569190611e24565b67ffffffffffffffff81111561106e5761106e611b89565b6040519080825280601f01601f191660200182016040528015611098576020820181803683370190505b50905060005b83518110156111765760048482815181106110bb576110bb611d6a565b01602001516001600160f81b031916901c826110d8836002611e24565b815181106110e8576110e8611d6a565b60200101906001600160f81b031916908160001a905350601084828151811061111357611113611d6a565b0160200151611125919060f81c611dc5565b60f81b82611134836002611e24565b61113f906001611d99565b8151811061114f5761114f611d6a565b60200101906001600160f81b031916908160001a90535061116f81611d80565b905061109e565b5092915050565b600060208251101561119157506020015190565b818060200190518101906103e79190611cc0565b600060606020836000015110156111c6576111bf8361188e565b90506111d2565b6111cf83610fb4565b90505b6105b58161117d565b60606103e76111fa8360000151600081518110610ad757610ad7611d6a565b611044565b60608251821061121e57506040805160208101909152600081526103e7565b6105b583838486516112309190611d57565b611899565b6000805b8084511180156112495750808351115b801561129a575082818151811061126257611262611d6a565b602001015160f81c60f81b6001600160f81b03191684828151811061128957611289611d6a565b01602001516001600160f81b031916145b156105b5576112a881611d80565b9050611239565b60606000806112bd8461149b565b919350909150600190508160018111156112d9576112d9611e0e565b146113265760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e00000000000000000060448201526064016102fc565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161133f5790505090506000835b865181101561149057602082106113d85760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b60648201526084016102fc565b6000806114156040518060400160405280858c600001516113f99190611d57565b8152602001858c6020015161140e9190611d99565b905261149b565b5091509150604051806040016040528083836114319190611d99565b8152602001848b602001516114469190611d99565b81525085858151811061145b5761145b611d6a565b6020908102919091010152611471600185611d99565b935061147d8183611d99565b6114879084611d99565b9250505061136c565b508152949350505050565b6000806000808460000151116114f35760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e000000000000000060448201526064016102fc565b6020840151805160001a607f81116115185760006001600094509450945050506117de565b60b7811161159457600061152d608083611d57565b9050808760000151116115825760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e0000000000000060448201526064016102fc565b600195509350600092506117de915050565b60bf81116116835760006115a960b783611d57565b9050808760000151116115fe5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e0060448201526064016102fc565b600183015160208290036101000a90046116188183611d99565b8851116116675760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e000000000000000060448201526064016102fc565b611672826001611d99565b96509450600093506117de92505050565b60f781116116fe57600061169860c083611d57565b9050808760000151116116ed5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e00000000000000000060448201526064016102fc565b6001955093508492506117de915050565b600061170b60f783611d57565b9050808760000151116117605760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e00000060448201526064016102fc565b600183015160208290036101000a900461177a8183611d99565b8851116117c25760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b60448201526064016102fc565b6117cd826001611d99565b96509450600193506117de92505050565b9193909250565b606060008267ffffffffffffffff81111561180257611802611b89565b6040519080825280601f01601f19166020018201604052801561182c576020820181803683370190505b509050805160000361183f5790506105b5565b8484016020820160005b85811015611861578281015182820152602001611849565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b60606103e7826119f0565b6060816118a781601f611d99565b10156118e65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102fc565b826118f18382611d99565b10156119305760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102fc565b61193a8284611d99565b8451101561197e5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016102fc565b60608215801561199d57604051915060008252602082016040526119e7565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156119d65780518352602092830192016119be565b5050858452601f01601f1916604052505b50949350505050565b60606103e78260200151600084600001516117e5565b6001600160a01b038116811461065357600080fd5b600060208284031215611a2d57600080fd5b81356105b581611a06565b60008060408385031215611a4b57600080fd5b8235611a5681611a06565b946020939093013593505050565b600080600080600060808688031215611a7c57600080fd5b853594506020860135611a8e81611a06565b935060408601359250606086013567ffffffffffffffff80821115611ab257600080fd5b818801915088601f830112611ac657600080fd5b813581811115611ad557600080fd5b896020828501011115611ae757600080fd5b9699959850939650602001949392505050565b600060208284031215611b0c57600080fd5b5035919050565b80358015158114611b2357600080fd5b919050565b600080600060608486031215611b3d57600080fd5b8335925060208401359150611b5460408501611b13565b90509250925092565b60008060408385031215611b7057600080fd5b82359150611b8060208401611b13565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611bc257611bc2611b89565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bf157611bf1611b89565b604052919050565b60006020808385031215611c0c57600080fd5b823567ffffffffffffffff80821115611c2457600080fd5b9084019060408287031215611c3857600080fd5b611c40611b9f565b823581528383013582811115611c5557600080fd5b80840193505086601f840112611c6a57600080fd5b823582811115611c7c57611c7c611b89565b611c8e601f8201601f19168601611bc8565b92508083528785828601011115611ca457600080fd5b8085850186850137600090830185015292830152509392505050565b600060208284031215611cd257600080fd5b5051919050565b600060208284031215611ceb57600080fd5b81516105b581611a06565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103e7576103e7611d41565b634e487b7160e01b600052603260045260246000fd5b600060018201611d9257611d92611d41565b5060010190565b808201808211156103e7576103e7611d41565b60ff81811683821601908111156103e7576103e7611d41565b600060ff831680611de657634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff82811682821603908111156103e7576103e7611d41565b634e487b7160e01b600052602160045260246000fd5b80820281158282048414176103e7576103e7611d4156fea2646970667358221220f2e645db4b28a1bf9cd156dea909421b55d70b1f5bf74f94e5e4d24672e3179564736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000007": {
+    "contractName": "SignalServiceProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000007"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000001": {
+    "contractName": "Placeholder1Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000002": {
+    "contractName": "Placeholder2Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000003": {
+    "contractName": "Placeholder3Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000004": {
+    "contractName": "Placeholder4Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000005": {
+    "contractName": "Placeholder5Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000006": {
+    "contractName": "Placeholder6Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000007": {
+    "contractName": "Placeholder7Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000008": {
+    "contractName": "Placeholder8Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000009": {
+    "contractName": "Placeholder9Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000005": {
+    "contractName": "RegularERC20",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000003": "0x526567756c617245524332300000000000000000000000000000000000000018",
+      "0x0000000000000000000000000000000000000000000000000000000000000004": "0x52474c0000000000000000000000000000000000000000000000000000000006",
+      "0x0000000000000000000000000000000000000000000000000000000000000002": "0x00000000000000000000000000000000000000000000000000000000002ee000",
+      "0x4e880ea9fbb4022d750e64ee99c5d03663337ad951989e938a3ae2420b4ab64e": "0x00000000000000000000000000000000000000000000000000000000000fa000",
+      "0x9f212623c87f9ee0f1db43a8af1e683d6b2ab852dad6a569ffce3b55b16e3020": "0x00000000000000000000000000000000000000000000000000000000000fa000",
+      "0xf07e3ee5ae2c3e48baa549b219fcb3bb667aca3ba790f4d223650663ccf69b6f": "0x00000000000000000000000000000000000000000000000000000000000fa000"
+    },
+    "code": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061069c565b60405180910390f35b6100df6100da366004610706565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610730565b61024c565b604051601281526020016100c3565b6100df610131366004610706565b610270565b6100f361014436600461076c565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610706565b6102a1565b6100df610188366004610706565b610321565b6100f361019b36600461078e565b61032f565b6060600380546101af906107c1565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c1565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d91906107fb565b61035a565b6060600480546101af906107c1565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104f2565b600060208083528351808285015260005b818110156106c9578581018301518582016040015282016106ad565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070157600080fd5b919050565b6000806040838503121561071957600080fd5b610722836106ea565b946020939093013593505050565b60008060006060848603121561074557600080fd5b61074e846106ea565b925061075c602085016106ea565b9150604084013590509250925092565b60006020828403121561077e57600080fd5b610787826106ea565b9392505050565b600080604083850312156107a157600080fd5b6107aa836106ea565b91506107b8602084016106ea565b90509250929050565b600181811c908216806107d557607f821691505b6020821081036107f557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea26469706673582212201fe15079f7774ec8d0ed5b2c6cad746e9907ab9df007c7df3b830b71672fc03964736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0xF35626227F81aC7A059b895701F31EEF2f9d788b": {
+    "contractName": "Create2Factory",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638129fc1c1461003b578063a326ea2714610045575b600080fd5b610043610074565b005b6100586100533660046101f4565b610181565b6040516001600160a01b03909116815260200160405180910390f35b600054610100900460ff16158080156100945750600054600160ff909116105b806100ae5750303b1580156100ae575060005460ff166001145b6101155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015610138576000805461ff0019166101001790555b801561017e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600080838351602085016000f59050803b61019b57600080fd5b6040516001600160a01b03821681527fcf78cf0d6f3d8371e1075c69c492ab4ec5d8cf23a1a239b6a51a1d00be7ca3129060200160405180910390a19392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561020757600080fd5b82359150602083013567ffffffffffffffff8082111561022657600080fd5b818501915085601f83011261023a57600080fd5b81358181111561024c5761024c6101de565b604051601f8201601f19908116603f01168101908382118183101715610274576102746101de565b8160405282815288602084870101111561028d57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea264697066735822122032822a0722a7644f1f28c3685363a5a3e95cacf8a643ae703e21e965abbcd86664736f6c63430008120033",
+    "balance": "0x0"
+  }
+}
\ No newline at end of file
diff --git a/mxc-geth/core/mxc_genesis/wannsee.json b/mxc-geth/core/mxc_genesis/wannsee.json
new file mode 100644
index 0000000..3839241
--- /dev/null
+++ b/mxc-geth/core/mxc_genesis/wannsee.json
@@ -0,0 +1,253 @@
+{
+  "0x0000777735367b36bC9B61C50022d9D0700dB4Ec": {
+    "balance": "0x3782dace9d90000000"
+  },
+  "0x5D9f59F49B5E5C83c1776c5ADD039a3C955d3B02": {
+    "balance": "0x3782dace9d90000000"
+  },
+  "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73": {
+    "balance": "0x034f086f3b33b68400000000"
+  },
+  "0x90829E54b05DA2A66B63Bed13B8C65c77A89F699": {
+    "contractName": "LibTrieProof",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063a54274621461003a575b600080fd5b61004d61004836600461173e565b610061565b604051901515815260200160405180910390f35b600080806100718486018661188e565b6040516bffffffffffffffffffffffff1960608c901b166020820152919350915060009081906100b490603401604051602081830303815290604052858d610184565b915091508161010a5760405162461bcd60e51b815260206004820152601960248201527f4c54503a696e76616c6964206163636f756e742070726f6f660000000000000060448201526064015b60405180910390fd5b6000610115826101ad565b9050600061013c8260028151811061012f5761012f6118f2565b60200260200101516101e6565b90506101738b60405160200161015491815260200190565b60405160208183030381529060405261016c8c6102e9565b87846102fc565b9d9c50505050505050505050505050565b60006060600061019386610316565b90506101a0818686610348565b9250925050935093915050565b6040805180820182526000808252602091820152815180830190925282518252808301908201526060906101e090610423565b92915050565b600060218260000151111561023d5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e0000000000006044820152606401610101565b600080600061024b8561060f565b91945092509050600081600181111561026657610266611908565b146102b35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420524c5020627974657333322076616c75652e0000000000006044820152606401610101565b60008386602001516102c59190611934565b805190915060208410156102df5760208490036101000a90045b9695505050505050565b60606101e06102f783610959565b610a8d565b60008061030886610316565b90506102df81868686610afc565b6060818051906020012060405160200161033291815260200190565b6040516020818303038152906040529050919050565b60006060600061035785610b39565b90506000806000610369848a89610c32565b8151929550909350915015808061037d5750815b6103c95760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e0000000000006044820152606401610101565b6000816103e55760405180602001604052806000815250610411565b610411866103f4600188611947565b81518110610404576104046118f2565b6020026020010151611052565b919b919a509098505050505050505050565b60606000806104318461060f565b9193509091506001905081600181111561044d5761044d611908565b1461049a5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e0000000000000000006044820152606401610101565b6040805160208082526104208201909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816104b35790505090506000835b8651811015610604576020821061054c5760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b6064820152608401610101565b6000806105896040518060400160405280858c6000015161056d9190611947565b8152602001858c602001516105829190611934565b905261060f565b5091509150604051806040016040528083836105a59190611934565b8152602001848b602001516105ba9190611934565b8152508585815181106105cf576105cf6118f2565b60209081029190910101526105e5600185611934565b93506105f18183611934565b6105fb9084611934565b925050506104e0565b508152949350505050565b6000806000808460000151116106675760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e00000000000000006044820152606401610101565b6020840151805160001a607f811161068c576000600160009450945094505050610952565b60b781116107085760006106a1608083611947565b9050808760000151116106f65760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e000000000000006044820152606401610101565b60019550935060009250610952915050565b60bf81116107f757600061071d60b783611947565b9050808760000151116107725760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e006044820152606401610101565b600183015160208290036101000a900461078c8183611934565b8851116107db5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e00000000000000006044820152606401610101565b6107e6826001611934565b965094506000935061095292505050565b60f7811161087257600061080c60c083611947565b9050808760000151116108615760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e0000000000000000006044820152606401610101565b600195509350849250610952915050565b600061087f60f783611947565b9050808760000151116108d45760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e0000006044820152606401610101565b600183015160208290036101000a90046108ee8183611934565b8851116109365760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b6044820152606401610101565b610941826001611934565b965094506001935061095292505050565b9193909250565b606060008260405160200161097091815260200190565b604051602081830303815290604052905060005b60208110156109c55781818151811061099f5761099f6118f2565b01602001516001600160f81b0319166000036109c5576109be8161195a565b9050610984565b60006109d2826020611947565b67ffffffffffffffff8111156109ea576109ea6117eb565b6040519080825280601f01601f191660200182016040528015610a14576020820181803683370190505b50905060005b8151811015610a84578383610a2e8161195a565b945081518110610a4057610a406118f2565b602001015160f81c60f81b828281518110610a5d57610a5d6118f2565b60200101906001600160f81b031916908160001a905350610a7d8161195a565b9050610a1a565b50949350505050565b60608082516001148015610abb5750608083600081518110610ab157610ab16118f2565b016020015160f81c105b15610ac75750816101e0565b610ad383516080611079565b83604051602001610ae59291906119a3565b604051602081830303815290604052905092915050565b6000806000610b0c878686610348565b91509150818015610b2e57508051602080830191909120875191880191909120145b979650505050505050565b60606000610b46836101ad565b90506000815167ffffffffffffffff811115610b6457610b646117eb565b604051908082528060200260200182016040528015610ba957816020015b6040805180820190915260608082526020820152815260200190600190039081610b825790505b50905060005b8251811015610c2a576000610bdc848381518110610bcf57610bcf6118f2565b6020026020010151611223565b90506040518060400160405280610bf2836101ad565b815260200182815250838381518110610c0d57610c0d6118f2565b60200260200101819052505080610c239061195a565b9050610baf565b509392505050565b600060606000806000610c44876112b3565b90506000869050600080610c6b604051806040016040528060608152602001606081525090565b60005b8c5181101561102a578c8181518110610c8957610c896118f2565b602002602001015191508284610c9f9190611934565b9350610cac600188611934565b965083600003610d09578482602001518051906020012014610d045760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b6044820152606401610101565b610dcb565b602082602001515110610d70578482602001518051906020012014610d045760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c206861736800000000006044820152606401610101565b84610d7e83602001516113ec565b14610dcb5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f646520686173680000000000006044820152606401610101565b610dd7601060016119c0565b60ff1682600001515103610e45578551841461102a576000868581518110610e0157610e016118f2565b01602001518351805160f89290921c925060009183908110610e2557610e256118f2565b60200260200101519050610e3881611414565b965060019450505061101a565b81515160011901610fd2576000610e5b8361144a565b9050600081600081518110610e7257610e726118f2565b016020015160f81c90506000610e896002836119ef565b610e94906002611a11565b90506000610ea5848360ff1661146e565b90506000610eb38b8a61146e565b90506000610ec183836114a4565b905060ff851660021480610ed8575060ff85166003145b15610f1257808351148015610eed5750808251145b15610eff57610efc818b611934565b99505b50600160ff1b995061102a945050505050565b60ff85161580610f25575060ff85166001145b15610f7b5782518114610f455750600160ff1b995061102a945050505050565b610f6c8860000151600181518110610f5f57610f5f6118f2565b6020026020010151611414565b9a50975061101a945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b6064820152608401610101565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e0000006044820152606401610101565b6110238161195a565b9050610c6e565b50600160ff1b84148661103d878661146e565b909e909d50909b509950505050505050505050565b805180516060916101e09161106990600190611947565b81518110610bcf57610bcf6118f2565b60608060388410156110e057604080516001808252818301909252906020820181803683370190505090506110ae83856119c0565b60f81b816000815181106110c4576110c46118f2565b60200101906001600160f81b031916908160001a90535061121c565b600060015b6110ef8187611a2a565b15611112576110fd8261195a565b915061110b61010082611a3e565b90506110e5565b61111d826001611934565b67ffffffffffffffff811115611135576111356117eb565b6040519080825280601f01601f19166020018201604052801561115f576020820181803683370190505b50925061116c85836119c0565b6111779060376119c0565b60f81b8360008151811061118d5761118d6118f2565b60200101906001600160f81b031916908160001a905350600190505b818111611219576101006111bd8284611947565b6111c990610100611b39565b6111d39088611a2a565b6111dd9190611b45565b60f81b8382815181106111f2576111f26118f2565b60200101906001600160f81b031916908160001a9053506112128161195a565b90506111a9565b50505b9392505050565b606060008060006112338561060f565b91945092509050600081600181111561124e5761124e611908565b1461129b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e00000000000000006044820152606401610101565b6112aa8560200151848461151e565b95945050505050565b60606000825160026112c59190611a3e565b67ffffffffffffffff8111156112dd576112dd6117eb565b6040519080825280601f01601f191660200182016040528015611307576020820181803683370190505b50905060005b83518110156113e557600484828151811061132a5761132a6118f2565b01602001516001600160f81b031916901c82611347836002611a3e565b81518110611357576113576118f2565b60200101906001600160f81b031916908160001a9053506010848281518110611382576113826118f2565b0160200151611394919060f81c6119ef565b60f81b826113a3836002611a3e565b6113ae906001611934565b815181106113be576113be6118f2565b60200101906001600160f81b031916908160001a9053506113de8161195a565b905061130d565b5092915050565b600060208251101561140057506020015190565b818060200190518101906101e09190611b59565b600060606020836000015110156114355761142e836115c7565b9050611441565b61143e83611223565b90505b61121c816113ec565b60606101e06114698360000151600081518110610bcf57610bcf6118f2565b6112b3565b60608251821061148d57506040805160208101909152600081526101e0565b61121c838384865161149f9190611947565b6115d2565b6000805b8084511180156114b85750808351115b801561150957508281815181106114d1576114d16118f2565b602001015160f81c60f81b6001600160f81b0319168482815181106114f8576114f86118f2565b01602001516001600160f81b031916145b1561121c576115178161195a565b90506114a8565b606060008267ffffffffffffffff81111561153b5761153b6117eb565b6040519080825280601f01601f191660200182016040528015611565576020820181803683370190505b509050805160000361157857905061121c565b8484016020820160005b8581101561159a578281015182820152602001611582565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b60606101e082611728565b6060816115e081601f611934565b101561161f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610101565b8261162a8382611934565b10156116695760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b6044820152606401610101565b6116738284611934565b845110156116b75760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606401610101565b6060821580156116d65760405191506000825260208201604052610a84565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561170f5780518352602092830192016116f7565b5050858452601f01601f19166040525050949350505050565b60606101e082602001516000846000015161151e565b60008060008060008060a0878903121561175757600080fd5b8635955060208701356001600160a01b038116811461177557600080fd5b94506040870135935060608701359250608087013567ffffffffffffffff808211156117a057600080fd5b818901915089601f8301126117b457600080fd5b8135818111156117c357600080fd5b8a60208285010111156117d557600080fd5b6020830194508093505050509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261181257600080fd5b813567ffffffffffffffff8082111561182d5761182d6117eb565b604051601f8301601f19908116603f01168101908282118183101715611855576118556117eb565b8160405283815286602085880101111561186e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156118a157600080fd5b823567ffffffffffffffff808211156118b957600080fd5b6118c586838701611801565b935060208501359150808211156118db57600080fd5b506118e885828601611801565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156101e0576101e061191e565b818103818111156101e0576101e061191e565b60006001820161196c5761196c61191e565b5060010190565b6000815160005b81811015611994576020818501810151868301520161197a565b50600093019283525090919050565b60006119b86119b28386611973565b84611973565b949350505050565b60ff81811683821601908111156101e0576101e061191e565b634e487b7160e01b600052601260045260246000fd5b600060ff831680611a0257611a026119d9565b8060ff84160691505092915050565b60ff82811682821603908111156101e0576101e061191e565b600082611a3957611a396119d9565b500490565b80820281158282048414176101e0576101e061191e565b600181815b80851115611a90578160001904821115611a7657611a7661191e565b80851615611a8357918102915b93841c9390800290611a5a565b509250929050565b600082611aa7575060016101e0565b81611ab4575060006101e0565b8160018114611aca5760028114611ad457611af0565b60019150506101e0565b60ff841115611ae557611ae561191e565b50506001821b6101e0565b5060208310610133831016604e8410600b8410161715611b13575081810a6101e0565b611b1d8383611a55565b8060001904821115611b3157611b3161191e565b029392505050565b600061121c8383611a98565b600082611b5457611b546119d9565b500690565b600060208284031215611b6b57600080fd5b505191905056fea2646970667358221220e88f838c18fa0822c41979ec7b8bb8dbfb8821150341cba428e6658896dc0a4064736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x839062626B7F5ca761626A7F4fF99ADEec50Ff08": {
+    "contractName": "LibBridgeRetry",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208131916ec27759025168eec30f2fc386bc13a39f95f8719ab505f2302ad1fbd964736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x53579AB128C256FE2ccBDC79b24EdB0Aa38e4c4B": {
+    "contractName": "LibBridgeProcess",
+    "storage": {},
+    "code": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220166b7a66124b29913cf06f25006a3888e2a0ed97d7ad4677d066a8c0218c442c64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000006": {
+    "contractName": "ProxiedAddressManager",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063656b06a414610067578063715018a6146100b75780638da5cb5b146100c1578063decd8e39146100d2578063e1c7392a146100e5578063f2fde38b146100ed575b600080fd5b61009b610075366004610466565b60009182526065602090815260408084209284529190529020546001600160a01b031690565b6040516001600160a01b03909116815260200160405180910390f35b6100bf610100565b005b6033546001600160a01b031661009b565b6100bf6100e03660046104a4565b610114565b6100bf6101d4565b6100bf6100fb3660046104d9565b6102ea565b610108610360565b61011260006103ba565b565b61011c610360565b6001600160a01b0381163b15801561013c57506001600160a01b03811633145b1561015a57604051633baa901360e21b815260040160405180910390fd5b600083815260656020908152604080832085845282529182902080546001600160a01b038581166001600160a01b0319831681179093558451928352169181018290529091849186917fe41a6e8584d6e19a0dfc5f9331be4ebe61b5f025d45da164c9ca6ee9b837cea9910160405180910390a350505050565b600054610100900460ff16158080156101f45750600054600160ff909116105b8061020e5750303b15801561020e575060005460ff166001145b6102765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610299576000805461ff0019166101001790555b6102a161040c565b80156102e7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6102f2610360565b6001600160a01b0381166103575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161026d565b6102e7816103ba565b6033546001600160a01b031633146101125760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166104335760405162461bcd60e51b815260040161026d906104fb565b610112600054610100900460ff1661045d5760405162461bcd60e51b815260040161026d906104fb565b610112336103ba565b6000806040838503121561047957600080fd5b50508035926020909101359150565b80356001600160a01b038116811461049f57600080fd5b919050565b6000806000606084860312156104b957600080fd5b83359250602084013591506104d060408501610488565b90509250925092565b6000602082840312156104eb57600080fd5b6104f482610488565b9392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b29df3798c9e726c3c164b2b040762f31a38f87a602f1c19eb500d71a492ecc464736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000006": {
+    "contractName": "AddressManagerProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000033": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x430232c3118067c274e24bf0573d897d906c9567cb501adbb56de1dcba7fdea8": "0x0000000000000000000000001000777700000000000000000000000000000001",
+      "0x4f9f91213db4a9bdee72c5fbac069b47e9e9e804867e985f4e507e85074563b6": "0x0000000000000000000000001000777700000000000000000000000000000004",
+      "0x7acc4b79cc431c9a6d89691bd6043a8a9cffe1818ef2367f268355af79c65831": "0x0000000000000000000000001000777700000000000000000000000000000002",
+      "0x6be4118ce07b8239a46dcc445a4d19590361b7140deee96bab8333576e373c7d": "0x0000000000000000000000001000777700000000000000000000000000000003",
+      "0x9a77c63b9d666cbd64a700e27f875c1d5a209455abd8190054fc4fc317677c09": "0x0000000000000000000000001000777700000000000000000000000000000007",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000006"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000001": {
+    "contractName": "ProxiedMxcL2",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638f3ca30d116100b8578063c7b969081161007c578063c7b96908146102f5578063dac5df781461030f578063e1848cb014610318578063ee82ac5e1461032b578063f2fde38b1461033e578063f535bd561461035157600080fd5b80638f3ca30d146102905780639ee512f2146102a3578063a86f9d9e146102bc578063b8914ce4146102cf578063bacb386d146102e257600080fd5b8063539b8ade116100ff578063539b8ade14610207578063591aad8a146102325780636c6563f614610264578063715018a6146102775780638da5cb5b1461027f57600080fd5b80630652b57a1461013c57806310da3738146101515780633ab76e9f1461018b5780633d384a4b146101b05780634e755573146101c3575b600080fd5b61014f61014a36600461162a565b61036b565b005b6101787f92954368afd3caa1f3ce3ead0069c1af414054aefe1ef9aeacc1bf426222ce3881565b6040519081526020015b60405180910390f35b6097546001600160a01b03165b6040516001600160a01b039091168152602001610182565b61014f6101be36600461165e565b6103ee565b6101cb6105b6565b6040805182516001600160801b031681526020808401516001600160401b03908116918301919091529282015190921690820152606001610182565b60cd5461021a906001600160401b031681565b6040516001600160401b039091168152602001610182565b6102456102403660046116a4565b610616565b6040805160ff9094168452602084019290925290820152606001610182565b6101986102723660046116ea565b610851565b61014f610868565b6065546001600160a01b0316610198565b61014f61029e36600461171f565b61087c565b61019871777735367b36bc9b61c50022d9d0700db4ec81565b6101986102ca366004611760565b610c38565b6101786102dd36600461178c565b610c4e565b6101786102f036600461178c565b610c8a565b60cd5461021a90600160401b90046001600160401b031681565b61017860cb5481565b6101786103263660046117a5565b610cc3565b61017861033936600461178c565b610ce7565b61014f61034c36600461162a565b610d34565b60cd5461021a90600160801b90046001600160401b031681565b610373610dad565b6001600160a01b03811661039a57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b3371777735367b36bc9b61c50022d9d0700db4ec1461042057604051636494e9f760e01b815260040160405180910390fd5b600061042d600143611800565b9050804060008061043d84610e07565b915091508160cb54146104765760cb54604051636340d9fb60e11b81526004810191909152602481018390526044015b60405180910390fd5b60cb819055600084815260c96020908152604080832086905560cd80546fffffffffffffffff00000000000000001916600160401b6001600160401b038c1690810291909117909155815180830183528c81528084018c815282865260ca8552948390209051815593516001949094019390935580518b81529182018a90527f7528bbd1cef0e5d13408706892a51ee8ef82bbf33d4ec0c37216f8beba71205b910160405180910390a260cd805467ffffffffffffffff1916426001600160401b03908116918217909255604080514384168152488416602082015245909316908301526060820152608081018490524460a08201524160c082015263ffffffff461660e08201527f4dcb01f99c4a2c27a16ab38d00ec92434f8231be81fa62e058f260d3c7156029906101000160405180910390a15050505050505050565b6040805160608101825260008082526020820181905291810191909152506040805160608101825260cc546001600160801b03811682526001600160401b03600160801b820481166020840152600160c01b909104169181019190915290565b60008060008360ff1660011415801561063357508360ff16600214155b156106515760405163bcd2d90d60e01b815260040160405180910390fd5b8360ff16600114610682577fc6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee56106a4565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817985b915060008460ff166001146106d9577fad77eceea844778cb4376153fc8f06f12f1695df4585bf75bfb17ec19ce908186106fb565b7fb4a95509ce05fe8d45987859a067780d16a367c0e2cacf79cd301b93fb7179405b905060008560ff16600114610730577f71620584f61c57e688bbd3fd7a39a036e588d962c4c830f3dacbc15c917e02f2610752565b7f45b59254b0320fd853f3f38ac574999e91bd75fd5e6cab9c22c5e71fc6d276e45b82880192831001905060ff861660010361078c576107858282600170014551231950b75fc4402da1732fc9bebe19610e9a565b92506107fb565b6107d47f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a16107cf8484600170014551231950b75fc4402da1732fc9bebe19610e9a565b610ee9565b90925090506107f88282600170014551231950b75fc4402da1732fc9bebe19610e9a565b92505b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156108485761083f8370014551231950b75fc4402da1732fc9bebe19611800565b92506001851894505b50509250925092565b600061085e848484610f08565b90505b9392505050565b610870610dad565b61087a6000610fbc565b565b600054610100900460ff161580801561089c5750600054600160ff909116105b806108b65750303b1580156108b6575060005460ff166001145b6109195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161046d565b6000805460ff19166001179055801561093c576000805461ff0019166101001790555b600146111580610950575063ffffffff4610155b1561096e576040516306cffa2760e01b815260040160405180910390fd5b600143111561099057604051635a0f9e4160e11b815260040160405180910390fd5b6109a06040830160208401611813565b6001600160401b031615610b94576109bb6020830183611813565b6001600160401b031615806109e657506109db6060830160408401611813565b6001600160401b0316155b80610a0757506109fc6080830160608401611813565b6001600160401b0316155b80610a285750610a1d60a0830160808401611813565b6001600160401b0316155b15610a4657604051639cc448b560e01b815260040160405180910390fd5b600080610a8e610a5c6060860160408701611813565b610a696020870187611813565b610a796080880160608901611813565b610a8960a0890160808a01611813565b61100e565b91509150816001600160801b031660001480610aba57506001600160401b036001600160801b03831610155b80610acc57506001600160801b038116155b15610aea57604051639cc448b560e01b815260040160405180910390fd5b60cc80546001600160401b038416600160801b026001600160c01b03199091166001600160801b03841617179055610b286040850160208601611813565b60cc80546001600160401b0392909216600160c01b026001600160c01b039092169190911790556002610b616060860160408701611813565b610b6b9190611844565b60cd60106101000a8154816001600160401b0302191690836001600160401b0316021790555050505b60cd805467ffffffffffffffff1916426001600160401b0316179055610bb98361110d565b610bc243610e07565b5060cb554315610bed576000610bd9600143611800565b600081815260c96020526040902090409055505b8015610c33576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6000610c45468484610f08565b90505b92915050565b6000808215610c5d5782610c71565b60cd54600160401b90046001600160401b03165b600090815260ca60205260409020600101549392505050565b6000808215610c995782610cad565b60cd54600160401b90046001600160401b03165b600090815260ca60205260409020549392505050565b6000610cde610cd06105b6565b8563ffffffff168585611126565b50949350505050565b6000438210610cf857506000919050565b4382108015610d125750610d0e61010043611800565b8210155b15610d1c57504090565b50600090815260c9602052604090205490565b919050565b610d3c610dad565b6001600160a01b038116610da15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046d565b610daa81610fbc565b50565b6065546001600160a01b0316331461087a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046d565b600080610e126115f5565b60005b60ff81108015610e285750806001018510155b15610e5a576000198186030180408360ff83066101008110610e4c57610e4c61186a565b602002015250600101610e15565b5046611fe082015261200081209250834081610e7760ff87611880565b6101008110610e8857610e8861186a565b60200201526120009020919391925050565b600060405160408152602080820152602060408201528460608201528560808201528360a08201528260c082015260208160e08360056107d05a03fa610edf57600080fd5b5195945050505050565b6000806000198385098385029250828110838203039150509250929050565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190611894565b905081158015610f9457506001600160a01b038116155b1561086157604051631467050360e21b8152600481018590526024810184905260440161046d565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080856001600160401b031660000361102a5761102a6118b1565b6000611037600288611844565b90506110556001600160401b038816680755bf798b4a1bf1e46118c7565b925061107461106f84886001600160401b031684896111c2565b611281565b91506000611084848484896111c2565b9050600061109e8585856110998b60026118e1565b6111c2565b90506000826110af8361271061190c565b6110b99190611923565b9050806001600160401b0316876001600160401b031614611100576040516331c2ec2360e21b81526001600160401b0380891660048301528216602482015260440161046d565b5050505094509492505050565b6111156112ee565b61111d61131d565b610daa8161134c565b600080806202bf206001600160401b0385161161114457600061114b565b6202bf2084035b60cd546040890151919250600160801b90046001600160401b039081168184160191811688029061118890826111818582611395565b03906113ab565b93505050506111aa86602001516001600160401b0316876000015183876111c2565b9150816000036111b957600191505b94509492505050565b60006001600160801b038516158015906111e457506001600160801b03841615155b6111f0576111f06118b1565b60006001600160401b03831615611207578261120a565b60015b90506000611221856001600160401b0316886113c0565b905060006112416112328488611937565b6001600160401b0316896113c0565b90506001600160801b0387166001600160401b0384166112618484611800565b61126b9190611923565b6112759190611923565b98975050505050505050565b60006001600160801b038211156112ea5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840161046d565b5090565b600054610100900460ff166113155760405162461bcd60e51b815260040161046d9061195e565b61087a611412565b600054610100900460ff166113445760405162461bcd60e51b815260040161046d9061195e565b61087a61143f565b6001600160a01b03811661137357604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b60008183116113a45781610c45565b5090919050565b60008183116113ba5782610c45565b50919050565b6000806113d66001600160801b0384168561190c565b9050680755bf798b4a1bf1e48110611401576040516372de381d60e01b815260040160405180910390fd5b61140a8161146f565b949350505050565b600054610100900460ff166114395760405162461bcd60e51b815260040161046d9061195e565b60018055565b600054610100900460ff166114665760405162461bcd60e51b815260040161046d9061195e565b61087a33610fbc565b6000680248ce36a70cb26b3e19821361148a57506000919050565b680755bf798b4a1bf1e582126114b357604051631a93c68960e11b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b6d2c06887d92262d378b9593af35346c09791803c2923d5d9721c3da80929091056001605f1b0190921d6bb17217f7d1cf79abc9e3b39881029095039081018102606090811d6d019dd9374d4315c8464a395fc09881016c1bff318b126baa436ea9aeaffd19840102821d93840193016d29c9ad45cc0beb0a2ff097a7bab40192909202821d6dcf3c27b2e487711b467e90f19320016c22fcd1cffa6fa000f6e27eeca082018202831d6d022f98fbc368092c79210d196fa0018202831d6d13aaae3ba38de06adc25ebfacc0901820290921d6d624dcbeb5e25df590e409325888a01026d360d7aeea093263ec6495851bd9760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b604051806120000160405280610100906020820280368337509192915050565b6001600160a01b0381168114610daa57600080fd5b60006020828403121561163c57600080fd5b813561086181611615565b80356001600160401b0381168114610d2f57600080fd5b6000806000806080858703121561167457600080fd5b843593506020850135925061168b60408601611647565b915061169960608601611647565b905092959194509250565b600080604083850312156116b757600080fd5b82359150602083013560ff811681146116cf57600080fd5b809150509250929050565b80358015158114610d2f57600080fd5b6000806000606084860312156116ff57600080fd5b8335925060208401359150611716604085016116da565b90509250925092565b60008082840360c081121561173357600080fd5b833561173e81611615565b925060a0601f198201121561175257600080fd5b506020830190509250929050565b6000806040838503121561177357600080fd5b82359150611783602084016116da565b90509250929050565b60006020828403121561179e57600080fd5b5035919050565b6000806000606084860312156117ba57600080fd5b833563ffffffff811681146117ce57600080fd5b92506117dc60208501611647565b915061171660408501611647565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c4857610c486117ea565b60006020828403121561182557600080fd5b610c4582611647565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b038084168061185e5761185e61182e565b92169190910492915050565b634e487b7160e01b600052603260045260246000fd5b60008261188f5761188f61182e565b500690565b6000602082840312156118a657600080fd5b815161086181611615565b634e487b7160e01b600052600160045260246000fd5b60006001600160801b038084168061185e5761185e61182e565b6001600160401b03818116838216028082169190828114611904576119046117ea565b505092915050565b8082028115828204841417610c4857610c486117ea565b6000826119325761193261182e565b500490565b6001600160401b03818116838216019080821115611957576119576117ea565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e499ccf1fe7c01088ff959220618f9deabfd7304d327ad653dc80b362ef5ce9d64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000000": {
+    "contractName": "ProxiedPlaceholder",
+    "storage": {},
+    "code": "0x6080604052600080fdfea2646970667358221220d294f9377c9cc3d7bc3fadb64c83c387d89c74a2684b9e2ad91f99052aa5416b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000001": {
+    "contractName": "MxcL2Proxy",
+    "storage": {
+      "0x00000000000000000000000000000000000000000000000000000000000000cb": "0x304a8da60727d9a6b247d0c2a1dfa8fd6fb81e6ef3bb9afa9900307458e1bde4",
+      "0x00000000000000000000000000000000000000000000000000000000000000cc": "0x0000000000bebc200000000058b8ef1c0000000485b9d2e799564d28c46075dd",
+      "0x00000000000000000000000000000000000000000000000000000000000000cd": "0x00000000000000000000000a9507f68000000000000000000000000064852f6c",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000001"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000004": {
+    "contractName": "ProxiedBridge",
+    "storage": {},
+    "code": "",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000004": {
+    "contractName": "BridgeProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000004"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000002": {
+    "contractName": "ProxiedTokenVault",
+    "storage": {},
+    "code": "0x6080604052600436106100f35760003560e01c80638c7a39401161008a578063a86f9d9e11610059578063a86f9d9e146102f5578063c287e57814610315578063ee1490b214610355578063f2fde38b1461036857600080fd5b80638c7a3940146102665780638da5cb5b146102865780639754149b146102a45780639aa8605c146102c457600080fd5b806367090ccf116100c657806367090ccf146101915780636c6563f6146101d2578063715018a6146101f2578063780b64f01461020757600080fd5b80630652b57a146100f85780630c6fab821461011a57806319ab453c1461013a5780633ab76e9f1461015a575b600080fd5b34801561010457600080fd5b5061011861011336600461209c565b610388565b005b34801561012657600080fd5b506101186101353660046120b9565b61040b565b34801561014657600080fd5b5061011861015536600461209c565b610622565b34801561016657600080fd5b506097546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019d57600080fd5b506101746101ac366004612128565b60cb6020908152600092835260408084209091529082529020546001600160a01b031681565b3480156101de57600080fd5b506101746101ed366004612166565b61073a565b3480156101fe57600080fd5b50610118610751565b34801561021357600080fd5b5061024761022236600461219f565b60cc60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610188565b34801561027257600080fd5b506101186102813660046121b8565b610765565b34801561029257600080fd5b506065546001600160a01b0316610174565b3480156102b057600080fd5b506101186102bf3660046121e4565b6107e9565b3480156102d057600080fd5b506102e46102df36600461209c565b610b37565b6040516101889594939291906122d4565b34801561030157600080fd5b50610174610310366004612325565b610c88565b34801561032157600080fd5b5061034561033036600461209c565b60c96020526000908152604090205460ff1681565b6040519015158152602001610188565b6101186103633660046123b9565b610c9e565b34801561037457600080fd5b5061011861038336600461209c565b6114d7565b610390611550565b6001600160a01b0381166103b757604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b6104136115aa565b6562726964676560d01b610428816000610c88565b6001600160a01b0316336001600160a01b03161461045957604051630d85cccf60e11b815260040160405180910390fd5b6000336001600160a01b031663d0496d6a6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd9190612498565b90506104dd81604001516a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b031681602001516001600160a01b031614610512576040516320258b8760e21b815260040160405180910390fd5b6000468735036105475761052c604088016020890161209c565b90506105426001600160a01b0382168686611603565b6105b7565b61055087611666565b6040516342e91bb360e01b81526001600160a01b03878116600483015260248201879052919250908216906342e91bb390604401600060405180830381600087803b15801561059e57600080fd5b505af11580156105b2573d6000803e3d6000fd5b505050505b815160408084015181519081526001600160a01b0384811660208301529181018790528188169291891691907fe5da926519fc972010fe65b35c1e3339e6dc72b35ffaec203999c2a2a2593eac9060600160405180910390a450505061061c60018055565b50505050565b600054610100900460ff16158080156106425750600054600160ff909116105b8061065c5750303b15801561065c575060005460ff166001145b6106c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156106e7576000805461ff0019166101001790555b6106f0826116c5565b8015610736576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006107478484846116de565b90505b9392505050565b610759611550565b6107636000611792565b565b61076d6115aa565b6562726964676560d01b610782816000610c88565b6001600160a01b0316336001600160a01b0316146107b357604051630d85cccf60e11b815260040160405180910390fd5b6107df83836107cf6836bc31afba37b5b2b760b91b6000610c88565b6001600160a01b03169190611603565b5061073660018055565b6107f16115aa565b600061080360a085016080860161209c565b6001600160a01b03160361082a576040516372b41cdf60e01b815260040160405180910390fd5b4683604001351461084e576040516348bc100560e01b815260040160405180910390fd5b60006108646562726964676560d01b6000610c88565b90506000816001600160a01b0316635817b0c3866040518263ffffffff1660e01b81526004016108949190612570565b602060405180830381865afa1580156108b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d5919061268e565b600081815260cc6020526040902080546001909101549192506001600160a01b0316908161091657604051637c6addb760e01b815260040160405180910390fd5b60405163ce70f39b60e01b81526001600160a01b0385169063ce70f39b9061094c90869060608c0135908b908b906004016126a7565b602060405180830381865afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d91906126d1565b6109aa576040516308ba49e560e31b815260040160405180910390fd5b6040805180820182526000808252602080830182815287835260cc909152929020905181546001600160a01b0319166001600160a01b0390911617815590516001909101558015610abe576001600160a01b038216600090815260c9602052604090205460ff1615610a9a576001600160a01b0382166342e91bb3610a3560a08a0160808b0161209c565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610a7d57600080fd5b505af1158015610a91573d6000803e3d6000fd5b50505050610abe565b610abe610aad60a0890160808a0161209c565b6001600160a01b0384169083611603565b610ace60a088016080890161209c565b6001600160a01b0316837fc5d9f7cd7998e24ecf12ad69eca9339764e2cb13788d5d9616f502601b219af68484604051610b1d9291906001600160a01b03929092168252602082015260400190565b60405180910390a350505050610b3260018055565b505050565b60ca6020526000908152604090208054600182015460028301805492936001600160a01b03831693600160a01b90930460ff1692909190610b77906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba3906126ee565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505090806003018054610c05906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610c31906126ee565b8015610c7e5780601f10610c5357610100808354040283529160200191610c7e565b820191906000526020600020905b815481529060010190602001808311610c6157829003601f168201915b5050505050905085565b6000610c954684846116de565b90505b92915050565b610ca66115aa565b6001600160a01b0387161580610ce65750610cd1886a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b0316876001600160a01b0316145b15610d0457604051634694641b60e01b815260040160405180910390fd5b6001600160a01b038616610d2b57604051637c6addb760e01b815260040160405180910390fd5b84600003610d4b5760405162af849960e11b815260040160405180910390fd5b6040805160a08101825260008082526020820181905291810191909152606080820181905260808201526001600160a01b038716600090815260c9602052604081205460ff1615610fa257604051630ef7c31560e31b8152336004820152602481018890526001600160a01b038916906377be18a890604401600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b505050506001600160a01b03888116600090815260ca6020908152604091829020825160a08101845281548152600182015494851692810192909252600160a01b90930460ff1691810191909152600282018054919291606084019190610e58906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610e84906126ee565b8015610ed15780601f10610ea657610100808354040283529160200191610ed1565b820191906000526020600020905b815481529060010190602001808311610eb457829003601f168201915b50505050508152602001600382018054610eea906126ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610f16906126ee565b8015610f635780601f10610f3857610100808354040283529160200191610f63565b820191906000526020600020905b815481529060010190602001808311610f4657829003601f168201915b5050509190925250505060208101519092506001600160a01b0316610f9b57604051633e45a03560e21b815260040160405180910390fd5b5085611202565b60008890506040518060a001604052804681526020018a6001600160a01b03168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190612737565b60ff168152602001826001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110979190810190612754565b8152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111029190810190612754565b90526040516370a0823160e01b81523060048201529093506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611172919061268e565b90506111896001600160a01b03831633308c6117e4565b6040516370a0823160e01b815230600482015281906001600160a01b038416906370a0823190602401602060405180830381865afa1580156111cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f3919061268e565b6111fd91906127cb565b925050505b611291604051806101a001604052806000815260200160006001600160a01b03168152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b606081018b90523360808201526112b88b6a1d1bdad95b97dd985d5b1d60aa1b600061073a565b6001600160a01b031660a08201526080810151604051630637d5c160e11b916112ea918691908e9087906024016127ec565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610160820152610140810187905261012081018690523486101561134a5761134486346127cb565b60e08201525b6001600160a01b03851660c0820152610180810184905260006113766562726964676560d01b82610c88565b6001600160a01b03166396e1785234846040518363ffffffff1660e01b81526004016113a29190612884565b60206040518083038185885af11580156113c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113e5919061268e565b905060405180604001604052808b6001600160a01b031681526020018481525060cc600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101559050508a6001600160a01b031682608001516001600160a01b0316827f325cab7553038374e17f39bb45e2a2c90f66c6a52798cb5f95c20d94c11c95e28f8e886040516114b8939291909283526001600160a01b03919091166020830152604082015260600190565b60405180910390a4505050506114cd60018055565b5050505050505050565b6114df611550565b6001600160a01b0381166115445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106bb565b61154d81611792565b50565b6065546001600160a01b031633146107635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106bb565b6002600154036115fc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106bb565b6002600155565b6040516001600160a01b038316602482015260448101829052610b3290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261181c565b8035600090815260cb6020908152604080832083929091839161168d91870190870161209c565b6001600160a01b03908116825260208201929092526040016000205416905080610c98576116ba836118ee565b61074a565b60018055565b6116cd611b73565b6116d5611ba2565b61154d81611bd1565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa15801561172f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117539190612974565b90508115801561176a57506001600160a01b038116155b1561074a57604051631467050360e21b815260048101859052602481018490526044016106bb565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261061c9085906323b872dd60e01b9060840161162f565b6000611871826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c1a9092919063ffffffff16565b805190915015610b32578080602001905181019061188f91906126d1565b610b325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106bb565b6000611967818335611906604086016020870161209c565b60405161192992916001600160a01b031690602001918252602082015260400190565b604051602081830303815290604052805190602001206040518060200161194f9061206a565b601f1982820381018352601f90910116604052611c29565b6097549091506001600160a01b0380831691636c0db62b9116611990604086016020870161209c565b85356119a26060880160408901612991565b6119af60608901896129ae565b6119bc60808b018b6129ae565b6119c68c35611d2d565b6040516020016119d8939291906129f5565b6040516020818303038152906040526040518863ffffffff1660e01b8152600401611a099796959493929190612a3e565b600060405180830381600087803b158015611a2357600080fd5b505af1158015611a37573d6000803e3d6000fd5b5050506001600160a01b038216600090815260c960209081526040808320805460ff1916600117905560ca9091529020839150611a748282612baa565b50508135600090815260cb60209081526040808320849390929091611a9e9190870190870161209c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806001600160a01b0316826020016020810190611aff919061209c565b6001600160a01b031683357f9e465b29e576a3e01584e31d607353f21b80c055e813af907c0a495f6cf4f7bc611b3860608701876129ae565b611b4560808901896129ae565b611b5560608b0160408c01612991565b604051611b66959493929190612c31565b60405180910390a4919050565b600054610100900460ff16611b9a5760405162461bcd60e51b81526004016106bb90612c6e565b610763611dc0565b600054610100900460ff16611bc95760405162461bcd60e51b81526004016106bb90612c6e565b610763611de7565b6001600160a01b038116611bf857604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b60606107478484600085611e17565b600083471015611c7b5760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016106bb565b8151600003611ccc5760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016106bb565b8282516020840186f590506001600160a01b03811661074a5760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016106bb565b60606000611d3a83611ef4565b600101905060008167ffffffffffffffff811115611d5a57611d5a61234a565b6040519080825280601f01601f191660200182016040528015611d84576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611d8e57509392505050565b600054610100900460ff166116bf5760405162461bcd60e51b81526004016106bb90612c6e565b600054610100900460ff16611e0e5760405162461bcd60e51b81526004016106bb90612c6e565b61076333611792565b606082471015611e785760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106bb565b600080866001600160a01b03168587604051611e949190612cb9565b60006040518083038185875af1925050503d8060008114611ed1576040519150601f19603f3d011682016040523d82523d6000602084013e611ed6565b606091505b5091509150611ee787838387611fcc565b925050505b949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f335772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611f5f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611f7d57662386f26fc10000830492506010015b6305f5e1008310611f95576305f5e100830492506008015b6127108310611fa957612710830492506004015b60648310611fbb576064830492506002015b600a8310610c985760010192915050565b6060831561203b578251600003612034576001600160a01b0385163b6120345760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106bb565b5081611eec565b611eec83838151156120505781518083602001fd5b8060405162461bcd60e51b81526004016106bb9190612cd5565b6116ce80612ce983390190565b6001600160a01b038116811461154d57600080fd5b803561209781612077565b919050565b6000602082840312156120ae57600080fd5b813561074a81612077565b600080600080608085870312156120cf57600080fd5b843567ffffffffffffffff8111156120e657600080fd5b850160a081880312156120f857600080fd5b9350602085013561210881612077565b9250604085013561211881612077565b9396929550929360600135925050565b6000806040838503121561213b57600080fd5b82359150602083013561214d81612077565b809150509250929050565b801515811461154d57600080fd5b60008060006060848603121561217b57600080fd5b8335925060208401359150604084013561219481612158565b809150509250925092565b6000602082840312156121b157600080fd5b5035919050565b600080604083850312156121cb57600080fd5b82356121d681612077565b946020939093013593505050565b6000806000604084860312156121f957600080fd5b833567ffffffffffffffff8082111561221157600080fd5b908501906101a0828803121561222657600080fd5b9093506020850135908082111561223c57600080fd5b818601915086601f83011261225057600080fd5b81358181111561225f57600080fd5b87602082850101111561227157600080fd5b6020830194508093505050509250925092565b60005b8381101561229f578181015183820152602001612287565b50506000910152565b600081518084526122c0816020860160208601612284565b601f01601f19169290920160200192915050565b8581526001600160a01b038516602082015260ff8416604082015260a060608201819052600090612307908301856122a8565b828103608084015261231981856122a8565b98975050505050505050565b6000806040838503121561233857600080fd5b82359150602083013561214d81612158565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156123895761238961234a565b604052919050565b600067ffffffffffffffff8211156123ab576123ab61234a565b50601f01601f191660200190565b600080600080600080600080610100898b0312156123d657600080fd5b8835975060208901356123e881612077565b965060408901356123f881612077565b9550606089013594506080890135935060a0890135925060c089013561241d81612077565b915060e089013567ffffffffffffffff81111561243957600080fd5b8901601f81018b1361244a57600080fd5b803561245d61245882612391565b612360565b8181528c602083850101111561247257600080fd5b816020840160208301376000602083830101528093505050509295985092959890939650565b6000606082840312156124aa57600080fd5b6040516060810181811067ffffffffffffffff821117156124cd576124cd61234a565b6040528251815260208301516124e281612077565b60208201526040928301519281019290925250919050565b6000808335601e1984360301811261251157600080fd5b830160208101925035905067ffffffffffffffff81111561253157600080fd5b80360382131561254057600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081528135602082015260006125896020840161208c565b6001600160a01b03811660408401525060408301356060830152606083013560808301526125b96080840161208c565b6001600160a01b03811660a0840152506125d560a0840161208c565b6001600160a01b03811660c0840152506125f160c0840161208c565b6001600160a01b03811660e08401525061010060e08401358184015261012081850135818501526101409150808501358285015250610160818501358185015261263d818601866124fa565b925090506101a0610180818187015261265b6101c087018585612547565b9350612669818801886124fa565b878603601f19018489015293509050612683848483612547565b979650505050505050565b6000602082840312156126a057600080fd5b5051919050565b8481528360208201526060604082015260006126c7606083018486612547565b9695505050505050565b6000602082840312156126e357600080fd5b815161074a81612158565b600181811c9082168061270257607f821691505b60208210810361272257634e487b7160e01b600052602260045260246000fd5b50919050565b60ff8116811461154d57600080fd5b60006020828403121561274957600080fd5b815161074a81612728565b60006020828403121561276657600080fd5b815167ffffffffffffffff81111561277d57600080fd5b8201601f8101841361278e57600080fd5b805161279c61245882612391565b8181528560208385010111156127b157600080fd5b6127c2826020830160208601612284565b95945050505050565b81810381811115610c9857634e487b7160e01b600052601160045260246000fd5b60808152845160808201526000602086015160018060a01b0380821660a085015260ff60408901511660c08501526060880151915060a060e08501526128366101208501836122a8565b91506080880151607f198584030161010086015261285483826122a8565b9188166020860152506001600160a01b038616604085015291506128759050565b82606083015295945050505050565b6020815281516020820152600060208301516128ab60408401826001600160a01b03169052565b50604083015160608301526060830151608083015260808301516128da60a08401826001600160a01b03169052565b5060a08301516001600160a01b03811660c08401525060c08301516001600160a01b03811660e08401525060e0830151610100838101919091528301516101208084019190915283015161014080840191909152830151610160808401919091528301516101a06101808085018290526129586101c08601846122a8565b90860151858203601f1901838701529092506126c783826122a8565b60006020828403121561298657600080fd5b815161074a81612077565b6000602082840312156129a357600080fd5b813561074a81612728565b6000808335601e198436030181126129c557600080fd5b83018035915067ffffffffffffffff8211156129e057600080fd5b60200191503681900382131561254057600080fd5b8284823760008382016b050c4e4d2c8cecac9e13f19160a31b81528351612a2381600c840160208801612284565b602960f81b600c9290910191820152600d0195945050505050565b6001600160a01b038881168252871660208201526040810186905260ff8516606082015260c060808201819052600090612a7b9083018587612547565b82810360a0840152612a8d81856122a8565b9a9950505050505050505050565b601f821115610b3257600081815260208120601f850160051c81016020861015612ac25750805b601f850160051c820191505b81811015612ae157828155600101612ace565b505050505050565b67ffffffffffffffff831115612b0157612b0161234a565b612b1583612b0f83546126ee565b83612a9b565b6000601f841160018114612b495760008515612b315750838201355b600019600387901b1c1916600186901b178355612ba3565b600083815260209020601f19861690835b82811015612b7a5786850135825560209485019460019092019101612b5a565b5086821015612b975760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b81358155600181016020830135612bc081612077565b81546040850135612bd081612728565b60ff60a01b60a09190911b166001600160a01b03929092166001600160a81b03199190911617179055612c0660608301836129ae565b612c14818360028601612ae9565b5050612c2360808301836129ae565b61061c818360038601612ae9565b606081526000612c45606083018789612547565b8281036020840152612c58818688612547565b91505060ff831660408301529695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251612ccb818460208701612284565b9190910192915050565b602081526000610c9560208301846122a856fe608060405234801561001057600080fd5b506116ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636c6563f6116100c357806395d89b411161007c57806395d89b4114610305578063a457c2d71461030d578063a86f9d9e14610320578063a9059cbb14610333578063dd62ed3e14610346578063f2fde38b1461035957600080fd5b80636c6563f61461028a57806370a082311461029d578063715018a6146102c657806377be18a8146102ce5780637cf8ed0d146102e15780638da5cb5b146102f457600080fd5b8063395093511161011557806339509351146101ed5780633ab76e9f1461020057806342e91bb31461022557806349d126051461023857806367e828bf146102415780636c0db62b1461027757600080fd5b80630652b57a1461015d57806306fdde0314610172578063095ea7b31461019057806318160ddd146101b357806323b872dd146101c5578063313ce567146101d8575b600080fd5b61017061016b3660046111d3565b61036c565b005b61017a6103ef565b60405161018791906111f0565b60405180910390f35b6101a361019e36600461123e565b610481565b6040519015158152602001610187565b60cb545b604051908152602001610187565b6101a36101d336600461126a565b61049b565b60fd5460405160ff9091168152602001610187565b6101a36101fb36600461123e565b6104db565b6097546001600160a01b03165b6040516001600160a01b039091168152602001610187565b61017061023336600461123e565b6104fd565b6101b760fc5481565b61025860fb5460fc546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610187565b61017061028536600461134e565b61059a565b61020d61029836600461140d565b610740565b6101b76102ab3660046111d3565b6001600160a01b0316600090815260c9602052604090205490565b61017061074d565b6101706102dc36600461123e565b610761565b60fb5461020d906001600160a01b031681565b6065546001600160a01b031661020d565b61017a6107f1565b6101a361031b36600461123e565b610800565b61020d61032e366004611442565b610886565b6101a361034136600461123e565b610893565b6101b761035436600461146e565b6108c8565b6101706103673660046111d3565b6108f3565b61037461096c565b6001600160a01b03811661039b57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b606060cc80546103fe906114a7565b80601f016020809104026020016040519081016040528092919081815260200182805461042a906114a7565b80156104775780601f1061044c57610100808354040283529160200191610477565b820191906000526020600020905b81548152906001019060200180831161045a57829003601f168201915b5050505050905090565b60003361048f8185856109c6565b60019150505b92915050565b6000306001600160a01b038416036104c6576040516319a6f37760e21b815260040160405180910390fd5b6104d1848484610aeb565b90505b9392505050565b60003361048f8185856104ee83836108c8565b6104f891906114e1565b6109c6565b6a1d1bdad95b97dd985d5b1d60aa1b610517816000610886565b6001600160a01b0316336001600160a01b03161461054857604051630d85cccf60e11b815260040160405180910390fd5b6105528383610b04565b826001600160a01b03167f397b33b307fc137878ebfc75b295289ec0ee25a31bb5bf034f33256fe8ea2aa68360405161058d91815260200190565b60405180910390a2505050565b600054610100900460ff16158080156105ba5750600054600160ff909116105b806105d45750303b1580156105d4575060005460ff166001145b61063c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561065f576000805461ff0019166101001790555b6001600160a01b0386161580610673575084155b8061067d57504685145b8061068757508251155b8061069157508151155b156106af576040516301e25ab360e71b815260040160405180910390fd5b6106b887610bc6565b6106c28284610bdf565b60fb80546001600160a01b0319166001600160a01b03881617905560fc85905560fd805460ff191660ff86161790558015610737576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60006104d1848484610c10565b61075561096c565b61075f6000610cc4565b565b6a1d1bdad95b97dd985d5b1d60aa1b61077b816000610886565b6001600160a01b0316336001600160a01b0316146107ac57604051630d85cccf60e11b815260040160405180910390fd5b6107b68383610d16565b826001600160a01b03167f9b5b9a05e4726d8bb959f1440e05c6b8109443f2083bc4e386237d76545265538360405161058d91815260200190565b606060cd80546103fe906114a7565b6000338161080e82866108c8565b90508381101561086e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610633565b61087b82868684036109c6565b506001949350505050565b60006104d4468484610c10565b6000306001600160a01b038416036108be576040516319a6f37760e21b815260040160405180910390fd5b6104d48383610e47565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205490565b6108fb61096c565b6001600160a01b0381166109605760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610633565b61096981610cc4565b50565b6065546001600160a01b0316331461075f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610633565b6001600160a01b038316610a285760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610633565b6001600160a01b038216610a895760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610633565b6001600160a01b03838116600081815260ca602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600033610af9858285610e55565b61087b858585610ecf565b6001600160a01b038216610b5a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610633565b8060cb6000828254610b6c91906114e1565b90915550506001600160a01b038216600081815260c960209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b610bce61107a565b610bd66110a9565b610969816110d8565b600054610100900460ff16610c065760405162461bcd60e51b815260040161063390611502565b610bc28282611121565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c85919061154d565b905081158015610c9c57506001600160a01b038116155b156104d457604051631467050360e21b81526004810185905260248101849052604401610633565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610d765760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610633565b6001600160a01b038216600090815260c9602052604090205481811015610dea5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610633565b6001600160a01b038316600081815260c960209081526040808320868603905560cb80548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610ade565b505050565b60003361048f818585610ecf565b6000610e6184846108c8565b90506000198114610ec95781811015610ebc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610633565b610ec984848484036109c6565b50505050565b6001600160a01b038316610f335760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610633565b6001600160a01b038216610f955760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610633565b6001600160a01b038316600090815260c960205260409020548181101561100d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610633565b6001600160a01b03808516600081815260c9602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061106d9086815260200190565b60405180910390a3610ec9565b600054610100900460ff166110a15760405162461bcd60e51b815260040161063390611502565b61075f611161565b600054610100900460ff166110d05760405162461bcd60e51b815260040161063390611502565b61075f61118e565b6001600160a01b0381166110ff57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166111485760405162461bcd60e51b815260040161063390611502565b60cc61115483826115b8565b5060cd610e4282826115b8565b600054610100900460ff166111885760405162461bcd60e51b815260040161063390611502565b60018055565b600054610100900460ff166111b55760405162461bcd60e51b815260040161063390611502565b61075f33610cc4565b6001600160a01b038116811461096957600080fd5b6000602082840312156111e557600080fd5b81356104d4816111be565b600060208083528351808285015260005b8181101561121d57858101830151858201604001528201611201565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806040838503121561125157600080fd5b823561125c816111be565b946020939093013593505050565b60008060006060848603121561127f57600080fd5b833561128a816111be565b9250602084013561129a816111be565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126112d257600080fd5b813567ffffffffffffffff808211156112ed576112ed6112ab565b604051601f8301601f19908116603f01168101908282118183101715611315576113156112ab565b8160405283815286602085880101111561132e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561136757600080fd5b8635611372816111be565b95506020870135611382816111be565b945060408701359350606087013560ff8116811461139f57600080fd5b9250608087013567ffffffffffffffff808211156113bc57600080fd5b6113c88a838b016112c1565b935060a08901359150808211156113de57600080fd5b506113eb89828a016112c1565b9150509295509295509295565b8035801515811461140857600080fd5b919050565b60008060006060848603121561142257600080fd5b8335925060208401359150611439604085016113f8565b90509250925092565b6000806040838503121561145557600080fd5b82359150611465602084016113f8565b90509250929050565b6000806040838503121561148157600080fd5b823561148c816111be565b9150602083013561149c816111be565b809150509250929050565b600181811c908216806114bb57607f821691505b6020821081036114db57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561049557634e487b7160e01b600052601160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561155f57600080fd5b81516104d4816111be565b601f821115610e4257600081815260208120601f850160051c810160208610156115915750805b601f850160051c820191505b818110156115b05782815560010161159d565b505050505050565b815167ffffffffffffffff8111156115d2576115d26112ab565b6115e6816115e084546114a7565b8461156a565b602080601f83116001811461161b57600084156116035750858301515b600019600386901b1c1916600185901b1785556115b0565b600085815260208120601f198616915b8281101561164a5788860151825594840194600190910190840161162b565b50858210156116685787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122085a2aff2862debaa7c862110ce3109a1e3c4cb4105c4103709cdda64664d10b964736f6c63430008120033a264697066735822122036ae8b9ef1628787bd6bb607096988472ce916653d4ed187813f809cf046e70e64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000002": {
+    "contractName": "TokenVaultProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000002"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000003": {
+    "contractName": "ProxiedEtherVault",
+    "storage": {},
+    "code": "0x6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101c0578063a86f9d9e146101de578063ba0bbd95146101fe578063d73bb3d01461021e578063f2fde38b1461023e578063fe9fbb801461025e57600080fd5b80630652b57a146100f457806319ab453c146101145780632d1fb389146101345780633ab76e9f146101545780636c6563f61461018b578063715018a6146101ab57600080fd5b366100ef5747158015906100cf575033600090815260c9602052604090205460ff16155b156100ed57604051634fa3f24560e01b815260040160405180910390fd5b005b600080fd5b34801561010057600080fd5b506100ed61010f366004610a90565b6102a7565b34801561012057600080fd5b506100ed61012f366004610a90565b61032a565b34801561014057600080fd5b506100ed61014f366004610ac2565b610442565b34801561016057600080fd5b506097546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019757600080fd5b5061016e6101a6366004610af7565b6104fb565b3480156101b757600080fd5b506100ed610512565b3480156101cc57600080fd5b506065546001600160a01b031661016e565b3480156101ea57600080fd5b5061016e6101f9366004610b2c565b610526565b34801561020a57600080fd5b506100ed610219366004610b4f565b610533565b34801561022a57600080fd5b506100ed610239366004610b7b565b6105f1565b34801561024a57600080fd5b506100ed610259366004610a90565b610674565b34801561026a57600080fd5b50610297610279366004610a90565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6040519015158152602001610182565b6102af6106ea565b6001600160a01b0381166102d657604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b600054610100900460ff161580801561034a5750600054600160ff909116105b806103645750303b158015610364575060005460ff166001145b6103cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103ef576000805461ff0019166101001790555b6103f882610744565b801561043e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61044a6106ea565b6001600160a01b038216158061047e57506001600160a01b038216600090815260c9602052604090205460ff161515811515145b1561049c57604051631bebdfa760e21b815260040160405180910390fd5b6001600160a01b038216600081815260c96020908152604091829020805460ff191685151590811790915591519182527f4c0079b9bcd37cd5d29a13938effd97c881798cbc6bd52a3026a29d94b27d1bf910160405180910390a25050565b600061050884848461075d565b90505b9392505050565b61051a6106ea565b6105246000610811565b565b600061050b46848461075d565b33600090815260c9602052604090205460ff1661056357604051634fa3f24560e01b815260040160405180910390fd5b61056b610863565b6001600160a01b0382166105925760405163687563df60e01b815260040160405180910390fd5b6105a56001600160a01b038316826108bc565b816001600160a01b03167f7b9f77d35803cd201eac9c4ed739bc1fcd3f1be6ab8877d925d1e55517b6fd6e826040516105e091815260200190565b60405180910390a261043e60018055565b33600090815260c9602052604090205460ff1661062157604051634fa3f24560e01b815260040160405180910390fd5b610629610863565b61063333826108bc565b60405181815233907f7b9f77d35803cd201eac9c4ed739bc1fcd3f1be6ab8877d925d1e55517b6fd6e9060200160405180910390a261067160018055565b50565b61067c6106ea565b6001600160a01b0381166106e15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c3565b61067181610811565b6065546001600160a01b031633146105245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b61074c61097d565b6107546109ac565b610671816109db565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d29190610b94565b9050811580156107e957506001600160a01b038116155b1561050b57604051631467050360e21b815260048101859052602481018490526044016103c3565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002600154036108b55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103c3565b6002600155565b8015806108d057506001600160a01b038216155b156108d9575050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610926576040519150601f19603f3d011682016040523d82523d6000602084013e61092b565b606091505b50509050806109725760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016103c3565b505050565b60018055565b600054610100900460ff166109a45760405162461bcd60e51b81526004016103c390610bb1565b610524610a24565b600054610100900460ff166109d35760405162461bcd60e51b81526004016103c390610bb1565b610524610a4b565b6001600160a01b038116610a0257604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166109775760405162461bcd60e51b81526004016103c390610bb1565b600054610100900460ff16610a725760405162461bcd60e51b81526004016103c390610bb1565b61052433610811565b6001600160a01b038116811461067157600080fd5b600060208284031215610aa257600080fd5b813561050b81610a7b565b80358015158114610abd57600080fd5b919050565b60008060408385031215610ad557600080fd5b8235610ae081610a7b565b9150610aee60208401610aad565b90509250929050565b600080600060608486031215610b0c57600080fd5b8335925060208401359150610b2360408501610aad565b90509250925092565b60008060408385031215610b3f57600080fd5b82359150610aee60208401610aad565b60008060408385031215610b6257600080fd5b8235610b6d81610a7b565b946020939093013593505050565b600060208284031215610b8d57600080fd5b5035919050565b600060208284031215610ba657600080fd5b815161050b81610a7b565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122049cb2e6dad63489f4d9d67f77ba46c7e92a53b49db8efd320c9e1f6c0a76803464736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000003": {
+    "contractName": "EtherVaultProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xa738d3397c1eb96f671d7e4bd29cabbfa1a9c9ebc0db4142aee17809c43ab720": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000003"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0xfffffffffcb0f721bf16ac40dfffffff"
+  },
+  "0x0000777700000000000000000000000000000007": {
+    "contractName": "ProxiedSignalService",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80636c6563f6116100715780636c6563f614610162578063715018a6146101755780638da5cb5b1461017d578063a86f9d9e1461018e578063f2fde38b146101a1578063f8f3f844146101b457600080fd5b80630652b57a146100b957806319ab453c146100ce57806332676bc6146100e15780633ab76e9f146101095780635221f6131461012e57806366ca2bc014610141575b600080fd5b6100cc6100c7366004611a1b565b6101e0565b005b6100cc6100dc366004611a1b565b610263565b6100f46100ef366004611a38565b61037b565b60405190151581526020015b60405180910390f35b6097546001600160a01b03165b6040516001600160a01b039091168152602001610100565b6100f461013c366004611a64565b6103ed565b61015461014f366004611afa565b610560565b604051908152602001610100565b610116610170366004611b28565b6105a5565b6100cc6105bc565b6065546001600160a01b0316610116565b61011661019c366004611b5d565b6105d0565b6100cc6101af366004611a1b565b6105dd565b6101546101c2366004611a38565b6040805192835260208301919091526034600c830120918101905290565b6101e8610656565b6001600160a01b03811661020f57604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f399ded90cb5ed8d89ef7e76ff4af65c373f06d3bf5d7eef55f4228e7b702a18b9060200160405180910390a150565b600054610100900460ff16158080156102835750600054600160ff909116105b8061029d5750303b15801561029d575060005460ff166001145b6103055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610328576000805461ff0019166101001790555b610331826106b0565b8015610377576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b60006001600160a01b0383166103a4576040516354cdfc8d60e11b815260040160405180910390fd5b60008290036103c65760405163014f1da760e21b815260040160405180910390fd5b5060408051838152602081018390526034600c820120908201909152546001145b92915050565b600046860361040f5760405163e822b48d60e01b815260040160405180910390fd5b6001600160a01b038516610436576040516354cdfc8d60e11b815260040160405180910390fd5b60008490036104585760405163014f1da760e21b815260040160405180910390fd5b600061046683850185611bf9565b90506000610480676d78637a6b65766d60c01b60006105d0565b8251604051632e24533960e21b81526001600160a01b03929092169163b8914ce4916104b29160040190815260200190565b602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611cc0565b60408051898152602081018990526034600c820120818301909252606081019190915290915061055490608001604051602081830303815290604052604051806040016040528060018152602001600160f81b8152508460200151846106c9565b98975050505050505050565b60008181036105825760405163014f1da760e21b815260040160405180910390fd5b506040805133815260208101929092526034600c83012091810190526001815590565b60006105b28484846106ed565b90505b9392505050565b6105c4610656565b6105ce60006107a1565b565b60006105b54684846106ed565b6105e5610656565b6001600160a01b03811661064a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fc565b610653816107a1565b50565b6065546001600160a01b031633146105ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fc565b6106b86107f3565b6106c0610822565b61065381610851565b6000806106d58661089a565b90506106e3818686866108cc565b9695505050505050565b60975460405163195ac1a960e21b815260048101859052602481018490526000916001600160a01b03169063656b06a490604401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190611cd9565b90508115801561077957506001600160a01b038116155b156105b557604051631467050360e21b815260048101859052602481018490526044016102fc565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661081a5760405162461bcd60e51b81526004016102fc90611cf6565b6105ce610909565b600054610100900460ff166108495760405162461bcd60e51b81526004016102fc90611cf6565b6105ce610936565b6001600160a01b03811661087857604051634d084d8560e11b815260040160405180910390fd5b609780546001600160a01b0319166001600160a01b0392909216919091179055565b606081805190602001206040516020016108b691815260200190565b6040516020818303038152906040529050919050565b60008060006108dc878686610966565b915091508180156108fe57508051602080830191909120875191880191909120145b979650505050505050565b600054610100900460ff166109305760405162461bcd60e51b81526004016102fc90611cf6565b60018055565b600054610100900460ff1661095d5760405162461bcd60e51b81526004016102fc90611cf6565b6105ce336107a1565b60006060600061097585610a41565b90506000806000610987848a89610b3a565b8151929550909350915015808061099b5750815b6109e75760405162461bcd60e51b815260206004820152601a60248201527f50726f76696465642070726f6f6620697320696e76616c69642e00000000000060448201526064016102fc565b600081610a035760405180602001604052806000815250610a2f565b610a2f86610a12600188611d57565b81518110610a2257610a22611d6a565b6020026020010151610f5a565b919b919a509098505050505050505050565b60606000610a4e83610f81565b90506000815167ffffffffffffffff811115610a6c57610a6c611b89565b604051908082528060200260200182016040528015610ab157816020015b6040805180820190915260608082526020820152815260200190600190039081610a8a5790505b50905060005b8251811015610b32576000610ae4848381518110610ad757610ad7611d6a565b6020026020010151610fb4565b90506040518060400160405280610afa83610f81565b815260200182815250838381518110610b1557610b15611d6a565b60200260200101819052505080610b2b90611d80565b9050610ab7565b509392505050565b600060606000806000610b4c87611044565b90506000869050600080610b73604051806040016040528060608152602001606081525090565b60005b8c51811015610f32578c8181518110610b9157610b91611d6a565b602002602001015191508284610ba79190611d99565b9350610bb4600188611d99565b965083600003610c11578482602001518051906020012014610c0c5760405162461bcd60e51b8152602060048201526011602482015270092dcecc2d8d2c840e4dedee840d0c2e6d607b1b60448201526064016102fc565b610cd3565b602082602001515110610c78578482602001518051906020012014610c0c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c6172676520696e7465726e616c2068617368000000000060448201526064016102fc565b84610c86836020015161117d565b14610cd35760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420696e7465726e616c206e6f6465206861736800000000000060448201526064016102fc565b610cdf60106001611dac565b60ff1682600001515103610d4d5785518414610f32576000868581518110610d0957610d09611d6a565b01602001518351805160f89290921c925060009183908110610d2d57610d2d611d6a565b60200260200101519050610d40816111a5565b9650600194505050610f22565b81515160011901610eda576000610d63836111db565b9050600081600081518110610d7a57610d7a611d6a565b016020015160f81c90506000610d91600283611dc5565b610d9c906002611df5565b90506000610dad848360ff166111ff565b90506000610dbb8b8a6111ff565b90506000610dc98383611235565b905060ff851660021480610de0575060ff85166003145b15610e1a57808351148015610df55750808251145b15610e0757610e04818b611d99565b99505b50600160ff1b9950610f32945050505050565b60ff85161580610e2d575060ff85166001145b15610e835782518114610e4d5750600160ff1b9950610f32945050505050565b610e748860000151600181518110610e6757610e67611d6a565b60200260200101516111a5565b9a509750610f22945050505050565b60405162461bcd60e51b815260206004820152602660248201527f52656365697665642061206e6f6465207769746820616e20756e6b6e6f776e206044820152650e0e4caccd2f60d31b60648201526084016102fc565b60405162461bcd60e51b815260206004820152601d60248201527f526563656976656420616e20756e706172736561626c65206e6f64652e00000060448201526064016102fc565b610f2b81611d80565b9050610b76565b50600160ff1b841486610f4587866111ff565b909e909d50909b509950505050505050505050565b805180516060916103e791610f7190600190611d57565b81518110610ad757610ad7611d6a565b6040805180820182526000808252602091820152815180830190925282518252808301908201526060906103e7906112af565b60606000806000610fc48561149b565b919450925090506000816001811115610fdf57610fdf611e0e565b1461102c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c502062797465732076616c75652e000000000000000060448201526064016102fc565b61103b856020015184846117e5565b95945050505050565b60606000825160026110569190611e24565b67ffffffffffffffff81111561106e5761106e611b89565b6040519080825280601f01601f191660200182016040528015611098576020820181803683370190505b50905060005b83518110156111765760048482815181106110bb576110bb611d6a565b01602001516001600160f81b031916901c826110d8836002611e24565b815181106110e8576110e8611d6a565b60200101906001600160f81b031916908160001a905350601084828151811061111357611113611d6a565b0160200151611125919060f81c611dc5565b60f81b82611134836002611e24565b61113f906001611d99565b8151811061114f5761114f611d6a565b60200101906001600160f81b031916908160001a90535061116f81611d80565b905061109e565b5092915050565b600060208251101561119157506020015190565b818060200190518101906103e79190611cc0565b600060606020836000015110156111c6576111bf8361188e565b90506111d2565b6111cf83610fb4565b90505b6105b58161117d565b60606103e76111fa8360000151600081518110610ad757610ad7611d6a565b611044565b60608251821061121e57506040805160208101909152600081526103e7565b6105b583838486516112309190611d57565b611899565b6000805b8084511180156112495750808351115b801561129a575082818151811061126257611262611d6a565b602001015160f81c60f81b6001600160f81b03191684828151811061128957611289611d6a565b01602001516001600160f81b031916145b156105b5576112a881611d80565b9050611239565b60606000806112bd8461149b565b919350909150600190508160018111156112d9576112d9611e0e565b146113265760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c50206c6973742076616c75652e00000000000000000060448201526064016102fc565b6040805160208082526104208201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161133f5790505090506000835b865181101561149057602082106113d85760405162461bcd60e51b815260206004820152602a60248201527f50726f766964656420524c50206c6973742065786365656473206d6178206c6960448201526939ba103632b733ba341760b11b60648201526084016102fc565b6000806114156040518060400160405280858c600001516113f99190611d57565b8152602001858c6020015161140e9190611d99565b905261149b565b5091509150604051806040016040528083836114319190611d99565b8152602001848b602001516114469190611d99565b81525085858151811061145b5761145b611d6a565b6020908102919091010152611471600185611d99565b935061147d8183611d99565b6114879084611d99565b9250505061136c565b508152949350505050565b6000806000808460000151116114f35760405162461bcd60e51b815260206004820152601860248201527f524c50206974656d2063616e6e6f74206265206e756c6c2e000000000000000060448201526064016102fc565b6020840151805160001a607f81116115185760006001600094509450945050506117de565b60b7811161159457600061152d608083611d57565b9050808760000151116115825760405162461bcd60e51b815260206004820152601960248201527f496e76616c696420524c502073686f727420737472696e672e0000000000000060448201526064016102fc565b600195509350600092506117de915050565b60bf81116116835760006115a960b783611d57565b9050808760000151116115fe5760405162461bcd60e51b815260206004820152601f60248201527f496e76616c696420524c50206c6f6e6720737472696e67206c656e6774682e0060448201526064016102fc565b600183015160208290036101000a90046116188183611d99565b8851116116675760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420524c50206c6f6e6720737472696e672e000000000000000060448201526064016102fc565b611672826001611d99565b96509450600093506117de92505050565b60f781116116fe57600061169860c083611d57565b9050808760000151116116ed5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420524c502073686f7274206c6973742e00000000000000000060448201526064016102fc565b6001955093508492506117de915050565b600061170b60f783611d57565b9050808760000151116117605760405162461bcd60e51b815260206004820152601d60248201527f496e76616c696420524c50206c6f6e67206c697374206c656e6774682e00000060448201526064016102fc565b600183015160208290036101000a900461177a8183611d99565b8851116117c25760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b210292628103637b733903634b9ba1760511b60448201526064016102fc565b6117cd826001611d99565b96509450600193506117de92505050565b9193909250565b606060008267ffffffffffffffff81111561180257611802611b89565b6040519080825280601f01601f19166020018201604052801561182c576020820181803683370190505b509050805160000361183f5790506105b5565b8484016020820160005b85811015611861578281015182820152602001611849565b5060006001602087066020036101000a039050808251168119845116178252839450505050509392505050565b60606103e7826119f0565b6060816118a781601f611d99565b10156118e65760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102fc565b826118f18382611d99565b10156119305760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016102fc565b61193a8284611d99565b8451101561197e5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016102fc565b60608215801561199d57604051915060008252602082016040526119e7565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156119d65780518352602092830192016119be565b5050858452601f01601f1916604052505b50949350505050565b60606103e78260200151600084600001516117e5565b6001600160a01b038116811461065357600080fd5b600060208284031215611a2d57600080fd5b81356105b581611a06565b60008060408385031215611a4b57600080fd5b8235611a5681611a06565b946020939093013593505050565b600080600080600060808688031215611a7c57600080fd5b853594506020860135611a8e81611a06565b935060408601359250606086013567ffffffffffffffff80821115611ab257600080fd5b818801915088601f830112611ac657600080fd5b813581811115611ad557600080fd5b896020828501011115611ae757600080fd5b9699959850939650602001949392505050565b600060208284031215611b0c57600080fd5b5035919050565b80358015158114611b2357600080fd5b919050565b600080600060608486031215611b3d57600080fd5b8335925060208401359150611b5460408501611b13565b90509250925092565b60008060408385031215611b7057600080fd5b82359150611b8060208401611b13565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611bc257611bc2611b89565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611bf157611bf1611b89565b604052919050565b60006020808385031215611c0c57600080fd5b823567ffffffffffffffff80821115611c2457600080fd5b9084019060408287031215611c3857600080fd5b611c40611b9f565b823581528383013582811115611c5557600080fd5b80840193505086601f840112611c6a57600080fd5b823582811115611c7c57611c7c611b89565b611c8e601f8201601f19168601611bc8565b92508083528785828601011115611ca457600080fd5b8085850186850137600090830185015292830152509392505050565b600060208284031215611cd257600080fd5b5051919050565b600060208284031215611ceb57600080fd5b81516105b581611a06565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103818111156103e7576103e7611d41565b634e487b7160e01b600052603260045260246000fd5b600060018201611d9257611d92611d41565b5060010190565b808201808211156103e7576103e7611d41565b60ff81811683821601908111156103e7576103e7611d41565b600060ff831680611de657634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60ff82811682821603908111156103e7576103e7611d41565b634e487b7160e01b600052602160045260246000fd5b80820281158282048414176103e7576103e7611d4156fea2646970667358221220f2e645db4b28a1bf9cd156dea909421b55d70b1f5bf74f94e5e4d24672e3179564736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x1000777700000000000000000000000000000007": {
+    "contractName": "SignalServiceProxy",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000000": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000001": "0x0000000000000000000000000000000000000000000000000000000000000001",
+      "0x0000000000000000000000000000000000000000000000000000000000000065": "0x0000000000000000000000005d9f59f49b5e5c83c1776c5add039a3c955d3b02",
+      "0x0000000000000000000000000000000000000000000000000000000000000097": "0x0000000000000000000000001000777700000000000000000000000000000006",
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x0000777700000000000000000000000000000007"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000001": {
+    "contractName": "Placeholder1Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000002": {
+    "contractName": "Placeholder2Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000003": {
+    "contractName": "Placeholder3Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000004": {
+    "contractName": "Placeholder4Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000005": {
+    "contractName": "Placeholder5Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000006": {
+    "contractName": "Placeholder6Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000007": {
+    "contractName": "Placeholder7Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000008": {
+    "contractName": "Placeholder8Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x2000777700000000000000000000000000000009": {
+    "contractName": "Placeholder9Proxy",
+    "storage": {
+      "0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103": "0x52f60448790E485F38f2Aa9c867CD0DD647c0b73",
+      "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc": "0x2000777700000000000000000000000000000000"
+    },
+    "code": "0x60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b6100803660046106c2565b610118565b61005b6100933660046106dd565b610155565b3480156100a457600080fd5b506100ad6101bc565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e43660046106c2565b6101ed565b3480156100f557600080fd5b506100ad61020d565b610106610269565b6101166101116102fe565b610308565b565b61012061032c565b6001600160a01b0316330361014d5761014a8160405180602001604052806000815250600061035f565b50565b61014a6100fe565b61015d61032c565b6001600160a01b031633036101b4576101af8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506001925061035f915050565b505050565b6101af6100fe565b60006101c661032c565b6001600160a01b031633036101e2576101dd6102fe565b905090565b6101ea6100fe565b90565b6101f561032c565b6001600160a01b0316330361014d5761014a8161038a565b600061021761032c565b6001600160a01b031633036101e2576101dd61032c565b606061025383836040518060600160405280602781526020016107d4602791396103de565b9392505050565b6001600160a01b03163b151590565b61027161032c565b6001600160a01b031633036101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101dd610456565b3660008037600080366000845af43d6000803e808015610327573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103688361047e565b6000825111806103755750805b156101af57610384838361022e565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103b361032c565b604080516001600160a01b03928316815291841660208301520160405180910390a161014a816104be565b6060600080856001600160a01b0316856040516103fb9190610784565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044c86838387610567565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610350565b610487816105e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105235760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016102f5565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b606083156105d65782516000036105cf576001600160a01b0385163b6105cf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f5565b50816105e0565b6105e0838361067c565b949350505050565b6001600160a01b0381163b6106555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102f5565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610546565b81511561068c5781518083602001fd5b8060405162461bcd60e51b81526004016102f591906107a0565b80356001600160a01b03811681146106bd57600080fd5b919050565b6000602082840312156106d457600080fd5b610253826106a6565b6000806000604084860312156106f257600080fd5b6106fb846106a6565b9250602084013567ffffffffffffffff8082111561071857600080fd5b818601915086601f83011261072c57600080fd5b81358181111561073b57600080fd5b87602082850101111561074d57600080fd5b6020830194508093505050509250925092565b60005b8381101561077b578181015183820152602001610763565b50506000910152565b60008251610796818460208701610760565b9190910192915050565b60208152600082518060208401526107bf816040850160208701610760565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ead290cceeeba785eccb9f568eb30de0cf324e6c328a556d66c2893f35e3aa9b64736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0x0000777700000000000000000000000000000005": {
+    "contractName": "RegularERC20",
+    "storage": {
+      "0x0000000000000000000000000000000000000000000000000000000000000003": "0x526567756c617245524332300000000000000000000000000000000000000018",
+      "0x0000000000000000000000000000000000000000000000000000000000000004": "0x52474c0000000000000000000000000000000000000000000000000000000006",
+      "0x0000000000000000000000000000000000000000000000000000000000000002": "0x00000000000000000000000000000000000000000000000000000000002ee000",
+      "0x4e880ea9fbb4022d750e64ee99c5d03663337ad951989e938a3ae2420b4ab64e": "0x00000000000000000000000000000000000000000000000000000000000fa000",
+      "0x9f212623c87f9ee0f1db43a8af1e683d6b2ab852dad6a569ffce3b55b16e3020": "0x00000000000000000000000000000000000000000000000000000000000fa000",
+      "0xf07e3ee5ae2c3e48baa549b219fcb3bb667aca3ba790f4d223650663ccf69b6f": "0x00000000000000000000000000000000000000000000000000000000000fa000"
+    },
+    "code": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c3919061069c565b60405180910390f35b6100df6100da366004610706565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610730565b61024c565b604051601281526020016100c3565b6100df610131366004610706565b610270565b6100f361014436600461076c565b6001600160a01b031660009081526020819052604090205490565b6100b6610292565b6100df610175366004610706565b6102a1565b6100df610188366004610706565b610321565b6100f361019b36600461078e565b61032f565b6060600380546101af906107c1565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107c1565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b60003361024081858561035a565b60019150505b92915050565b60003361025a85828561047e565b6102658585856104f8565b506001949350505050565b600033610240818585610283838361032f565b61028d91906107fb565b61035a565b6060600480546101af906107c1565b600033816102af828661032f565b9050838110156103145760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610265828686840361035a565b6000336102408185856104f8565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103bc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161030b565b6001600160a01b03821661041d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161030b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061048a848461032f565b905060001981146104f257818110156104e55760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161030b565b6104f2848484840361035a565b50505050565b6001600160a01b03831661055c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161030b565b6001600160a01b0382166105be5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161030b565b6001600160a01b038316600090815260208190526040902054818110156106365760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161030b565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104f2565b600060208083528351808285015260005b818110156106c9578581018301518582016040015282016106ad565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070157600080fd5b919050565b6000806040838503121561071957600080fd5b610722836106ea565b946020939093013593505050565b60008060006060848603121561074557600080fd5b61074e846106ea565b925061075c602085016106ea565b9150604084013590509250925092565b60006020828403121561077e57600080fd5b610787826106ea565b9392505050565b600080604083850312156107a157600080fd5b6107aa836106ea565b91506107b8602084016106ea565b90509250929050565b600181811c908216806107d557607f821691505b6020821081036107f557634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024657634e487b7160e01b600052601160045260246000fdfea26469706673582212201fe15079f7774ec8d0ed5b2c6cad746e9907ab9df007c7df3b830b71672fc03964736f6c63430008120033",
+    "balance": "0x0"
+  },
+  "0xF35626227F81aC7A059b895701F31EEF2f9d788b": {
+    "contractName": "Create2Factory",
+    "storage": {},
+    "code": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80638129fc1c1461003b578063a326ea2714610045575b600080fd5b610043610074565b005b6100586100533660046101f4565b610181565b6040516001600160a01b03909116815260200160405180910390f35b600054610100900460ff16158080156100945750600054600160ff909116105b806100ae5750303b1580156100ae575060005460ff166001145b6101155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015610138576000805461ff0019166101001790555b801561017e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b600080838351602085016000f59050803b61019b57600080fd5b6040516001600160a01b03821681527fcf78cf0d6f3d8371e1075c69c492ab4ec5d8cf23a1a239b6a51a1d00be7ca3129060200160405180910390a19392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561020757600080fd5b82359150602083013567ffffffffffffffff8082111561022657600080fd5b818501915085601f83011261023a57600080fd5b81358181111561024c5761024c6101de565b604051601f8201601f19908116603f01168101908382118183101715610274576102746101de565b8160405282815288602084870101111561028d57600080fd5b826020860160208301376000602084830101528095505050505050925092905056fea264697066735822122032822a0722a7644f1f28c3685363a5a3e95cacf8a643ae703e21e965abbcd86664736f6c63430008120033",
+    "balance": "0x0"
+  }
+}
\ No newline at end of file
diff --git a/mxc-geth/core/mxc_genesis.go b/mxc-geth/core/mxc_genesis.go
new file mode 100644
index 0000000..6d5f45f
--- /dev/null
+++ b/mxc-geth/core/mxc_genesis.go
@@ -0,0 +1,40 @@
+package core
+
+import (
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common"
+	mxcGenesis "github.com/ethereum/go-ethereum/core/mxc_genesis"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/params"
+)
+
+// MxcGenesisBlock returns the Mxc network genesis block configs.
+func MxcGenesisBlock(networkID uint64) *Genesis {
+	chainConfig := params.MxcChainConfig
+
+	var allocJSON []byte
+	switch networkID {
+	case params.MxcWannseeNetworkID.Uint64():
+		chainConfig.ChainID = params.MxcWannseeNetworkID
+		allocJSON = mxcGenesis.MxcWannseeGenesisAllocJSON
+	default:
+		chainConfig.ChainID = params.MxcMainnetNetworkID
+		allocJSON = mxcGenesis.MainnetGenesisAllocJSON
+	}
+
+	var alloc GenesisAlloc
+	if err := alloc.UnmarshalJSON(allocJSON); err != nil {
+		log.Crit("unmarshal alloc json error", "error", err)
+	}
+
+	return &Genesis{
+		Config:     chainConfig,
+		ExtraData:  []byte{},
+		GasLimit:   uint64(6000000),
+		Difficulty: common.Big0,
+		Alloc:      alloc,
+		GasUsed:    0,
+		BaseFee:    new(big.Int).SetUint64(10000000),
+	}
+}
diff --git a/mxc-geth/core/mxc_pool_content_splitter.go b/mxc-geth/core/mxc_pool_content_splitter.go
new file mode 100644
index 0000000..7a8cc6f
--- /dev/null
+++ b/mxc-geth/core/mxc_pool_content_splitter.go
@@ -0,0 +1,203 @@
+package core
+
+import (
+	"fmt"
+	"math/big"
+	"strings"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/rlp"
+)
+
+// PoolContent represents a response body of a `txpool_content` RPC call.
+type PoolContent map[common.Address]types.Transactions
+
+// Len returns the number of transactions in the PoolContent.
+func (pc PoolContent) Len() int {
+	len := 0
+	for _, pendingTxs := range pc {
+		len += pendingTxs.Len()
+	}
+
+	return len
+}
+
+// ToTxsByPriceAndNonce creates a transaction set that can retrieve price sorted transactions in a nonce-honouring way.
+func (pc PoolContent) ToTxsByPriceAndNonce(
+	chainID *big.Int,
+	localAddresses []common.Address,
+) (
+	locals *types.TransactionsByPriceAndNonce,
+	remotes *types.TransactionsByPriceAndNonce,
+) {
+	var (
+		localTxs  = map[common.Address]types.Transactions{}
+		remoteTxs = map[common.Address]types.Transactions{}
+	)
+
+	for address, txsWithNonce := range pc {
+	out:
+		for _, tx := range txsWithNonce {
+			for _, localAddress := range localAddresses {
+				if address == localAddress {
+					localTxs[address] = append(localTxs[address], tx)
+					continue out
+				}
+			}
+			remoteTxs[address] = append(remoteTxs[address], tx)
+		}
+	}
+
+	return types.NewTransactionsByPriceAndNonce(types.LatestSignerForChainID(chainID), localTxs, nil),
+		types.NewTransactionsByPriceAndNonce(types.LatestSignerForChainID(chainID), remoteTxs, nil)
+}
+
+// PoolContentSplitter is responsible for splitting the pool content
+// which fetched from a `txpool_content` RPC call response into several smaller transactions lists
+// and make sure each splitted list satisfies the limits defined in Mxc protocol.
+type PoolContentSplitter struct {
+	chainID                 *big.Int
+	maxTransactionsPerBlock uint64
+	blockMaxGasLimit        uint64
+	maxBytesPerTxList       uint64
+	minTxGasLimit           uint64
+	locals                  []common.Address
+}
+
+// NewPoolContentSplitter creates a new PoolContentSplitter instance.
+func NewPoolContentSplitter(
+	chainID *big.Int,
+	maxTransactionsPerBlock uint64,
+	blockMaxGasLimit uint64,
+	maxBytesPerTxList uint64,
+	minTxGasLimit uint64,
+	locals []string,
+) (*PoolContentSplitter, error) {
+	var localsAddresses []common.Address
+	for _, account := range locals {
+		if trimmed := strings.TrimSpace(account); !common.IsHexAddress(trimmed) {
+			return nil, fmt.Errorf("invalid account: %s", trimmed)
+		} else {
+			localsAddresses = append(localsAddresses, common.HexToAddress(account))
+		}
+	}
+
+	return &PoolContentSplitter{
+		chainID:                 chainID,
+		maxTransactionsPerBlock: maxTransactionsPerBlock,
+		blockMaxGasLimit:        blockMaxGasLimit,
+		maxBytesPerTxList:       maxBytesPerTxList,
+		minTxGasLimit:           minTxGasLimit,
+		locals:                  localsAddresses,
+	}, nil
+}
+
+// Split splits the given transaction pool content to make each splitted
+// transactions list satisfies the rules defined in Mxc protocol.
+func (p *PoolContentSplitter) Split(poolContent PoolContent) []types.Transactions {
+	var (
+		localTxs, remoteTxs   = poolContent.ToTxsByPriceAndNonce(p.chainID, p.locals)
+		splittedLocalTxLists  = p.splitTxs(localTxs)
+		splittedRemoteTxLists = p.splitTxs(remoteTxs)
+	)
+
+	splittedTxLists := append(splittedLocalTxLists, splittedRemoteTxLists...)
+
+	return splittedTxLists
+}
+
+// validateTx checks whether the given transaction is valid according
+// to the rules in Mxc protocol.
+func (p *PoolContentSplitter) validateTx(tx *types.Transaction) error {
+	if tx.Gas() < p.minTxGasLimit || tx.Gas() > p.blockMaxGasLimit {
+		return fmt.Errorf(
+			"transaction %s gas limit reaches the limits, got=%v, lowerBound=%v, upperBound=%v",
+			tx.Hash(), tx.Gas(), p.minTxGasLimit, p.blockMaxGasLimit,
+		)
+	}
+
+	b, err := rlp.EncodeToBytes(tx)
+	if err != nil {
+		return fmt.Errorf(
+			"failed to rlp encode the pending transaction %s: %w", tx.Hash(), err,
+		)
+	}
+
+	if len(b) > int(p.maxBytesPerTxList) {
+		return fmt.Errorf(
+			"size of transaction %s's rlp encoded bytes is bigger than the limit, got=%v, limit=%v",
+			tx.Hash(), len(b), p.maxBytesPerTxList,
+		)
+	}
+
+	return nil
+}
+
+// isTxBufferFull checks whether the given transaction can be appended to the
+// current transaction list
+// NOTE: this function *MUST* be called after using `validateTx` to check every
+// inside transaction is valid.
+func (p *PoolContentSplitter) isTxBufferFull(t *types.Transaction, txs []*types.Transaction, gas uint64) bool {
+	if len(txs) >= int(p.maxTransactionsPerBlock) {
+		return true
+	}
+
+	if gas+t.Gas() > p.blockMaxGasLimit {
+		return true
+	}
+
+	// Transactions list's RLP encoding error has already been checked in
+	// `validateTx`, so no need to check the error here.
+	if b, _ := rlp.EncodeToBytes(append([]*types.Transaction{t}, txs...)); len(b) > int(p.maxBytesPerTxList) {
+		return true
+	}
+
+	return false
+}
+
+// splitTxs the internal implementation Split, splits the given transactions into small transactions lists
+// which satisfy the protocol constraints.
+func (p *PoolContentSplitter) splitTxs(txs *types.TransactionsByPriceAndNonce) []types.Transactions {
+	var (
+		splittedTxLists        = make([]types.Transactions, 0)
+		txBuffer               = make([]*types.Transaction, 0, p.maxTransactionsPerBlock)
+		gasBuffer       uint64 = 0
+	)
+	for {
+		tx := txs.Peek()
+		if tx == nil {
+			break
+		}
+
+		// If the transaction is invalid, we simply ignore it.
+		if err := p.validateTx(tx); err != nil {
+			log.Debug("Invalid pending transaction", "hash", tx.Hash(), "error", err)
+			txs.Pop() // If this tx is invalid, ignore this sender's other txs in pool.
+			continue
+		}
+
+		// If the transactions buffer is full, we make all transactions in
+		// current buffer a new splitted transaction list, and then reset the
+		// buffer.
+		if p.isTxBufferFull(tx, txBuffer, gasBuffer) {
+			splittedTxLists = append(splittedTxLists, txBuffer)
+			txBuffer = make([]*types.Transaction, 0, p.maxTransactionsPerBlock)
+			gasBuffer = 0
+		}
+
+		txBuffer = append(txBuffer, tx)
+		gasBuffer += tx.Gas()
+
+		txs.Shift()
+	}
+
+	// Maybe there are some remaining transactions in current buffer,
+	// make them a new transactions list too.
+	if len(txBuffer) > 0 {
+		splittedTxLists = append(splittedTxLists, txBuffer)
+	}
+
+	return splittedTxLists
+}
diff --git a/mxc-geth/core/mxc_pool_content_splitter_test.go b/mxc-geth/core/mxc_pool_content_splitter_test.go
new file mode 100644
index 0000000..b420e94
--- /dev/null
+++ b/mxc-geth/core/mxc_pool_content_splitter_test.go
@@ -0,0 +1,101 @@
+package core
+
+import (
+	"crypto/rand"
+	"math/big"
+	"testing"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/crypto"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/rlp"
+	"github.com/stretchr/testify/require"
+)
+
+func TestPoolContentSplit(t *testing.T) {
+	testAddress := "0x0000777735367b36bC9B61C50022d9D0700dB4Ec"
+	testPrivKey := "92954368afd3caa1f3ce3ead0069c1af414054aefe1ef9aeacc1bf426222ce38"
+
+	// Gas limit is smaller than the limit.
+	splitter := &PoolContentSplitter{
+		chainID:       new(big.Int).SetUint64(1336),
+		minTxGasLimit: 21000,
+	}
+
+	splitted := splitter.Split(PoolContent{
+		common.BytesToAddress(randomBytes(32)): {
+			types.NewTx(&types.LegacyTx{}),
+		},
+	})
+
+	require.Empty(t, splitted)
+
+	// Gas limit is larger than the limit.
+	splitter = &PoolContentSplitter{
+		chainID:       new(big.Int).SetUint64(1336),
+		minTxGasLimit: 21000,
+	}
+
+	splitted = splitter.Split(PoolContent{
+		common.BytesToAddress(randomBytes(32)): {
+			types.NewTx(&types.LegacyTx{Gas: 21001}),
+		},
+	})
+
+	require.Empty(t, splitted)
+
+	// Transaction's RLP encoded bytes is larger than the limit.
+	txBytesTooLarge := types.NewTx(&types.LegacyTx{})
+
+	bytes, err := rlp.EncodeToBytes(txBytesTooLarge)
+	require.Nil(t, err)
+	require.NotEmpty(t, bytes)
+
+	splitter = &PoolContentSplitter{
+		chainID:           new(big.Int).SetUint64(1336),
+		maxBytesPerTxList: uint64(len(bytes) - 1),
+		minTxGasLimit:     uint64(len(bytes) - 2),
+	}
+
+	splitted = splitter.Split(PoolContent{
+		common.BytesToAddress(randomBytes(32)): {txBytesTooLarge},
+	})
+
+	require.Empty(t, splitted)
+
+	// Transactions that meet the limits
+	testKey, err := crypto.HexToECDSA(testPrivKey)
+	require.Nil(t, err)
+
+	signer := types.LatestSignerForChainID(new(big.Int).SetUint64(1336))
+	tx1 := types.MustSignNewTx(testKey, signer, &types.LegacyTx{Gas: 21001, Nonce: 1})
+	tx2 := types.MustSignNewTx(testKey, signer, &types.LegacyTx{Gas: 21001, Nonce: 2})
+
+	bytes, err = rlp.EncodeToBytes(tx1)
+	require.Nil(t, err)
+	require.NotEmpty(t, bytes)
+
+	splitter = &PoolContentSplitter{
+		chainID:                 new(big.Int).SetUint64(1336),
+		minTxGasLimit:           21000,
+		maxBytesPerTxList:       uint64(len(bytes) + 1000),
+		maxTransactionsPerBlock: 1,
+		blockMaxGasLimit:        tx1.Gas() + 1000,
+	}
+
+	splitted = splitter.Split(PoolContent{
+		common.HexToAddress(testAddress): {tx1, tx2},
+	})
+
+	require.Equal(t, 2, len(splitted))
+}
+
+// RandomBytes generates a random bytes.
+func randomBytes(size int) (b []byte) {
+	b = make([]byte, size)
+	if _, err := rand.Read(b); err != nil {
+		log.Crit("Generate random bytes error", "error", err)
+	}
+	return
+}
diff --git a/mxc-geth/core/rawdb/gen_taiko_l1_origin.go b/mxc-geth/core/rawdb/gen_taiko_l1_origin.go
new file mode 100644
index 0000000..6cbd6c3
--- /dev/null
+++ b/mxc-geth/core/rawdb/gen_taiko_l1_origin.go
@@ -0,0 +1,60 @@
+// Code generated by github.com/fjl/gencodec. DO NOT EDIT.
+
+package rawdb
+
+import (
+	"encoding/json"
+	"errors"
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/common/math"
+)
+
+var _ = (*l1OriginMarshaling)(nil)
+
+// MarshalJSON marshals as JSON.
+func (l L1Origin) MarshalJSON() ([]byte, error) {
+	type L1Origin struct {
+		BlockID       *math.HexOrDecimal256 `json:"blockID" gencodec:"required"`
+		L2BlockHash   common.Hash           `json:"l2BlockHash"`
+		L1BlockHeight *math.HexOrDecimal256 `json:"l1BlockHeight" gencodec:"required"`
+		L1BlockHash   common.Hash           `json:"l1BlockHash" gencodec:"required"`
+	}
+	var enc L1Origin
+	enc.BlockID = (*math.HexOrDecimal256)(l.BlockID)
+	enc.L2BlockHash = l.L2BlockHash
+	enc.L1BlockHeight = (*math.HexOrDecimal256)(l.L1BlockHeight)
+	enc.L1BlockHash = l.L1BlockHash
+	return json.Marshal(&enc)
+}
+
+// UnmarshalJSON unmarshals from JSON.
+func (l *L1Origin) UnmarshalJSON(input []byte) error {
+	type L1Origin struct {
+		BlockID       *math.HexOrDecimal256 `json:"blockID" gencodec:"required"`
+		L2BlockHash   *common.Hash          `json:"l2BlockHash"`
+		L1BlockHeight *math.HexOrDecimal256 `json:"l1BlockHeight" gencodec:"required"`
+		L1BlockHash   *common.Hash          `json:"l1BlockHash" gencodec:"required"`
+	}
+	var dec L1Origin
+	if err := json.Unmarshal(input, &dec); err != nil {
+		return err
+	}
+	if dec.BlockID == nil {
+		return errors.New("missing required field 'blockID' for L1Origin")
+	}
+	l.BlockID = (*big.Int)(dec.BlockID)
+	if dec.L2BlockHash != nil {
+		l.L2BlockHash = *dec.L2BlockHash
+	}
+	if dec.L1BlockHeight == nil {
+		return errors.New("missing required field 'l1BlockHeight' for L1Origin")
+	}
+	l.L1BlockHeight = (*big.Int)(dec.L1BlockHeight)
+	if dec.L1BlockHash == nil {
+		return errors.New("missing required field 'l1BlockHash' for L1Origin")
+	}
+	l.L1BlockHash = *dec.L1BlockHash
+	return nil
+}
diff --git a/mxc-geth/core/rawdb/taiko_l1_origin.go b/mxc-geth/core/rawdb/taiko_l1_origin.go
new file mode 100644
index 0000000..cfba55f
--- /dev/null
+++ b/mxc-geth/core/rawdb/taiko_l1_origin.go
@@ -0,0 +1,92 @@
+package rawdb
+
+import (
+	"bytes"
+	"fmt"
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/common/math"
+	"github.com/ethereum/go-ethereum/ethdb"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/rlp"
+)
+
+var (
+	// Database key prefix for L2 block's L1Origin.
+	l1OriginPrefix  = []byte("TKO:L1O")
+	headL1OriginKey = []byte("TKO:LastL1O")
+)
+
+// l1OriginKey calculates the L1Origin key.
+// l1OriginPrefix + l2HeaderHash -> l1OriginKey
+func l1OriginKey(blockID *big.Int) []byte {
+	data, _ := (*math.HexOrDecimal256)(blockID).MarshalText()
+	return append(l1OriginPrefix, data...)
+}
+
+//go:generate go run github.com/fjl/gencodec -type L1Origin -field-override l1OriginMarshaling -out gen_mxc_l1_origin.go
+
+// L1Origin represents a L1Origin of a L2 block.
+type L1Origin struct {
+	BlockID       *big.Int    `json:"blockID" gencodec:"required"`
+	L2BlockHash   common.Hash `json:"l2BlockHash"`
+	L1BlockHeight *big.Int    `json:"l1BlockHeight" gencodec:"required"`
+	L1BlockHash   common.Hash `json:"l1BlockHash" gencodec:"required"`
+}
+
+type l1OriginMarshaling struct {
+	BlockID       *math.HexOrDecimal256
+	L1BlockHeight *math.HexOrDecimal256
+}
+
+// WriteL1Origin stores a L1Origin into the database.
+func WriteL1Origin(db ethdb.KeyValueWriter, blockID *big.Int, l1Origin *L1Origin) {
+	data, err := rlp.EncodeToBytes(l1Origin)
+	if err != nil {
+		log.Crit("Failed to encode L1Origin", "err", err)
+	}
+
+	if err := db.Put(l1OriginKey(blockID), data); err != nil {
+		log.Crit("Failed to store L1Origin", "err", err)
+	}
+}
+
+// ReadL1Origin retrieves the given L2 block's L1Origin from database.
+func ReadL1Origin(db ethdb.KeyValueReader, blockID *big.Int) (*L1Origin, error) {
+	data, _ := db.Get(l1OriginKey(blockID))
+	if len(data) == 0 {
+		return nil, nil
+	}
+
+	l1Origin := new(L1Origin)
+	if err := rlp.Decode(bytes.NewReader(data), l1Origin); err != nil {
+		return nil, fmt.Errorf("invalid L1Origin RLP bytes: %w", err)
+	}
+
+	return l1Origin, nil
+}
+
+// WriteHeadL1Origin stores the given L1Origin as the last L1Origin.
+func WriteHeadL1Origin(db ethdb.KeyValueWriter, blockID *big.Int) {
+	data, _ := (*math.HexOrDecimal256)(blockID).MarshalText()
+	if err := db.Put(headL1OriginKey, data); err != nil {
+		log.Crit("Failed to store head L1Origin", "error", err)
+	}
+}
+
+// ReadHeadL1Origin retrieves the last L1Origin from database.
+func ReadHeadL1Origin(db ethdb.KeyValueReader) (*big.Int, error) {
+	data, _ := db.Get(headL1OriginKey)
+	if len(data) == 0 {
+		return nil, nil
+	}
+
+	blockID := new(math.HexOrDecimal256)
+	if err := blockID.UnmarshalText(data); err != nil {
+		log.Error("Unmarshal L1Origin unmarshal error", "error", err)
+		return nil, fmt.Errorf("invalid L1Origin unmarshal: %w", err)
+	}
+
+	return (*big.Int)(blockID), nil
+}
diff --git a/mxc-geth/core/rawdb/taiko_l1_origin_test.go b/mxc-geth/core/rawdb/taiko_l1_origin_test.go
new file mode 100644
index 0000000..dae37a3
--- /dev/null
+++ b/mxc-geth/core/rawdb/taiko_l1_origin_test.go
@@ -0,0 +1,59 @@
+package rawdb
+
+import (
+	"crypto/rand"
+	"math/big"
+	"testing"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+)
+
+// randomBigInt generates a random big integer.
+func randomBigInt() *big.Int {
+	randomBigInt, err := rand.Int(rand.Reader, common.Big256)
+	if err != nil {
+		log.Crit(err.Error())
+	}
+
+	return randomBigInt
+}
+
+// randomHash generates a random blob of data and returns it as a hash.
+func randomHash() common.Hash {
+	var hash common.Hash
+	if n, err := rand.Read(hash[:]); n != common.HashLength || err != nil {
+		panic(err)
+	}
+	return hash
+}
+
+func TestL1Origin(t *testing.T) {
+	db := NewMemoryDatabase()
+	testL1Origin := &L1Origin{
+		BlockID:       randomBigInt(),
+		L2BlockHash:   randomHash(),
+		L1BlockHeight: randomBigInt(),
+		L1BlockHash:   randomHash(),
+	}
+	WriteL1Origin(db, testL1Origin.BlockID, testL1Origin)
+	l1Origin, err := ReadL1Origin(db, testL1Origin.BlockID)
+	require.Nil(t, err)
+	require.NotNil(t, l1Origin)
+	assert.Equal(t, testL1Origin.BlockID, l1Origin.BlockID)
+	assert.Equal(t, testL1Origin.L2BlockHash, l1Origin.L2BlockHash)
+	assert.Equal(t, testL1Origin.L1BlockHeight, l1Origin.L1BlockHeight)
+	assert.Equal(t, testL1Origin.L1BlockHash, l1Origin.L1BlockHash)
+}
+
+func TestHeadL1Origin(t *testing.T) {
+	db := NewMemoryDatabase()
+	testBlockID := randomBigInt()
+	WriteHeadL1Origin(db, testBlockID)
+	blockID, err := ReadHeadL1Origin(db)
+	require.Nil(t, err)
+	require.NotNil(t, blockID)
+	assert.Equal(t, testBlockID, blockID)
+}
diff --git a/go-ethereum/core/state_prefetcher.go b/mxc-geth/core/state_prefetcher.go
index c258eee..af94868 100644
--- a/go-ethereum/core/state_prefetcher.go
+++ b/mxc-geth/core/state_prefetcher.go
@@ -63,7 +63,7 @@ func (p *statePrefetcher) Prefetch(block *types.Block, statedb *state.StateDB, c
 			return
 		}
 		// Convert the transaction into an executable message and pre-cache its sender
-		msg, err := TransactionToMessage(tx, signer, header.BaseFee)
+		msg, err := TransactionToMessage(tx, signer, header.BaseFee, i == 0)
 		if err != nil {
 			return // Also invalid block, bail out
 		}
diff --git a/go-ethereum/core/state_processor.go b/mxc-geth/core/state_processor.go
index 2fa9c41..20ab4fb 100644
--- a/go-ethereum/core/state_processor.go
+++ b/mxc-geth/core/state_processor.go
@@ -74,7 +74,7 @@ func (p *StateProcessor) Process(block *types.Block, statedb *state.StateDB, cfg
 	vmenv := vm.NewEVM(blockContext, vm.TxContext{}, statedb, p.config, cfg)
 	// Iterate over and process the individual transactions
 	for i, tx := range block.Transactions() {
-		msg, err := TransactionToMessage(tx, types.MakeSigner(p.config, header.Number), header.BaseFee)
+		msg, err := TransactionToMessage(tx, types.MakeSigner(p.config, header.Number), header.BaseFee, i == 0)
 		if err != nil {
 			return nil, nil, 0, fmt.Errorf("could not apply tx %d [%v]: %w", i, tx.Hash().Hex(), err)
 		}
@@ -146,8 +146,8 @@ func applyTransaction(msg *Message, config *params.ChainConfig, gp *GasPool, sta
 // and uses the input parameters for its environment. It returns the receipt
 // for the transaction, gas used and an error if the transaction failed,
 // indicating the block was invalid.
-func ApplyTransaction(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *uint64, cfg vm.Config) (*types.Receipt, error) {
-	msg, err := TransactionToMessage(tx, types.MakeSigner(config, header.Number), header.BaseFee)
+func ApplyTransaction(config *params.ChainConfig, bc ChainContext, author *common.Address, gp *GasPool, statedb *state.StateDB, header *types.Header, tx *types.Transaction, usedGas *uint64, cfg vm.Config, isAnchor bool) (*types.Receipt, error) {
+	msg, err := TransactionToMessage(tx, types.MakeSigner(config, header.Number), header.BaseFee, isAnchor)
 	if err != nil {
 		return nil, err
 	}
diff --git a/go-ethereum/core/state_transition.go b/mxc-geth/core/state_transition.go
index 1802f1d..5e12c49 100644
--- a/go-ethereum/core/state_transition.go
+++ b/mxc-geth/core/state_transition.go
@@ -140,10 +140,13 @@ type Message struct {
 	// account nonce in state. It also disables checking that the sender is an EOA.
 	// This field will be set to true for operations like RPC eth_call.
 	SkipAccountChecks bool
+
+	// CHANGE(mxc): Whteher the current transaction is the first transaction in a block.
+	IsFirstTx bool
 }
 
 // TransactionToMessage converts a transaction into a Message.
-func TransactionToMessage(tx *types.Transaction, s types.Signer, baseFee *big.Int) (*Message, error) {
+func TransactionToMessage(tx *types.Transaction, s types.Signer, baseFee *big.Int, isFirstTx bool) (*Message, error) {
 	msg := &Message{
 		Nonce:             tx.Nonce(),
 		GasLimit:          tx.Gas(),
@@ -155,6 +158,7 @@ func TransactionToMessage(tx *types.Transaction, s types.Signer, baseFee *big.In
 		Data:              tx.Data(),
 		AccessList:        tx.AccessList(),
 		SkipAccountChecks: false,
+		IsFirstTx:         isFirstTx,
 	}
 	// If baseFee provided, set gasPrice to effectiveGasPrice.
 	if baseFee != nil {
@@ -234,6 +238,11 @@ func (st *StateTransition) buyGas() error {
 		balanceCheck = balanceCheck.Mul(balanceCheck, st.msg.GasFeeCap)
 		balanceCheck.Add(balanceCheck, st.msg.Value)
 	}
+	// CHANGE(mxc): skip balance check for MxcL2.anchor transaction.
+	if st.isAnchor() {
+		balanceCheck = common.Big0
+		mgval = common.Big0
+	}
 	if have, want := st.state.GetBalance(st.msg.From), balanceCheck; have.Cmp(want) < 0 {
 		return fmt.Errorf("%w: address %v have %v want %v", ErrInsufficientFunds, st.msg.From.Hex(), have, want)
 	}
@@ -274,7 +283,7 @@ func (st *StateTransition) preCheck() error {
 	// Make sure that transaction gasFeeCap is greater than the baseFee (post london)
 	if st.evm.ChainConfig().IsLondon(st.evm.Context.BlockNumber) {
 		// Skip the checks if gas fields are zero and baseFee was explicitly disabled (eth_call)
-		if !st.evm.Config.NoBaseFee || msg.GasFeeCap.BitLen() > 0 || msg.GasTipCap.BitLen() > 0 {
+		if (!st.evm.Config.NoBaseFee || msg.GasFeeCap.BitLen() > 0 || msg.GasTipCap.BitLen() > 0) && !st.isAnchor() {
 			if l := msg.GasFeeCap.BitLen(); l > 256 {
 				return fmt.Errorf("%w: address %v, maxFeePerGas bit length: %d", ErrFeeCapVeryHigh,
 					msg.From.Hex(), l)
@@ -394,7 +403,15 @@ func (st *StateTransition) TransitionDb() (*ExecutionResult, error) {
 	} else {
 		fee := new(big.Int).SetUint64(st.gasUsed())
 		fee.Mul(fee, effectiveTip)
-		st.state.AddBalance(st.evm.Context.Coinbase, fee)
+		// CHANGE(MXC): coinbase reward redirect to treasury
+		st.state.AddBalance(st.evm.ChainConfig().Treasury, fee)
+		// CHANGE(mxc): basefee is not burnt, but sent to a treasury instead.
+		if st.evm.ChainConfig().Mxc && st.evm.Context.BaseFee != nil && !st.isAnchor() {
+			st.state.AddBalance(
+				st.evm.ChainConfig().Treasury,
+				new(big.Int).Mul(st.evm.Context.BaseFee, new(big.Int).SetUint64(st.gasUsed())),
+			)
+		}
 	}
 
 	return &ExecutionResult{
@@ -425,3 +442,9 @@ func (st *StateTransition) refundGas(refundQuotient uint64) {
 func (st *StateTransition) gasUsed() uint64 {
 	return st.initialGas - st.gasRemaining
 }
+
+func (st *StateTransition) isAnchor() bool {
+	return st.evm.ChainConfig().Mxc &&
+		st.msg.IsFirstTx &&
+		st.msg.From == common.HexToAddress("0x0000777735367b36bC9B61C50022d9D0700dB4Ec")
+}
diff --git a/go-ethereum/core/txpool/txpool.go b/mxc-geth/core/txpool/txpool.go
index ac4486c..b8322db 100644
--- a/go-ethereum/core/txpool/txpool.go
+++ b/mxc-geth/core/txpool/txpool.go
@@ -1364,7 +1364,13 @@ func (pool *TxPool) reset(oldHead, newHead *types.Header) {
 	}
 	pool.currentState = statedb
 	pool.pendingNonces = newNoncer(statedb)
-	pool.currentMaxGas = newHead.GasLimit
+	// CHANGE(mxc): current gas limit for transaction caps is always
+	// LibSharedConfig.blockMaxGasLimit defined in protocol.
+	if pool.chainconfig.Mxc {
+		pool.currentMaxGas = 6000000 // LibSharedConfig.blockMaxGasLimit
+	} else {
+		pool.currentMaxGas = newHead.GasLimit
+	}
 
 	// Inject any transactions discarded due to reorgs
 	log.Debug("Reinjecting stale transactions", "count", len(reinject))
diff --git a/go-ethereum/core/types/block.go b/mxc-geth/core/types/block.go
index e2c71ab..2ee5279 100644
--- a/go-ethereum/core/types/block.go
+++ b/mxc-geth/core/types/block.go
@@ -26,8 +26,10 @@ import (
 	"sync/atomic"
 	"time"
 
+	"github.com/ethereum/go-ethereum/accounts/abi"
 	"github.com/ethereum/go-ethereum/common"
 	"github.com/ethereum/go-ethereum/common/hexutil"
+	"github.com/ethereum/go-ethereum/crypto"
 	"github.com/ethereum/go-ethereum/rlp"
 )
 
@@ -254,6 +256,16 @@ func NewBlockWithWithdrawals(header *Header, txs []*Transaction, uncles []*Heade
 	return b.WithWithdrawals(withdrawals)
 }
 
+// CHANGE(MXC): use custom withdrawals hasher
+func NewMxcBlockWithWithdrawals(header *Header, txs []*Transaction, uncles []*Header, receipts []*Receipt, withdrawals []*Withdrawal, hasher TrieHasher) *Block {
+	b := NewBlock(header, txs, uncles, receipts, hasher)
+
+	h := CalcWithdrawalsRootMxc(withdrawals)
+	b.header.WithdrawalsHash = &h
+
+	return b.WithWithdrawals(withdrawals)
+}
+
 // NewBlockWithHeader creates a block with the given header data. The
 // header data is copied, changes to header and to the field values
 // will not affect the block.
@@ -453,3 +465,44 @@ func HeaderParentHashFromRLP(header []byte) common.Hash {
 	}
 	return common.BytesToHash(parentHash)
 }
+
+var (
+	ethDepositsType, _ = abi.NewType("tuple[]", "[]MxcData.EthDeposit", []abi.ArgumentMarshaling{
+		{Name: "recipient", Type: "address"},
+		{Name: "amount", Type: "uint96"},
+		{Name: "id", Type: "uint64"},
+	})
+	ethDepositsArgs = abi.Arguments{{Name: "EthDeposit", Type: ethDepositsType}}
+)
+
+type ethDeposit struct {
+	Recipient common.Address
+	Amount    *big.Int
+	Id        uint64
+}
+
+// CHANGE(mxc): calc withdrawals root by abi.encode deposits with keccak256.
+// Golang equivalent to this solidity function:
+//
+//	function hashEthDeposits(MxcData.EthDeposit[] memory deposits) internal pure returns (bytes32) {
+//		return keccak256(abi.encode(deposits));
+//	}
+func CalcWithdrawalsRootMxc(withdrawals []*Withdrawal) common.Hash {
+	// only process withdrawals/deposits of `TaikoConfig.minEthDepositsPerBlock` minimum.
+	if len(withdrawals) == 0 {
+		return common.HexToHash("0x569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd") // a known keccak256 hash of zero withdrawal.
+	}
+
+	var deposits []ethDeposit
+	for _, withdrawal := range withdrawals {
+		deposits = append(deposits, ethDeposit{
+			Recipient: withdrawal.Address,
+			Amount:    new(big.Int).SetUint64(withdrawal.Amount),
+			Id:        withdrawal.Index,
+		})
+	}
+
+	b, _ := ethDepositsArgs.Pack(deposits)
+
+	return crypto.Keccak256Hash(b)
+}
diff --git a/go-ethereum/core/types/block_test.go b/mxc-geth/core/types/block_test.go
index 49197c9..c729d0f 100644
--- a/go-ethereum/core/types/block_test.go
+++ b/mxc-geth/core/types/block_test.go
@@ -28,6 +28,7 @@ import (
 	"github.com/ethereum/go-ethereum/crypto"
 	"github.com/ethereum/go-ethereum/params"
 	"github.com/ethereum/go-ethereum/rlp"
+	"github.com/stretchr/testify/assert"
 	"golang.org/x/crypto/sha3"
 )
 
@@ -342,3 +343,71 @@ func TestRlpDecodeParentHash(t *testing.T) {
 		}
 	}
 }
+
+// CHANGE(mxc): test `CalcWithdrawalsRootMxc`
+func TestCalcWithdrawalsRootMxc(t *testing.T) {
+	tests := []struct {
+		name        string
+		withdrawals []*Withdrawal
+		want        common.Hash
+	}{
+		{
+			"empty",
+			nil,
+			common.HexToHash("0x569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd"),
+		},
+		{
+			"withWithdrawals",
+			[]*Withdrawal{
+				{
+					Address: common.HexToAddress("0xa9bcF99f5eb19277f48b71F9b14f5960AEA58a89"),
+					Amount:  1000000000000000000,
+					Index:   0,
+				},
+				{
+					Address: common.HexToAddress("0x200708D76eB1B69761c23821809d53F65049939e"),
+					Amount:  2000000000000000000,
+					Index:   1,
+				},
+				{
+					Address: common.HexToAddress("0x300C9b60E19634e12FC6D68B7FEa7bFB26c2E419"),
+					Amount:  3000000000000000000,
+					Index:   2,
+				},
+				{
+					Address: common.HexToAddress("0x400147C0Eb43D8D71b2B03037bB7B31f8f78EF5F"),
+					Amount:  4000000000000000000,
+					Index:   3,
+				},
+				{
+					Address: common.HexToAddress("0x50081b12838240B1bA02b3177153Bca678a86078"),
+					Amount:  5000000000000000000,
+					Index:   4,
+				},
+				{
+					Address: common.HexToAddress("0x430c9b60e19634e12FC6d68B7fEa7bFB26c2e419"),
+					Amount:  6000000000000000000,
+					Index:   5,
+				},
+				{
+					Address: common.HexToAddress("0x520147C0eB43d8D71b2b03037bB7b31f8F78EF5f"),
+					Amount:  7000000000000000000,
+					Index:   6,
+				},
+				{
+					Address: common.HexToAddress("0x61081B12838240B1Ba02b3177153BcA678a86078"),
+					Amount:  8000000000000000000,
+					Index:   7,
+				},
+			},
+			common.HexToHash("0x60386add6a400d9b23968e1239bd600d22d2eea4709246895c0e5d8f5ae49dc3"),
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			got := CalcWithdrawalsRootMxc(tt.withdrawals)
+			assert.Equal(t, tt.want, got)
+		})
+	}
+}
diff --git a/go-ethereum/eth/backend.go b/mxc-geth/eth/backend.go
index 6368c0e..7c10806 100644
--- a/go-ethereum/eth/backend.go
+++ b/mxc-geth/eth/backend.go
@@ -141,7 +141,13 @@ func New(stack *node.Node, config *ethconfig.Config) (*Ethereum, error) {
 	if err != nil {
 		return nil, err
 	}
-	engine := ethconfig.CreateConsensusEngine(stack, &ethashConfig, cliqueConfig, config.Miner.Notify, config.Miner.Noverify, chainDb)
+
+	// CHANGE(MXC): set if `--mxc` flag is set.
+	var isMxc bool
+	if config.Genesis != nil && config.Genesis.Config != nil {
+		isMxc = config.Genesis.Config.Mxc
+	}
+	engine := ethconfig.CreateConsensusEngine(stack, &ethashConfig, cliqueConfig, config.Miner.Notify, config.Miner.Noverify, chainDb, isMxc)
 
 	eth := &Ethereum{
 		config:            config,
diff --git a/go-ethereum/eth/catalyst/api.go b/mxc-geth/eth/catalyst/api.go
index 9077f20..6fc2b7f 100644
--- a/go-ethereum/eth/catalyst/api.go
+++ b/mxc-geth/eth/catalyst/api.go
@@ -214,6 +214,7 @@ func (api *ConsensusAPI) forkchoiceUpdated(update engine.ForkchoiceStateV1, payl
 		log.Warn("Forkchoice requested update to zero hash")
 		return engine.STATUS_INVALID, nil // TODO(karalabe): Why does someone send us this?
 	}
+
 	// Stash away the last update to warn the user if the beacon client goes offline
 	api.lastForkchoiceLock.Lock()
 	api.lastForkchoiceUpdate = time.Now()
@@ -289,6 +290,10 @@ func (api *ConsensusAPI) forkchoiceUpdated(update engine.ForkchoiceStateV1, payl
 			PayloadID:     id,
 		}
 	}
+
+	// CHANGE(MXC): check whether --mxc flag is set.
+	isMxc := api.eth.BlockChain().Config().Mxc
+
 	if rawdb.ReadCanonicalHash(api.eth.ChainDb(), block.NumberU64()) != update.HeadBlockHash {
 		// Block is not canonical, set head.
 		if latestValid, err := api.eth.BlockChain().SetCanonical(block); err != nil {
@@ -298,6 +303,10 @@ func (api *ConsensusAPI) forkchoiceUpdated(update engine.ForkchoiceStateV1, payl
 		// If the specified head matches with our local head, do nothing and keep
 		// generating the payload. It's a special corner case that a few slots are
 		// missing and we are requested to generate the payload in slot.
+	} else if isMxc { // CHANGE(mxc): reorg is allowed in L2.
+		if latestValid, err := api.eth.BlockChain().SetCanonical(block); err != nil {
+			return engine.ForkChoiceResponse{PayloadStatus: engine.PayloadStatusV1{Status: engine.INVALID, LatestValidHash: &latestValid}}, err
+		}
 	} else {
 		// If the head block is already in our canonical chain, the beacon client is
 		// probably resyncing. Ignore the update.
@@ -342,6 +351,57 @@ func (api *ConsensusAPI) forkchoiceUpdated(update engine.ForkchoiceStateV1, payl
 	// sealed by the beacon client. The payload will be requested later, and we
 	// will replace it arbitrarily many times in between.
 	if payloadAttributes != nil {
+		// CHANGE(mxc): create a L2 block by Mxc protocol.
+		if isMxc {
+			// No need to check payloadAttribute here, because all its fields are
+			// marked as required.
+
+			block, err := api.eth.Miner().SealBlockWith(
+				update.HeadBlockHash,
+				payloadAttributes.Timestamp,
+				payloadAttributes.BlockMetadata,
+				payloadAttributes.BaseFeePerGas,
+				payloadAttributes.Withdrawals,
+				types.CalcWithdrawalsRootMxc(payloadAttributes.Withdrawals),
+			)
+			if err != nil {
+				log.Error("Failed to create sealing block", "err", err)
+				return valid(nil), engine.InvalidPayloadAttributes.With(err)
+			}
+
+			// Cache the mined block for later use.
+			args := &miner.BuildPayloadArgs{
+				Parent:       block.ParentHash(),
+				Timestamp:    block.Time(),
+				FeeRecipient: block.Coinbase(),
+				Random:       block.MixDigest(),
+				Withdrawals:  block.Withdrawals(),
+			}
+			id := args.Id()
+			payload, err := api.eth.Miner().BuildPayload(args)
+			if err != nil {
+				log.Error("Failed to build payload", "err", err)
+				return valid(nil), engine.InvalidPayloadAttributes.With(err)
+			}
+
+			payload.SetFullBlock(block, common.Big0)
+
+			api.localBlocks.put(id, payload)
+
+			// L1Origin **MUST NOT** be nil, it's a required field in PayloadAttributesV1.
+			l1Origin := payloadAttributes.L1Origin
+
+			// Set the block hash before inserting the L1Origin into database.
+			l1Origin.L2BlockHash = block.Hash()
+
+			// Write L1Origin.
+			rawdb.WriteL1Origin(api.eth.ChainDb(), l1Origin.BlockID, l1Origin)
+			// Write the head L1Origin.
+			rawdb.WriteHeadL1Origin(api.eth.ChainDb(), l1Origin.BlockID)
+
+			return valid(&id), nil
+		}
+
 		args := &miner.BuildPayloadArgs{
 			Parent:       update.HeadBlockHash,
 			Timestamp:    payloadAttributes.Timestamp,
@@ -430,7 +490,8 @@ func (api *ConsensusAPI) NewPayloadV1(params engine.ExecutableData) (engine.Payl
 // NewPayloadV2 creates an Eth1 block, inserts it in the chain, and returns the status of the chain.
 func (api *ConsensusAPI) NewPayloadV2(params engine.ExecutableData) (engine.PayloadStatusV1, error) {
 	if api.eth.BlockChain().Config().IsShanghai(params.Timestamp) {
-		if params.Withdrawals == nil {
+		if params.Withdrawals == nil &&
+			(api.eth.BlockChain().Config().Mxc && params.WithdrawalsHash == (common.Hash{})) { // CHANGE(taiko): allow only passing `WithdrawalsHash`
 			return engine.PayloadStatusV1{Status: engine.INVALID}, engine.InvalidParams.With(fmt.Errorf("nil withdrawals post-shanghai"))
 		}
 	} else if params.Withdrawals != nil {
@@ -457,10 +518,37 @@ func (api *ConsensusAPI) newPayload(params engine.ExecutableData) (engine.Payloa
 	defer api.newPayloadLock.Unlock()
 
 	log.Trace("Engine API request received", "method", "NewPayload", "number", params.Number, "hash", params.BlockHash)
-	block, err := engine.ExecutableDataToBlock(params)
-	if err != nil {
-		log.Debug("Invalid NewPayload params", "params", params, "error", err)
-		return engine.PayloadStatusV1{Status: engine.INVALID}, nil
+	// CHANGE(mxc): allow passing the executable data with txHash instead of all transactions.
+	var (
+		block *types.Block
+		err   error
+	)
+	params.MxcBlock = api.eth.BlockChain().Config().Mxc
+	if api.eth.BlockChain().Config().Mxc && params.Transactions == nil && params.Withdrawals == nil {
+		block = types.NewBlockWithHeader(&types.Header{
+			ParentHash:      params.ParentHash,
+			UncleHash:       types.EmptyUncleHash,
+			Coinbase:        params.FeeRecipient,
+			Root:            params.StateRoot,
+			TxHash:          params.TxHash,
+			ReceiptHash:     params.ReceiptsRoot,
+			Bloom:           types.BytesToBloom(params.LogsBloom),
+			Difficulty:      common.Big0,
+			Number:          new(big.Int).SetUint64(params.Number),
+			GasLimit:        params.GasLimit,
+			GasUsed:         params.GasUsed,
+			Time:            params.Timestamp,
+			BaseFee:         params.BaseFeePerGas,
+			Extra:           params.ExtraData,
+			MixDigest:       params.Random,
+			WithdrawalsHash: &params.WithdrawalsHash,
+		})
+	} else {
+		block, err = engine.ExecutableDataToBlock(params)
+		if err != nil {
+			log.Debug("Invalid NewPayload params", "params", params, "error", err)
+			return engine.PayloadStatusV1{Status: engine.INVALID}, nil
+		}
 	}
 	// Stash away the last update to warn the user if the beacon client goes offline
 	api.lastNewPayloadLock.Lock()
@@ -503,9 +591,18 @@ func (api *ConsensusAPI) newPayload(params engine.ExecutableData) (engine.Payloa
 		log.Error("Ignoring pre-merge parent block", "number", params.Number, "hash", params.BlockHash, "td", ptd, "ttd", ttd)
 		return engine.INVALID_TERMINAL_BLOCK, nil
 	}
-	if block.Time() <= parent.Time() {
-		log.Warn("Invalid timestamp", "parent", block.Time(), "block", block.Time())
-		return api.invalid(errors.New("invalid timestamp"), parent.Header()), nil
+	// CHANGE(mxc): a block that has the same timestamp as its parents is
+	// allowed in Mxc protocol.
+	if api.eth.BlockChain().Config().Mxc {
+		if block.Time() < parent.Time() {
+			log.Warn("Invalid timestamp", "parent", block.Time(), "block", block.Time())
+			return api.invalid(errors.New("invalid timestamp"), parent.Header()), nil
+		}
+	} else {
+		if block.Time() <= parent.Time() {
+			log.Warn("Invalid timestamp", "parent", block.Time(), "block", block.Time())
+			return api.invalid(errors.New("invalid timestamp"), parent.Header()), nil
+		}
 	}
 	// Another cornercase: if the node is in snap sync mode, but the CL client
 	// tries to make it import a block. That should be denied as pushing something
diff --git a/go-ethereum/eth/downloader/queue.go b/mxc-geth/eth/downloader/queue.go
index 5af5068..81f8fc4 100644
--- a/go-ethereum/eth/downloader/queue.go
+++ b/mxc-geth/eth/downloader/queue.go
@@ -22,6 +22,7 @@ package downloader
 import (
 	"errors"
 	"fmt"
+	"os"
 	"sync"
 	"sync/atomic"
 	"time"
@@ -792,6 +793,17 @@ func (q *queue) DeliverBodies(id string, txLists [][]*types.Transaction, txListH
 			if withdrawalLists[index] == nil {
 				return errInvalidBody
 			}
+			// CHANGE(MXC): change the empty withdrawalsRoot hash to EmptyCodeHash
+			if withdrawalListHashes[index] == types.EmptyRootHash {
+				if os.Getenv("TAIKO_TEST") == "" {
+					withdrawalListHashes[index] = common.HexToHash("0x569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd")
+				}
+			} else {
+				if os.Getenv("TAIKO_TEST") == "" {
+					withdrawalListHashes[index] = types.CalcWithdrawalsRootMxc(withdrawalLists[index])
+				}
+			}
+
 			if withdrawalListHashes[index] != *header.WithdrawalsHash {
 				return errInvalidBody
 			}
diff --git a/go-ethereum/eth/ethconfig/config.go b/mxc-geth/eth/ethconfig/config.go
index db686c5..c35df1a 100644
--- a/go-ethereum/eth/ethconfig/config.go
+++ b/mxc-geth/eth/ethconfig/config.go
@@ -29,6 +29,7 @@ import (
 	"github.com/ethereum/go-ethereum/consensus/beacon"
 	"github.com/ethereum/go-ethereum/consensus/clique"
 	"github.com/ethereum/go-ethereum/consensus/ethash"
+	"github.com/ethereum/go-ethereum/consensus/mxc"
 	"github.com/ethereum/go-ethereum/core"
 	"github.com/ethereum/go-ethereum/core/txpool"
 	"github.com/ethereum/go-ethereum/eth/downloader"
@@ -210,7 +211,12 @@ type Config struct {
 }
 
 // CreateConsensusEngine creates a consensus engine for the given chain configuration.
-func CreateConsensusEngine(stack *node.Node, ethashConfig *ethash.Config, cliqueConfig *params.CliqueConfig, notify []string, noverify bool, db ethdb.Database) consensus.Engine {
+func CreateConsensusEngine(stack *node.Node, ethashConfig *ethash.Config, cliqueConfig *params.CliqueConfig, notify []string, noverify bool, db ethdb.Database, isMxc bool) consensus.Engine {
+	// CHANGE(mxc): use Mxc consensus engine when the --mxc flag is set.
+	if isMxc {
+		return mxc.New()
+	}
+
 	// If proof-of-authority is requested, set it up
 	var engine consensus.Engine
 	if cliqueConfig != nil {
diff --git a/mxc-geth/eth/mxc_api_backend.go b/mxc-geth/eth/mxc_api_backend.go
new file mode 100644
index 0000000..7389077
--- /dev/null
+++ b/mxc-geth/eth/mxc_api_backend.go
@@ -0,0 +1,145 @@
+package eth
+
+import (
+	"math/big"
+
+	"github.com/ethereum/go-ethereum"
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/common/math"
+	"github.com/ethereum/go-ethereum/core"
+	"github.com/ethereum/go-ethereum/core/rawdb"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/log"
+)
+
+// MxcAPIBackend handles l2 node related RPC calls.
+type MxcAPIBackend struct {
+	eth *Ethereum
+}
+
+// NewMxcAPIBackend creates a new MxcAPIBackend instance.
+func NewMxcAPIBackend(eth *Ethereum) *MxcAPIBackend {
+	return &MxcAPIBackend{
+		eth: eth,
+	}
+}
+
+// HeadL1Origin returns the latest L2 block's corresponding L1 origin.
+func (s *MxcAPIBackend) HeadL1Origin() (*rawdb.L1Origin, error) {
+	blockID, err := rawdb.ReadHeadL1Origin(s.eth.ChainDb())
+	if err != nil {
+		return nil, err
+	}
+
+	if blockID == nil {
+		return nil, ethereum.NotFound
+	}
+
+	l1Origin, err := rawdb.ReadL1Origin(s.eth.ChainDb(), blockID)
+	if err != nil {
+		return nil, err
+	}
+
+	if l1Origin == nil {
+		return nil, ethereum.NotFound
+	}
+
+	return l1Origin, nil
+}
+
+// L1OriginByID returns the L2 block's corresponding L1 origin.
+func (s *MxcAPIBackend) L1OriginByID(blockID *math.HexOrDecimal256) (*rawdb.L1Origin, error) {
+	l1Origin, err := rawdb.ReadL1Origin(s.eth.ChainDb(), (*big.Int)(blockID))
+	if err != nil {
+		return nil, err
+	}
+
+	if l1Origin == nil {
+		return nil, ethereum.NotFound
+	}
+
+	return l1Origin, nil
+}
+
+// TxPoolContent retrieves the transaction pool content with the given upper limits.
+func (s *MxcAPIBackend) TxPoolContent(
+	maxTransactionsPerBlock uint64,
+	blockMaxGasLimit uint64,
+	maxBytesPerTxList uint64,
+	minTxGasLimit uint64,
+	locals []string,
+) ([]types.Transactions, error) {
+	pending := s.eth.TxPool().Pending(false)
+
+	log.Debug(
+		"Fetching L2 pending transactions finished",
+		"length", core.PoolContent(pending).Len(),
+		"maxTransactionsPerBlock", maxTransactionsPerBlock,
+		"blockMaxGasLimit", blockMaxGasLimit,
+		"maxBytesPerTxList", maxBytesPerTxList,
+		"minTxGasLimit", minTxGasLimit,
+		"locals", locals,
+	)
+
+	contentSplitter, err := core.NewPoolContentSplitter(
+		s.eth.BlockChain().Config().ChainID,
+		maxTransactionsPerBlock,
+		blockMaxGasLimit,
+		maxBytesPerTxList,
+		minTxGasLimit,
+		locals,
+	)
+	if err != nil {
+		return nil, err
+	}
+
+	var (
+		txsCount = 0
+		txLists  []types.Transactions
+	)
+	for _, splittedTxs := range contentSplitter.Split(filterTxs(pending, s.eth.blockchain.CurrentHeader().BaseFee)) {
+		if txsCount+splittedTxs.Len() < int(maxTransactionsPerBlock) {
+			txLists = append(txLists, splittedTxs)
+			txsCount += splittedTxs.Len()
+			continue
+		}
+
+		txLists = append(txLists, splittedTxs[0:(int(maxTransactionsPerBlock)-txsCount)])
+		break
+	}
+
+	return txLists, nil
+}
+
+func filterTxs(pendings map[common.Address]types.Transactions, baseFee *big.Int) map[common.Address]types.Transactions {
+	executableTxs := make(map[common.Address]types.Transactions)
+	gasPriceLowerLimit := big.NewInt(0).Div(big.NewInt(0).Mul(baseFee, big.NewInt(95)), big.NewInt(100))
+
+	for addr, txs := range pendings {
+		pendingTxs := make(types.Transactions, 0)
+		for _, tx := range txs {
+			// Check baseFee, should not be zero
+			if tx.GasFeeCap().Uint64() == 0 || tx.GasPrice().Cmp(gasPriceLowerLimit) < 0 {
+				log.Debug("Ignore max fee per gas less than block base fee",
+					"gas price", baseFee.Uint64(),
+					"tx gas price", tx.GasPrice().Uint64(),
+					"lower limit", gasPriceLowerLimit.Uint64(),
+				)
+				break
+			}
+
+			// If this tx is a transfer and with high gas limit, ignore it.
+			if len(tx.Data()) == 0 && tx.Gas() > 100_000 {
+				break
+			}
+
+			pendingTxs = append(pendingTxs, tx)
+		}
+
+		if len(pendingTxs) > 0 {
+			executableTxs[addr] = pendingTxs
+		}
+	}
+
+	return executableTxs
+}
diff --git a/go-ethereum/eth/state_accessor.go b/mxc-geth/eth/state_accessor.go
index 59b4714..68d40ac 100644
--- a/go-ethereum/eth/state_accessor.go
+++ b/mxc-geth/eth/state_accessor.go
@@ -212,7 +212,7 @@ func (eth *Ethereum) stateAtTransaction(ctx context.Context, block *types.Block,
 	signer := types.MakeSigner(eth.blockchain.Config(), block.Number())
 	for idx, tx := range block.Transactions() {
 		// Assemble the transaction call message and return if the requested offset
-		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee())
+		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee(), idx == 0)
 		txContext := core.NewEVMTxContext(msg)
 		context := core.NewEVMBlockContext(block.Header(), eth.blockchain, nil)
 		if idx == txIndex {
diff --git a/go-ethereum/eth/tracers/api.go b/mxc-geth/eth/tracers/api.go
index 58ad0c3..33acfd4 100644
--- a/go-ethereum/eth/tracers/api.go
+++ b/mxc-geth/eth/tracers/api.go
@@ -293,7 +293,7 @@ func (api *API) traceChain(start, end *types.Block, config *TraceConfig, closed
 				)
 				// Trace all the transactions contained within
 				for i, tx := range task.block.Transactions() {
-					msg, _ := core.TransactionToMessage(tx, signer, task.block.BaseFee())
+					msg, _ := core.TransactionToMessage(tx, signer, task.block.BaseFee(), i == 0)
 					txctx := &Context{
 						BlockHash:   task.block.Hash(),
 						BlockNumber: task.block.Number(),
@@ -554,7 +554,7 @@ func (api *API) IntermediateRoots(ctx context.Context, hash common.Hash, config
 			return nil, err
 		}
 		var (
-			msg, _    = core.TransactionToMessage(tx, signer, block.BaseFee())
+			msg, _    = core.TransactionToMessage(tx, signer, block.BaseFee(), i == 0)
 			txContext = core.NewEVMTxContext(msg)
 			vmenv     = vm.NewEVM(vmctx, txContext, statedb, chainConfig, vm.Config{})
 		)
@@ -628,7 +628,7 @@ func (api *API) traceBlock(ctx context.Context, block *types.Block, config *Trac
 	)
 	for i, tx := range txs {
 		// Generate the next state snapshot fast without tracing
-		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee())
+		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee(), i == 0)
 		txctx := &Context{
 			BlockHash:   blockHash,
 			BlockNumber: block.Number(),
@@ -671,7 +671,7 @@ func (api *API) traceBlockParallel(ctx context.Context, block *types.Block, stat
 			defer pend.Done()
 			// Fetch and execute the next transaction trace tasks
 			for task := range jobs {
-				msg, _ := core.TransactionToMessage(txs[task.index], signer, block.BaseFee())
+				msg, _ := core.TransactionToMessage(txs[task.index], signer, block.BaseFee(), task.index == 0)
 				txctx := &Context{
 					BlockHash:   blockHash,
 					BlockNumber: block.Number(),
@@ -702,7 +702,7 @@ txloop:
 		}
 
 		// Generate the next state snapshot fast without tracing
-		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee())
+		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee(), i == 0)
 		statedb.SetTxContext(tx.Hash(), i)
 		vmenv := vm.NewEVM(blockCtx, core.NewEVMTxContext(msg), statedb, api.backend.ChainConfig(), vm.Config{})
 		if _, err := core.ApplyMessage(vmenv, msg, new(core.GasPool).AddGas(msg.GasLimit)); err != nil {
@@ -782,7 +782,7 @@ func (api *API) standardTraceBlockToFile(ctx context.Context, block *types.Block
 	for i, tx := range block.Transactions() {
 		// Prepare the transaction for un-traced execution
 		var (
-			msg, _    = core.TransactionToMessage(tx, signer, block.BaseFee())
+			msg, _    = core.TransactionToMessage(tx, signer, block.BaseFee(), i == 0)
 			txContext = core.NewEVMTxContext(msg)
 			vmConf    vm.Config
 			dump      *os.File
diff --git a/go-ethereum/eth/tracers/api_test.go b/mxc-geth/eth/tracers/api_test.go
index b1eaf60..af768ea 100644
--- a/go-ethereum/eth/tracers/api_test.go
+++ b/mxc-geth/eth/tracers/api_test.go
@@ -171,7 +171,7 @@ func (b *testBackend) StateAtTransaction(ctx context.Context, block *types.Block
 	// Recompute transactions up to the target index.
 	signer := types.MakeSigner(b.chainConfig, block.Number())
 	for idx, tx := range block.Transactions() {
-		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee())
+		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee(), idx == 0)
 		txContext := core.NewEVMTxContext(msg)
 		context := core.NewEVMBlockContext(block.Header(), b.chain, nil)
 		if idx == txIndex {
diff --git a/go-ethereum/eth/tracers/internal/tracetest/calltrace_test.go b/mxc-geth/eth/tracers/internal/tracetest/calltrace_test.go
index 62182e3..6f444b9 100644
--- a/go-ethereum/eth/tracers/internal/tracetest/calltrace_test.go
+++ b/mxc-geth/eth/tracers/internal/tracetest/calltrace_test.go
@@ -145,7 +145,7 @@ func testCallTracer(tracerName string, dirPath string, t *testing.T) {
 				t.Fatalf("failed to create call tracer: %v", err)
 			}
 			evm := vm.NewEVM(context, txContext, statedb, test.Genesis.Config, vm.Config{Debug: true, Tracer: tracer})
-			msg, err := core.TransactionToMessage(tx, signer, nil)
+			msg, err := core.TransactionToMessage(tx, signer, nil, false)
 			if err != nil {
 				t.Fatalf("failed to prepare transaction for tracing: %v", err)
 			}
@@ -220,7 +220,7 @@ func benchTracer(tracerName string, test *callTracerTest, b *testing.B) {
 		b.Fatalf("failed to parse testcase input: %v", err)
 	}
 	signer := types.MakeSigner(test.Genesis.Config, new(big.Int).SetUint64(uint64(test.Context.Number)))
-	msg, err := core.TransactionToMessage(tx, signer, nil)
+	msg, err := core.TransactionToMessage(tx, signer, nil, false)
 	if err != nil {
 		b.Fatalf("failed to prepare transaction for tracing: %v", err)
 	}
@@ -314,7 +314,7 @@ func TestZeroValueToNotExitCall(t *testing.T) {
 		t.Fatalf("failed to create call tracer: %v", err)
 	}
 	evm := vm.NewEVM(context, txContext, statedb, params.MainnetChainConfig, vm.Config{Debug: true, Tracer: tracer})
-	msg, err := core.TransactionToMessage(tx, signer, nil)
+	msg, err := core.TransactionToMessage(tx, signer, nil, false)
 	if err != nil {
 		t.Fatalf("failed to prepare transaction for tracing: %v", err)
 	}
diff --git a/go-ethereum/eth/tracers/internal/tracetest/flat_calltrace_test.go b/mxc-geth/eth/tracers/internal/tracetest/flat_calltrace_test.go
index 8cd5a42..8da1d3d 100644
--- a/go-ethereum/eth/tracers/internal/tracetest/flat_calltrace_test.go
+++ b/mxc-geth/eth/tracers/internal/tracetest/flat_calltrace_test.go
@@ -109,7 +109,7 @@ func flatCallTracerTestRunner(tracerName string, filename string, dirPath string
 	}
 	evm := vm.NewEVM(context, txContext, statedb, test.Genesis.Config, vm.Config{Debug: true, Tracer: tracer})
 
-	msg, err := core.TransactionToMessage(tx, signer, nil)
+	msg, err := core.TransactionToMessage(tx, signer, nil, false)
 	if err != nil {
 		return fmt.Errorf("failed to prepare transaction for tracing: %v", err)
 	}
diff --git a/go-ethereum/eth/tracers/internal/tracetest/prestate_test.go b/mxc-geth/eth/tracers/internal/tracetest/prestate_test.go
index f578e2f..86d6264 100644
--- a/go-ethereum/eth/tracers/internal/tracetest/prestate_test.go
+++ b/mxc-geth/eth/tracers/internal/tracetest/prestate_test.go
@@ -115,7 +115,7 @@ func testPrestateDiffTracer(tracerName string, dirPath string, t *testing.T) {
 				t.Fatalf("failed to create call tracer: %v", err)
 			}
 			evm := vm.NewEVM(context, txContext, statedb, test.Genesis.Config, vm.Config{Debug: true, Tracer: tracer})
-			msg, err := core.TransactionToMessage(tx, signer, nil)
+			msg, err := core.TransactionToMessage(tx, signer, nil, false)
 			if err != nil {
 				t.Fatalf("failed to prepare transaction for tracing: %v", err)
 			}
diff --git a/go-ethereum/eth/tracers/tracers_test.go b/mxc-geth/eth/tracers/tracers_test.go
index 7c5ec65..19bc44a 100644
--- a/go-ethereum/eth/tracers/tracers_test.go
+++ b/mxc-geth/eth/tracers/tracers_test.go
@@ -88,7 +88,7 @@ func BenchmarkTransactionTrace(b *testing.B) {
 		//EnableReturnData: false,
 	})
 	evm := vm.NewEVM(context, txContext, statedb, params.AllEthashProtocolChanges, vm.Config{Debug: true, Tracer: tracer})
-	msg, err := core.TransactionToMessage(tx, signer, nil)
+	msg, err := core.TransactionToMessage(tx, signer, nil, false)
 	if err != nil {
 		b.Fatalf("failed to prepare transaction for tracing: %v", err)
 	}
diff --git a/mxc-geth/ethclient/taiko_api.go b/mxc-geth/ethclient/taiko_api.go
new file mode 100644
index 0000000..066f8d1
--- /dev/null
+++ b/mxc-geth/ethclient/taiko_api.go
@@ -0,0 +1,31 @@
+package ethclient
+
+import (
+	"context"
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common/hexutil"
+	"github.com/ethereum/go-ethereum/core/rawdb"
+)
+
+// HeadL1Origin returns the latest L2 block's corresponding L1 origin.
+func (ec *Client) HeadL1Origin(ctx context.Context) (*rawdb.L1Origin, error) {
+	var res *rawdb.L1Origin
+
+	if err := ec.c.CallContext(ctx, &res, "mxc_headL1Origin"); err != nil {
+		return nil, err
+	}
+
+	return res, nil
+}
+
+// L1OriginByID returns the L2 block's corresponding L1 origin.
+func (ec *Client) L1OriginByID(ctx context.Context, blockID *big.Int) (*rawdb.L1Origin, error) {
+	var res *rawdb.L1Origin
+
+	if err := ec.c.CallContext(ctx, &res, "mxc_l1OriginByID", hexutil.EncodeBig(blockID)); err != nil {
+		return nil, err
+	}
+
+	return res, nil
+}
diff --git a/mxc-geth/ethclient/taiko_api_test.go b/mxc-geth/ethclient/taiko_api_test.go
new file mode 100644
index 0000000..fde82c5
--- /dev/null
+++ b/mxc-geth/ethclient/taiko_api_test.go
@@ -0,0 +1,128 @@
+package ethclient
+
+import (
+	"context"
+	"crypto/rand"
+	"math/big"
+	"testing"
+
+	"github.com/ethereum/go-ethereum"
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/consensus/ethash"
+	"github.com/ethereum/go-ethereum/core/rawdb"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/eth"
+	"github.com/ethereum/go-ethereum/eth/ethconfig"
+	"github.com/ethereum/go-ethereum/ethdb"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/node"
+	"github.com/ethereum/go-ethereum/params"
+	"github.com/ethereum/go-ethereum/rpc"
+	"github.com/stretchr/testify/require"
+)
+
+func newMxcAPITestClient(t *testing.T) (*Client, []*types.Block, ethdb.Database) {
+	// Generate test chain.
+	blocks := generateTestChain()
+
+	// Create node
+	n, err := node.New(&node.Config{})
+
+	require.Nil(t, err)
+
+	// Create Ethereum Service
+	config := &ethconfig.Config{Genesis: genesis}
+	config.Ethash.PowMode = ethash.ModeFake
+	ethservice, err := eth.New(n, config)
+	require.Nil(t, err)
+
+	n.RegisterAPIs([]rpc.API{
+		{
+			Namespace: "mxc",
+			Version:   params.VersionWithMeta,
+			Service:   eth.NewMxcAPIBackend(ethservice),
+			Public:    true,
+		},
+	})
+
+	// Start node
+	require.Nil(t, n.Start())
+
+	// Insert test blocks
+	_, err = ethservice.BlockChain().InsertChain(blocks[1:])
+
+	require.Nil(t, err)
+
+	rpcClient, _ := n.Attach()
+
+	return NewClient(rpcClient), blocks, ethservice.ChainDb()
+}
+
+func TestHeadL1Origin(t *testing.T) {
+	ec, blocks, db := newMxcAPITestClient(t)
+
+	headerHash := blocks[len(blocks)-1].Hash()
+
+	l1OriginFound, err := ec.HeadL1Origin(context.Background())
+
+	require.Equal(t, ethereum.NotFound.Error(), err.Error())
+	require.Nil(t, l1OriginFound)
+
+	testL1Origin := &rawdb.L1Origin{
+		BlockID:       randomBigInt(),
+		L2BlockHash:   headerHash,
+		L1BlockHeight: randomBigInt(),
+		L1BlockHash:   randomHash(),
+	}
+
+	rawdb.WriteL1Origin(db, testL1Origin.BlockID, testL1Origin)
+	rawdb.WriteHeadL1Origin(db, testL1Origin.BlockID)
+
+	l1OriginFound, err = ec.HeadL1Origin(context.Background())
+
+	require.Nil(t, err)
+	require.Equal(t, testL1Origin, l1OriginFound)
+}
+
+func TestL1OriginByID(t *testing.T) {
+	ec, blocks, db := newMxcAPITestClient(t)
+
+	headerHash := blocks[len(blocks)-1].Hash()
+	testL1Origin := &rawdb.L1Origin{
+		BlockID:       randomBigInt(),
+		L2BlockHash:   headerHash,
+		L1BlockHeight: randomBigInt(),
+		L1BlockHash:   randomHash(),
+	}
+
+	l1OriginFound, err := ec.L1OriginByID(context.Background(), testL1Origin.BlockID)
+	require.Equal(t, ethereum.NotFound.Error(), err.Error())
+	require.Nil(t, l1OriginFound)
+
+	rawdb.WriteL1Origin(db, testL1Origin.BlockID, testL1Origin)
+	rawdb.WriteHeadL1Origin(db, testL1Origin.BlockID)
+
+	l1OriginFound, err = ec.L1OriginByID(context.Background(), testL1Origin.BlockID)
+
+	require.Nil(t, err)
+	require.Equal(t, testL1Origin, l1OriginFound)
+}
+
+// randomHash generates a random blob of data and returns it as a hash.
+func randomHash() common.Hash {
+	var hash common.Hash
+	if n, err := rand.Read(hash[:]); n != common.HashLength || err != nil {
+		panic(err)
+	}
+	return hash
+}
+
+// randomBigInt generates a random big integer.
+func randomBigInt() *big.Int {
+	randomBigInt, err := rand.Int(rand.Reader, common.Big256)
+	if err != nil {
+		log.Crit(err.Error())
+	}
+
+	return randomBigInt
+}
diff --git a/go-ethereum/les/client.go b/mxc-geth/les/client.go
index 9ac85ec..ce1b8d4 100644
--- a/go-ethereum/les/client.go
+++ b/mxc-geth/les/client.go
@@ -126,7 +126,7 @@ func New(stack *node.Node, config *ethconfig.Config) (*LightEthereum, error) {
 		reqDist:         newRequestDistributor(peers, &mclock.System{}),
 		accountManager:  stack.AccountManager(),
 		merger:          merger,
-		engine:          ethconfig.CreateConsensusEngine(stack, &config.Ethash, chainConfig.Clique, nil, false, chainDb),
+		engine:          ethconfig.CreateConsensusEngine(stack, &config.Ethash, chainConfig.Clique, nil, false, chainDb, chainConfig.Mxc),
 		bloomRequests:   make(chan chan *bloombits.Retrieval),
 		bloomIndexer:    core.NewBloomIndexer(chainDb, params.BloomBitsBlocksClient, params.HelperTrieConfirmations),
 		p2pServer:       stack.Server(),
diff --git a/go-ethereum/les/state_accessor.go b/mxc-geth/les/state_accessor.go
index 030d6b5..68c5248 100644
--- a/go-ethereum/les/state_accessor.go
+++ b/mxc-geth/les/state_accessor.go
@@ -60,7 +60,7 @@ func (leth *LightEthereum) stateAtTransaction(ctx context.Context, block *types.
 	signer := types.MakeSigner(leth.blockchain.Config(), block.Number())
 	for idx, tx := range block.Transactions() {
 		// Assemble the transaction call message and return if the requested offset
-		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee())
+		msg, _ := core.TransactionToMessage(tx, signer, block.BaseFee(), idx == 0)
 		txContext := core.NewEVMTxContext(msg)
 		context := core.NewEVMBlockContext(block.Header(), leth.blockchain, nil)
 		statedb.SetTxContext(tx.Hash(), idx)
diff --git a/mxc-geth/miner/mxc_miner.go b/mxc-geth/miner/mxc_miner.go
new file mode 100644
index 0000000..5344897
--- /dev/null
+++ b/mxc-geth/miner/mxc_miner.go
@@ -0,0 +1,21 @@
+package miner
+
+import (
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/beacon/engine"
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/core/types"
+)
+
+// SealBlockWith mines and seals a block without changing the canonical chain.
+func (miner *Miner) SealBlockWith(
+	parent common.Hash,
+	timestamp uint64,
+	blkMeta *engine.BlockMetadata,
+	baseFeePerGas *big.Int,
+	withdrawals types.Withdrawals,
+	withdrawalsHash common.Hash,
+) (*types.Block, error) {
+	return miner.worker.sealBlockWith(parent, timestamp, blkMeta, baseFeePerGas, withdrawals, withdrawalsHash)
+}
diff --git a/mxc-geth/miner/mxc_payload_building.go b/mxc-geth/miner/mxc_payload_building.go
new file mode 100644
index 0000000..7458ee1
--- /dev/null
+++ b/mxc-geth/miner/mxc_payload_building.go
@@ -0,0 +1,44 @@
+package miner
+
+import (
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/params"
+)
+
+// SetFullBlock updates the full-block to the given block.
+func (payload *Payload) SetFullBlock(block *types.Block, fees *big.Int) {
+	payload.lock.Lock()
+	defer payload.lock.Unlock()
+
+	go payload.afterSetFullBlock()
+
+	payload.full = block
+	payload.fullFees = fees
+
+	feesInEther := new(big.Float).Quo(new(big.Float).SetInt(fees), big.NewFloat(params.Ether))
+	log.Info("Updated payload", "id", payload.id, "number", block.NumberU64(), "hash", block.Hash(),
+		"txs", len(block.Transactions()), "gas", block.GasUsed(), "fees", feesInEther,
+		"root", block.Root())
+
+	payload.cond.Broadcast() // fire signal for notifying full block
+}
+
+func (payload *Payload) afterSetFullBlock() {
+	payload.lock.Lock()
+	defer payload.lock.Unlock()
+
+	select {
+	case <-payload.done:
+		log.Info("SetFullBlock payload done received", "id", payload.id)
+		return
+	default:
+	}
+
+	select {
+	case payload.stop <- struct{}{}:
+	default:
+	}
+}
diff --git a/mxc-geth/miner/mxc_payload_building_test.go b/mxc-geth/miner/mxc_payload_building_test.go
new file mode 100644
index 0000000..a00581a
--- /dev/null
+++ b/mxc-geth/miner/mxc_payload_building_test.go
@@ -0,0 +1,140 @@
+package miner
+
+import (
+	"math/big"
+	"testing"
+	"time"
+
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/consensus/ethash"
+	"github.com/ethereum/go-ethereum/core/rawdb"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/params"
+	"github.com/ethereum/go-ethereum/trie"
+	"github.com/stretchr/testify/assert"
+)
+
+func newTestBlock() *types.Block {
+	tx1 := types.NewTransaction(1, common.BytesToAddress([]byte{0x11}), big.NewInt(111), 1111, big.NewInt(11111), []byte{0x11, 0x11, 0x11})
+	txs := []*types.Transaction{tx1}
+
+	block := types.NewBlock(&types.Header{Number: big.NewInt(314)}, txs, nil, nil, trie.NewStackTrie(nil))
+	return block
+}
+
+func Test_SetFullBlock_AvoidPanic(t *testing.T) {
+	var (
+		db        = rawdb.NewMemoryDatabase()
+		recipient = common.HexToAddress("0xdeadbeef")
+	)
+	w, b := newTestWorker(t, params.TestChainConfig, ethash.NewFaker(), db, 0)
+	defer w.close()
+
+	timestamp := uint64(time.Now().Unix())
+	args := &BuildPayloadArgs{
+		Parent:       b.chain.CurrentBlock().Hash(),
+		Timestamp:    timestamp,
+		Random:       common.Hash{},
+		FeeRecipient: recipient,
+	}
+	payload, err := w.buildPayload(args)
+	if err != nil {
+		t.Fatalf("Failed to build payload %v", err)
+	}
+
+	fees := big.NewInt(1)
+
+	payload.done <- struct{}{}
+	close(payload.stop)
+
+	block := newTestBlock()
+	// expect not to panic sending to payload.stop
+	// now that done is closed
+	payload.SetFullBlock(block, fees)
+}
+
+func Test_AfterSetFullBlock_Panic_DoneChannelNotSent(t *testing.T) {
+	var (
+		db        = rawdb.NewMemoryDatabase()
+		recipient = common.HexToAddress("0xdeadbeef")
+	)
+	w, b := newTestWorker(t, params.TestChainConfig, ethash.NewFaker(), db, 0)
+	defer w.close()
+
+	timestamp := uint64(time.Now().Unix())
+	args := &BuildPayloadArgs{
+		Parent:       b.chain.CurrentBlock().Hash(),
+		Timestamp:    timestamp,
+		Random:       common.Hash{},
+		FeeRecipient: recipient,
+	}
+	payload, err := w.buildPayload(args)
+	if err != nil {
+		t.Fatalf("Failed to build payload %v", err)
+	}
+
+	// dont send on done channel, but close stop channel.
+	// should panic when sent on.
+	close(payload.stop)
+
+	assert.Panics(t, func() {
+		payload.afterSetFullBlock()
+	})
+}
+
+func Test_AfterSetFullBlock_AvoidPanic_DoneChannelSent(t *testing.T) {
+	var (
+		db        = rawdb.NewMemoryDatabase()
+		recipient = common.HexToAddress("0xdeadbeef")
+	)
+	w, b := newTestWorker(t, params.TestChainConfig, ethash.NewFaker(), db, 0)
+	defer w.close()
+
+	timestamp := uint64(time.Now().Unix())
+	args := &BuildPayloadArgs{
+		Parent:       b.chain.CurrentBlock().Hash(),
+		Timestamp:    timestamp,
+		Random:       common.Hash{},
+		FeeRecipient: recipient,
+	}
+	payload, err := w.buildPayload(args)
+	if err != nil {
+		t.Fatalf("Failed to build payload %v", err)
+	}
+
+	payload.done <- struct{}{}
+	close(payload.stop)
+
+	assert.NotPanics(t, func() {
+		payload.afterSetFullBlock()
+	})
+}
+
+func Test_SetFullBlock(t *testing.T) {
+	var (
+		db        = rawdb.NewMemoryDatabase()
+		recipient = common.HexToAddress("0xdeadbeef")
+	)
+	w, b := newTestWorker(t, params.TestChainConfig, ethash.NewFaker(), db, 0)
+	defer w.close()
+
+	timestamp := uint64(time.Now().Unix())
+	args := &BuildPayloadArgs{
+		Parent:       b.chain.CurrentBlock().Hash(),
+		Timestamp:    timestamp,
+		Random:       common.Hash{},
+		FeeRecipient: recipient,
+	}
+	payload, err := w.buildPayload(args)
+	if err != nil {
+		t.Fatalf("Failed to build payload %v", err)
+	}
+
+	fees := big.NewInt(1)
+
+	block := newTestBlock()
+	payload.SetFullBlock(block, fees)
+
+	assert.Equal(t, block, payload.full)
+	assert.Equal(t, fees, payload.fullFees)
+}
diff --git a/mxc-geth/miner/mxc_worker.go b/mxc-geth/miner/mxc_worker.go
new file mode 100644
index 0000000..d6de5cf
--- /dev/null
+++ b/mxc-geth/miner/mxc_worker.go
@@ -0,0 +1,102 @@
+package miner
+
+import (
+	"fmt"
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/beacon/engine"
+	"github.com/ethereum/go-ethereum/common"
+	"github.com/ethereum/go-ethereum/core"
+	"github.com/ethereum/go-ethereum/core/types"
+	"github.com/ethereum/go-ethereum/core/vm"
+	"github.com/ethereum/go-ethereum/log"
+	"github.com/ethereum/go-ethereum/rlp"
+)
+
+// sealBlockWith mines and seals a block with the given block metadata.
+func (w *worker) sealBlockWith(
+	parent common.Hash,
+	timestamp uint64,
+	blkMeta *engine.BlockMetadata,
+	baseFeePerGas *big.Int,
+	withdrawals types.Withdrawals,
+	withdrawalsHash common.Hash,
+) (*types.Block, error) {
+	// Decode transactions bytes.
+	var txs types.Transactions
+	if err := rlp.DecodeBytes(blkMeta.TxList, &txs); err != nil {
+		return nil, fmt.Errorf("failed to decode txList: %w", err)
+	}
+
+	if len(txs) == 0 {
+		// A L2 block needs to have have at least one `V1MxcL2.anchor` or
+		// `V1MxcL2.invalidateBlock` transaction.
+		return nil, fmt.Errorf("too less transactions in the block")
+	}
+
+	params := &generateParams{
+		timestamp:     timestamp,
+		forceTime:     true,
+		parentHash:    parent,
+		coinbase:      blkMeta.Beneficiary,
+		random:        blkMeta.MixHash,
+		withdrawals:   withdrawals,
+		noUncle:       true,
+		noTxs:         false,
+		baseFeePerGas: baseFeePerGas,
+	}
+
+	env, err := w.prepareWork(params)
+	if err != nil {
+		return nil, err
+	}
+	defer env.discard()
+
+	// Set the block fields using the given block metadata:
+	// 1. gas limit
+	// 2. extra data
+	// 3. withdrawals hash
+	env.header.GasLimit = blkMeta.GasLimit
+	env.header.Extra = blkMeta.ExtraData
+	env.header.WithdrawalsHash = &withdrawalsHash
+
+	// Commit transactions.
+	commitErrs := make([]error, 0, len(txs))
+	gasLimit := env.header.GasLimit
+	rules := w.chain.Config().Rules(env.header.Number, true, timestamp)
+
+	env.gasPool = new(core.GasPool).AddGas(gasLimit)
+
+	for i, tx := range txs {
+		sender, err := types.LatestSignerForChainID(tx.ChainId()).Sender(tx)
+		if err != nil {
+			log.Info("Skip an invalid proposed transaction", "hash", tx.Hash(), "reason", err)
+			commitErrs = append(commitErrs, err)
+			continue
+		}
+
+		env.state.Prepare(rules, sender, blkMeta.Beneficiary, tx.To(), vm.ActivePrecompiles(rules), tx.AccessList())
+		env.state.SetTxContext(tx.Hash(), env.tcount)
+		if _, err := w.commitTransaction(env, tx, i == 0); err != nil {
+			log.Info("Skip an invalid proposed transaction", "hash", tx.Hash(), "reason", err)
+			commitErrs = append(commitErrs, err)
+			continue
+		}
+		env.tcount++
+	}
+	// TODO: save the commit transactions errors for generating witness.
+	_ = commitErrs
+
+	block, err := w.engine.FinalizeAndAssemble(w.chain, env.header, env.state, env.txs, nil, env.receipts, withdrawals)
+	if err != nil {
+		return nil, err
+	}
+
+	results := make(chan *types.Block, 1)
+	if err := w.engine.Seal(w.chain, block, results, nil); err != nil {
+		return nil, err
+	}
+	block = <-results
+
+	return block, nil
+}
diff --git a/go-ethereum/miner/payload_building.go b/mxc-geth/miner/payload_building.go
index f84d908..b8c8b42 100644
--- a/go-ethereum/miner/payload_building.go
+++ b/mxc-geth/miner/payload_building.go
@@ -69,6 +69,7 @@ type Payload struct {
 	stop     chan struct{}
 	lock     sync.Mutex
 	cond     *sync.Cond
+	done     chan struct{} // CHANGE(mxc): done channel to communicate we shouldnt write to stop chan
 }
 
 // newPayload initializes the payload object.
@@ -77,6 +78,7 @@ func newPayload(empty *types.Block, id engine.PayloadID) *Payload {
 		id:    id,
 		empty: empty,
 		stop:  make(chan struct{}),
+		done:  make(chan struct{}, 1), // CHANGE(mxc): buffered channel to communicate done to mxc payload builder
 	}
 	log.Info("Starting work on payload", "id", payload.id)
 	payload.cond = sync.NewCond(&payload.lock)
@@ -117,6 +119,7 @@ func (payload *Payload) Resolve() *engine.ExecutionPayloadEnvelope {
 	select {
 	case <-payload.stop:
 	default:
+		payload.done <- struct{}{} // CHANGE(mxc): signal to mxc payload builder to not write to payload.stop channel
 		close(payload.stop)
 	}
 	if payload.full != nil {
@@ -179,6 +182,10 @@ func (w *worker) buildPayload(args *BuildPayloadArgs) (*Payload, error) {
 		for {
 			select {
 			case <-timer.C:
+				// CHANGE(mxc): do not update payload.
+				if w.chainConfig.Mxc {
+					continue
+				}
 				start := time.Now()
 				block, fees, err := w.getSealingBlock(args.Parent, args.Timestamp, args.FeeRecipient, args.Random, args.Withdrawals, false)
 				if err == nil {
diff --git a/go-ethereum/miner/worker.go b/mxc-geth/miner/worker.go
index 67a5842..bd4494e 100644
--- a/go-ethereum/miner/worker.go
+++ b/mxc-geth/miner/worker.go
@@ -860,12 +860,12 @@ func (w *worker) updateSnapshot(env *environment) {
 	w.snapshotState = env.state.Copy()
 }
 
-func (w *worker) commitTransaction(env *environment, tx *types.Transaction) ([]*types.Log, error) {
+func (w *worker) commitTransaction(env *environment, tx *types.Transaction, isAnchor bool) ([]*types.Log, error) {
 	var (
 		snap = env.state.Snapshot()
 		gp   = env.gasPool.Gas()
 	)
-	receipt, err := core.ApplyTransaction(w.chainConfig, w.chain, &env.coinbase, env.gasPool, env.state, env.header, tx, &env.header.GasUsed, *w.chain.GetVMConfig())
+	receipt, err := core.ApplyTransaction(w.chainConfig, w.chain, &env.coinbase, env.gasPool, env.state, env.header, tx, &env.header.GasUsed, *w.chain.GetVMConfig(), isAnchor)
 	if err != nil {
 		env.state.RevertToSnapshot(snap)
 		env.gasPool.SetGas(gp)
@@ -916,7 +916,7 @@ func (w *worker) commitTransactions(env *environment, txs *types.TransactionsByP
 		// Start executing the transaction
 		env.state.SetTxContext(tx.Hash(), env.tcount)
 
-		logs, err := w.commitTransaction(env, tx)
+		logs, err := w.commitTransaction(env, tx, false)
 		switch {
 		case errors.Is(err, core.ErrGasLimitReached):
 			// Pop the current out-of-gas transaction without shifting in the next from the account
@@ -971,14 +971,15 @@ func (w *worker) commitTransactions(env *environment, txs *types.TransactionsByP
 
 // generateParams wraps various of settings for generating sealing task.
 type generateParams struct {
-	timestamp   uint64            // The timstamp for sealing task
-	forceTime   bool              // Flag whether the given timestamp is immutable or not
-	parentHash  common.Hash       // Parent block hash, empty means the latest chain head
-	coinbase    common.Address    // The fee recipient address for including transaction
-	random      common.Hash       // The randomness generated by beacon chain, empty before the merge
-	withdrawals types.Withdrawals // List of withdrawals to include in block.
-	noUncle     bool              // Flag whether the uncle block inclusion is allowed
-	noTxs       bool              // Flag whether an empty block without any transaction is expected
+	timestamp     uint64            // The timstamp for sealing task
+	forceTime     bool              // Flag whether the given timestamp is immutable or not
+	parentHash    common.Hash       // Parent block hash, empty means the latest chain head
+	coinbase      common.Address    // The fee recipient address for including transaction
+	random        common.Hash       // The randomness generated by beacon chain, empty before the merge
+	withdrawals   types.Withdrawals // List of withdrawals to include in block.
+	noUncle       bool              // Flag whether the uncle block inclusion is allowed
+	noTxs         bool              // Flag whether an empty block without any transaction is expected
+	baseFeePerGas *big.Int          // CHANGE(mxc): The base fee per gas for the next block
 }
 
 // prepareWork constructs the sealing task according to the given parameters,
@@ -1001,10 +1002,17 @@ func (w *worker) prepareWork(genParams *generateParams) (*environment, error) {
 	// to parent+1 if the mutation is allowed.
 	timestamp := genParams.timestamp
 	if parent.Time >= timestamp {
-		if genParams.forceTime {
-			return nil, fmt.Errorf("invalid timestamp, parent %d given %d", parent.Time, timestamp)
+		// CHANGE(mxc): block.timestamp == parent.timestamp is allowed in Mxc protocol.
+		if !w.chainConfig.Mxc {
+			if genParams.forceTime {
+				return nil, fmt.Errorf("invalid timestamp, parent %d given %d", parent.Time, timestamp)
+			}
+			timestamp = parent.Time + 1
+		} else {
+			if parent.Time > timestamp {
+				return nil, fmt.Errorf("invalid timestamp, parent %d given %d", parent.Time, timestamp)
+			}
 		}
-		timestamp = parent.Time + 1
 	}
 	// Construct the sealing block header.
 	header := &types.Header{
@@ -1024,10 +1032,14 @@ func (w *worker) prepareWork(genParams *generateParams) (*environment, error) {
 	}
 	// Set baseFee and GasLimit if we are on an EIP-1559 chain
 	if w.chainConfig.IsLondon(header.Number) {
-		header.BaseFee = misc.CalcBaseFee(w.chainConfig, parent)
-		if !w.chainConfig.IsLondon(parent.Number) {
-			parentGasLimit := parent.GasLimit * w.chainConfig.ElasticityMultiplier()
-			header.GasLimit = core.CalcGasLimit(parentGasLimit, w.config.GasCeil)
+		if w.chainConfig.Mxc && genParams.baseFeePerGas != nil {
+			header.BaseFee = genParams.baseFeePerGas
+		} else {
+			header.BaseFee = misc.CalcBaseFee(w.chainConfig, parent)
+			if !w.chainConfig.IsLondon(parent.Number) {
+				parentGasLimit := parent.GasLimit * w.chainConfig.ElasticityMultiplier()
+				header.GasLimit = core.CalcGasLimit(parentGasLimit, w.config.GasCeil)
+			}
 		}
 	}
 	// Run the consensus preparation with the default or customized consensus engine.
diff --git a/go-ethereum/params/config.go b/mxc-geth/params/config.go
index e04b166..c38d5fc 100644
--- a/go-ethereum/params/config.go
+++ b/mxc-geth/params/config.go
@@ -351,6 +351,9 @@ var NetworkNames = map[string]string{
 	RinkebyChainConfig.ChainID.String(): "rinkeby",
 	GoerliChainConfig.ChainID.String():  "goerli",
 	SepoliaChainConfig.ChainID.String(): "sepolia",
+	// CHANGE(MXC): add Mxc network name.
+	MxcMainnetNetworkID.String(): "Mxc",
+	MxcWannseeNetworkID.String(): "Mxc Alpha-3 (Wannsee)",
 }
 
 // TrustedCheckpoint represents a set of post-processed trie roots (CHT and
@@ -450,6 +453,10 @@ type ChainConfig struct {
 	// Various consensus engines
 	Ethash *EthashConfig `json:"ethash,omitempty"`
 	Clique *CliqueConfig `json:"clique,omitempty"`
+
+	// CHANGE(mxc): Mxc network flag.
+	Mxc      bool           `json:"mxc"`
+	Treasury common.Address `json:"treasury"`
 }
 
 // EthashConfig is the consensus engine configs for proof-of-work based sealing.
@@ -482,6 +489,9 @@ func (c *ChainConfig) Description() string {
 	}
 	banner += fmt.Sprintf("Chain ID:  %v (%s)\n", c.ChainID, network)
 	switch {
+	// CHANGE(mxc): print Mxc consensus engine in banner.
+	case c.Mxc:
+		banner += "Consensus: Mxc\n"
 	case c.Ethash != nil:
 		if c.TerminalTotalDifficulty == nil {
 			banner += "Consensus: Ethash (proof-of-work)\n"
diff --git a/mxc-geth/params/mxc_config.go b/mxc-geth/params/mxc_config.go
new file mode 100644
index 0000000..96994bd
--- /dev/null
+++ b/mxc-geth/params/mxc_config.go
@@ -0,0 +1,35 @@
+package params
+
+import (
+	"math/big"
+
+	"github.com/ethereum/go-ethereum/common"
+)
+
+func u64(val uint64) *uint64 { return &val }
+
+// Network IDs
+var (
+	MxcMainnetNetworkID = big.NewInt(516)
+	MxcWannseeNetworkID = big.NewInt(5167003)
+)
+
+var MxcChainConfig = &ChainConfig{
+	ChainID:                       MxcMainnetNetworkID, // Use mainnet network ID by default.
+	HomesteadBlock:                common.Big0,
+	EIP150Block:                   common.Big0,
+	EIP155Block:                   common.Big0,
+	EIP158Block:                   common.Big0,
+	ByzantiumBlock:                common.Big0,
+	ConstantinopleBlock:           common.Big0,
+	PetersburgBlock:               common.Big0,
+	IstanbulBlock:                 common.Big0,
+	BerlinBlock:                   common.Big0,
+	LondonBlock:                   common.Big0,
+	ShanghaiTime:                  u64(0),
+	MergeNetsplitBlock:            nil,
+	TerminalTotalDifficulty:       common.Big0,
+	TerminalTotalDifficultyPassed: true,
+	Mxc:                           true,
+	Treasury:                      common.HexToAddress("0x2000777700000000000000000000000000000001"),
+}
